<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AtomicNET</name>
    </assembly>
    <members>
        <member name="M:AtomicEngine.AppBase.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.AppBase.Setup">
            <summary>
             Setup before engine initialization. 
            </summary>
        </member>
        <member name="M:AtomicEngine.AppBase.Start">
            <summary>
             Setup after engine initialization. L
            </summary>
        </member>
        <member name="M:AtomicEngine.AppBase.Stop">
            <summary>
             Cleanup after the main loop. 
            </summary>
        </member>
        <member name="M:AtomicEngine.AppBase.RunFrame">
            <summary>
             Run a single frame, return's true if engine is exiting
            </summary>
        </member>
        <member name="M:AtomicEngine.AppBase.AddArgument(System.String)">
            <summary>
             Called before initializing application for inserting arguments
            </summary>
        </member>
        <member name="T:AtomicEngine.Application">
            <summary>
             Base class for creating applications which initialize the Urho3D engine and run a main loop until exited.
            </summary>
        </member>
        <member name="M:AtomicEngine.Application.#ctor(System.IntPtr)">
            <summary>
             Construct. Parse default engine parameters from the command line, and create the engine in an uninitialized state.
            </summary>
        </member>
        <member name="M:AtomicEngine.Application.Setup">
            <summary>
             Setup before engine initialization. This is a chance to eg. modify the engine parameters. Call ErrorExit() to terminate without initializing the engine. Called by Application.
            </summary>
        </member>
        <member name="M:AtomicEngine.Application.Start">
            <summary>
             Setup after engine initialization and before running the main loop. Call ErrorExit() to terminate without running the main loop. Called by Application.
            </summary>
        </member>
        <member name="M:AtomicEngine.Application.Stop">
            <summary>
             Cleanup after the main loop. Called by Application.
            </summary>
        </member>
        <member name="M:AtomicEngine.Application.ErrorExit(System.String)">
            <summary>
             Show an error message (last log message if empty), terminate the main loop, and set failure exit code.
            </summary>
        </member>
        <member name="T:AtomicEngine.AppOptions">
            <summary>
            Application options, see full description at:
            http://urho3d.github.io/documentation/1.5/_running.html 
            </summary>
        </member>
        <member name="M:AtomicEngine.AppOptions.#ctor(System.String)">
            <param name="assetsFolder">usually it's "Data". Can be null if built-in assets are enough for you</param>
        </member>
        <member name="P:AtomicEngine.AppOptions.Width">
            <summary>
            Desktop only
            </summary>
        </member>
        <member name="P:AtomicEngine.AppOptions.Height">
            <summary>
            Desktop only
            </summary>
        </member>
        <member name="P:AtomicEngine.AppOptions.WindowedMode">
            <summary>
            Desktop only
            </summary>
        </member>
        <member name="P:AtomicEngine.AppOptions.ResizableWindow">
            <summary>
            Desktop only
            </summary>
        </member>
        <member name="P:AtomicEngine.AppOptions.LimitFps">
            <summary>
            With limit enabled: 200 fps for Desktop (and always 60 fps for mobile despite of the flag)
            </summary>
        </member>
        <member name="P:AtomicEngine.AppOptions.Orientation">
            <summary>
            iOS only
            </summary>
        </member>
        <member name="P:AtomicEngine.AppOptions.ResourcePaths">
            <summary>
            Resource path(s) to use (default: Data, CoreData)
            </summary>
        </member>
        <member name="P:AtomicEngine.AppOptions.ResourcePackagesPaths">
            <summary>
            Resource package files to use (default: empty)
            </summary>
        </member>
        <member name="P:AtomicEngine.AppOptions.TouchEmulation">
            <summary>
            Touch emulation on desktop platform
            </summary>
        </member>
        <member name="P:AtomicEngine.AppOptions.AdditionalFlags">
            <summary>
            Add any flag listed here: http://urho3d.github.io/documentation/1.5/_running.html 
            </summary>
        </member>
        <member name="P:AtomicEngine.AppOptions.ExternalWindow">
            <summary>
            Windows: external window handle (WinForms Panel.Handle) to use in order to display Urho game
            You can use it in WPF via WindowsFormsHost (and a WF panel inside it)
            </summary>
        </member>
        <member name="M:AtomicEngine.NETAtomicPlayer.Create(System.String[])">
            <summary>
             AtomicPlayer for NET deployments
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:AtomicEngine.NETIPCPlayerApp.Create(System.String[],System.Boolean)">
            <summary>
             IPC Player App used with the Atomic Editor
            </summary>
            <param name="args"></param>
            <param name="headless"></param>
            <returns></returns>
        </member>
        <member name="M:AtomicEngine.PlayerApp.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.PlayerApp.Setup">
            <summary>
             Setup before engine initialization. 
            </summary>
        </member>
        <member name="M:AtomicEngine.PlayerApp.Start">
            <summary>
             Setup after engine initialization. L
            </summary>
        </member>
        <member name="M:AtomicEngine.PlayerApp.Stop">
            <summary>
             Cleanup after the main loop. 
            </summary>
        </member>
        <member name="T:AtomicEngine.AObject">
            <summary>
             Base class for objects with type identification, subsystem access and event sending/receiving capability.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.GetTypeName">
            <summary>
             Return type name.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.IsTypeOf(AtomicEngine.StringHash)">
            <summary>
             Check current type is type of specified type.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.IsInstanceOf(AtomicEngine.StringHash)">
            <summary>
             Check current instance is type of specified type.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.UnsubscribeFromEvent(AtomicEngine.StringHash)">
            <summary>
             Unsubscribe from an event.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.UnsubscribeFromEvent(AtomicEngine.AObject,AtomicEngine.StringHash)">
            <summary>
             Unsubscribe from a specific sender's event.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.UnsubscribeFromEvents(AtomicEngine.AObject)">
            <summary>
             Unsubscribe from a specific sender's events.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.GetContext">
            <summary>
             Return execution context.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.GetSubsystem(AtomicEngine.StringHash)">
            <summary>
             Return subsystem by type.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.GetEventSender">
            <summary>
             Return active event sender. Null outside event handling.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.HasSubscribedToEvent(AtomicEngine.StringHash)">
            <summary>
             Return whether has subscribed to an event without specific sender.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.HasSubscribedToEvent(AtomicEngine.AObject,AtomicEngine.StringHash)">
            <summary>
             Return whether has subscribed to a specific sender's event.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.HasEventHandlers">
            <summary>
             Return whether has subscribed to any event.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.GetCategory">
            <summary>
             Return object category. Categories are (optionally) registered along with the object factory. Return an empty string if the object category is not registered.
            </summary>
        </member>
        <member name="M:AtomicEngine.AObject.UnsubscribeFromEventReceiver(AtomicEngine.AObject)">
            <summary>
             Unsubscribe from event for specific receiver (where the event handler isn't necessarily in the subscribed object)
            </summary>
        </member>
        <member name="T:AtomicEngine.ScriptVariantMap">
            <summary>
             For performance sensitive code, specialized marshaling should be used instead (for example physics event data)
            </summary>
        </member>
        <member name="T:AtomicEngine.RefCounted">
            <summary>
             Base class for intrusively reference-counted objects. These are noncopyable and non-assignable.
            </summary>
        </member>
        <member name="M:AtomicEngine.RefCounted.csb_Atomic_RefCounted_Constructor_1">
            <summary>
             Construct. Allocate the reference count structure and set an initial self weak reference.
            </summary>
        </member>
        <member name="M:AtomicEngine.RefCounted.AddRef">
            <summary>
             Increment reference count. Can also be called outside of a SharedPtr for traditional reference counting.
            </summary>
        </member>
        <member name="M:AtomicEngine.RefCounted.ReleaseRef">
            <summary>
             Decrement reference count and delete self if no more references. Can also be called outside of a SharedPtr for traditional reference counting.
            </summary>
        </member>
        <member name="M:AtomicEngine.RefCounted.Refs">
            <summary>
             Return reference count.
            </summary>
        </member>
        <member name="M:AtomicEngine.RefCounted.WeakRefs">
            <summary>
             Return weak reference count.
            </summary>
        </member>
        <member name="M:AtomicEngine.RefCounted.AddRefSilent">
            <summary>
             Increment reference count. Do not call any lifetime book keeping
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_QUIT" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_APP_TERMINATING" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_APP_LOWMEMORY" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_APP_WILLENTERBACKGROUND" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_APP_DIDENTERBACKGROUND" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_APP_WILLENTERFOREGROUND" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_APP_DIDENTERFOREGROUND" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_WINDOWEVENT" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_SYSWMEVENT" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_KEYDOWN" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_KEYUP" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_TEXTEDITING" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_TEXTINPUT" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_MOUSEMOTION" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_MOUSEBUTTONDOWN" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_MOUSEBUTTONUP" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_MOUSEWHEEL" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_JOYAXISMOTION" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_JOYBALLMOTION" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_JOYHATMOTION" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_JOYBUTTONDOWN" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_JOYBUTTONUP" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_JOYDEVICEADDED" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_JOYDEVICEREMOVED" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_CONTROLLERAXISMOTION" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_CONTROLLERBUTTONDOWN" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_CONTROLLERBUTTONUP" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_CONTROLLERDEVICEADDED" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_CONTROLLERDEVICEREMOVED" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_CONTROLLERDEVICEREMAPPED" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_FINGERDOWN" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_DROPFILE" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_RENDER_TARGETS_RESET" -->
        <!-- Badly formed XML comment ignored for member "F:AtomicEngine.SdlEventType.SDL_USEREVENT" -->
        <member name="F:AtomicEngine.SdlEventType.SDL_LASTEVENT">
            This last event is only for bounding internal arrays
        </member>
        <member name="T:AtomicEngine.AnimatedModel">
            <summary>
             Animated model component.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.Load(AtomicEngine.Deserializer,System.Boolean)">
            <summary>
             Load from binary data. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.ApplyAttributes">
            <summary>
             Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetUpdateGeometryType">
            <summary>
             Return whether a geometry update is necessary, and if it can happen in a worker thread.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.SetModel(AtomicEngine.Model,System.Boolean)">
            <summary>
             Set model.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.AddAnimationState(AtomicEngine.Animation)">
            <summary>
             Add an animation.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.RemoveAnimationState(AtomicEngine.Animation)">
            <summary>
             Remove an animation by animation pointer.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.RemoveAnimationState(System.String)">
            <summary>
             Remove an animation by animation name.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.RemoveAnimationState(AtomicEngine.AnimationState)">
            <summary>
             Remove an animation by AnimationState pointer.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.RemoveAnimationState(System.UInt32)">
            <summary>
             Remove an animation by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.RemoveAllAnimationStates">
            <summary>
             Remove all animations.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.SetAnimationLodBias(System.Single)">
            <summary>
             Set animation LOD bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.SetUpdateInvisible(System.Boolean)">
            <summary>
             Set whether to update animation and the bounding box when not visible. Recommended to enable for physically controlled models like ragdolls.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.SetMorphWeight(System.UInt32,System.Single)">
            <summary>
             Set vertex morph weight by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.SetMorphWeight(System.String,System.Single)">
            <summary>
             Set vertex morph weight by name.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.SetBoneCreationOverride(System.Boolean)">
            <summary>
             Set bone creation override. Useful for previewing animations in the editor scene view.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.ResetMorphWeights">
            <summary>
             Reset all vertex morphs to zero.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetSkeletonBoneNode(System.String)">
            <summary>
             Return the node of a skeleton bone (for script access)
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetAnimationStates">
            <summary>
             Return all animation states.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetNumAnimationStates">
            <summary>
             Return number of animation states.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetAnimationState(AtomicEngine.Animation)">
            <summary>
             Return animation state by animation pointer.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetAnimationState(System.String)">
            <summary>
             Return animation state by animation name.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetAnimationState(System.UInt32)">
            <summary>
             Return animation state by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetAnimationLodBias">
            <summary>
             Return animation LOD bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetUpdateInvisible">
            <summary>
             Return whether to update animation when not visible.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetMorphVertexBuffers">
            <summary>
             Return all morph vertex buffers.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetNumMorphs">
            <summary>
             Return number of vertex morphs.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetMorphWeight(System.UInt32)">
            <summary>
             Return vertex morph weight by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetMorphWeight(System.String)">
            <summary>
             Return vertex morph weight by name.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.IsMaster">
            <summary>
             Return whether is the master (first) animated model.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.SetBonesEnabledAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Set bones' animation enabled attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.SetAnimationStatesAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Set animation states attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetBonesEnabledAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Return bones' animation enabled attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.GetAnimationStatesAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Return animation states attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedModel.UpdateBoneBoundingBox">
            <summary>
             Recalculate the bone bounding box. Normally called internally, but can also be manually called if up-to-date information before rendering is necessary.
            </summary>
        </member>
        <member name="T:AtomicEngine.Camera">
            <summary>
             %Camera component.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetScreenRay(System.Single,System.Single)">
            Return ray corresponding to normalized screen coordinates (0 - 1), with origin on the near clip plane.
        </member>
        <member name="M:AtomicEngine.Camera.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetNearClip(System.Single)">
            <summary>
             Set near clip distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetFarClip(System.Single)">
            <summary>
             Set far clip distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetFov(System.Single)">
            <summary>
             Set vertical field of view in degrees.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetOrthoSize(System.Single)">
            <summary>
             Set orthographic mode view uniform size.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetOrthoSize(AtomicEngine.Vector2)">
            <summary>
             Set orthographic mode view non-uniform size. Disables the auto aspect ratio -mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetAspectRatio(System.Single)">
            <summary>
             Set aspect ratio manually. Disables the auto aspect ratio -mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetFillMode(AtomicEngine.FillMode)">
            <summary>
             Set polygon fill mode to use when rendering a scene.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetZoom(System.Single)">
            <summary>
             Set zoom.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetLodBias(System.Single)">
            <summary>
             Set LOD bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetViewMask(System.UInt32)">
            <summary>
             Set view mask. Will be and'ed with object's view mask to see if the object should be rendered.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetViewOverrideFlags(System.UInt32)">
            <summary>
             Set view override flags.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetOrthographic(System.Boolean)">
            <summary>
             Set orthographic mode enabled/disabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetAutoAspectRatio(System.Boolean)">
            <summary>
             Set automatic aspect ratio based on viewport dimensions. Enabled by default.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetProjectionOffset(AtomicEngine.Vector2)">
            <summary>
             Set projection offset. It needs to be calculated as (offset in pixels) / (viewport dimensions.)
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetUseReflection(System.Boolean)">
            <summary>
             Set reflection mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetUseClipping(System.Boolean)">
            <summary>
             Set whether to use a custom clip plane.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetFlipVertical(System.Boolean)">
            <summary>
             Set vertical flipping mode. Called internally by View to resolve OpenGL / Direct3D9 rendertarget sampling differences.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetFarClip">
            <summary>
             Return far clip distance. If a custom projection matrix is in use, is calculated from it instead of the value assigned with SetFarClip().
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetNearClip">
            <summary>
             Return near clip distance. If a custom projection matrix is in use, is calculated from it instead of the value assigned with SetNearClip().
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetFov">
            <summary>
             Return vertical field of view in degrees.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetOrthoSize">
            <summary>
             Return orthographic mode size.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetAspectRatio">
            <summary>
             Return aspect ratio.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetZoom">
            <summary>
             Return zoom.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetLodBias">
            <summary>
             Return LOD bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetViewMask">
            <summary>
             Return view mask.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetViewOverrideFlags">
            <summary>
             Return view override flags.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetFillMode">
            <summary>
             Return fill mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.IsOrthographic">
            <summary>
             Return orthographic flag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetAutoAspectRatio">
            <summary>
             Return auto aspect ratio flag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetFrustum">
            <summary>
             Return frustum in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetFrustumSize(AtomicEngine.Vector3@,AtomicEngine.Vector3@)">
            <summary>
             Return frustum near and far sizes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetHalfViewSize">
            <summary>
             Return half view size.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetSplitFrustum(System.Single,System.Single)">
            <summary>
             Return frustum split by custom near and far clip distances.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetViewSpaceFrustum">
            <summary>
             Return frustum in view space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetViewSpaceSplitFrustum(System.Single,System.Single)">
            <summary>
             Return split frustum in view space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.WorldToScreenPoint(AtomicEngine.Vector3)">
            <summary>
             Convert a world space point to normalized screen coordinates (0 - 1).
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.Camera.ScreenToWorldPoint(AtomicEngine.Vector3)" -->
        <member name="M:AtomicEngine.Camera.GetProjectionOffset">
            <summary>
             Return projection offset.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetUseReflection">
            <summary>
             Return whether is using reflection.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetUseClipping">
            <summary>
             Return whether is using a custom clipping plane.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetFlipVertical">
            <summary>
             Return vertical flipping mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetReverseCulling">
            <summary>
             Return whether to reverse culling; affected by vertical flipping and reflection.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetDistance(AtomicEngine.Vector3)">
            <summary>
             Return distance to position. In orthographic mode uses only Z coordinate.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetDistanceSquared(AtomicEngine.Vector3)">
            <summary>
             Return squared distance to position. In orthographic mode uses only Z coordinate.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetLodDistance(System.Single,System.Single,System.Single)">
            <summary>
             Return a scene node's LOD scaled distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetFaceCameraRotation(AtomicEngine.Vector3,AtomicEngine.Quaternion,AtomicEngine.FaceCameraMode,System.Single)">
            <summary>
             Return a world rotation for facing a camera on certain axes based on the existing world rotation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.IsProjectionValid">
            <summary>
             Return if projection parameters are valid for rendering and raycasting.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetAspectRatioInternal(System.Single)">
            <summary>
             Set aspect ratio without disabling the "auto aspect ratio" mode. Called internally by View.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetOrthoSizeAttr(System.Single)">
            <summary>
             Set orthographic size attribute without forcing the aspect ratio.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetReflectionPlaneAttr(AtomicEngine.Vector4)">
            <summary>
             Set reflection plane attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetReflectionPlaneAttr">
            <summary>
             Return reflection plane attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.SetClipPlaneAttr(AtomicEngine.Vector4)">
            <summary>
             Set clipping plane attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.Camera.GetClipPlaneAttr">
            <summary>
             Return clipping plane attribute.
            </summary>
        </member>
        <member name="T:AtomicEngine.CustomGeometryVertex">
            Custom geometry vertex.
        </member>
        <member name="F:AtomicEngine.CustomGeometryVertex.position_">
            Position.
        </member>
        <member name="F:AtomicEngine.CustomGeometryVertex.normal_">
            Normal.
        </member>
        <member name="F:AtomicEngine.CustomGeometryVertex.color_">
            Color.
        </member>
        <member name="F:AtomicEngine.CustomGeometryVertex.texCoord_">
            Texture coordinates.
        </member>
        <member name="F:AtomicEngine.CustomGeometryVertex.tangent_">
            Tangent.
        </member>
        <member name="T:AtomicEngine.Graphics">
            <summary>
             %Graphics subsystem. Manages the application window, rendering state and GPU resources.
            </summary>
        </member>
        <member name="P:AtomicEngine.Graphics.SDLWindow">
            <summary>
            Pointer to SDL window
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetWindowTitle(System.String)">
            <summary>
             Set window title.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetWindowIcon(AtomicEngine.Image)">
            <summary>
             Set window icon.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetWindowPosition(AtomicEngine.IntVector2)">
            <summary>
             Set window position. Sets initial position if window is not created yet.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetWindowPosition(System.Int32,System.Int32)">
            <summary>
             Set window position. Sets initial position if window is not created yet.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetMode(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
             Set screen mode. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetMode(System.Int32,System.Int32)">
            <summary>
             Set screen resolution only. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetSRGB(System.Boolean)">
            <summary>
             Set whether the main window uses sRGB conversion on write.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetDither(System.Boolean)">
            <summary>
             Set whether rendering output is dithered. Default true on OpenGL. No effect on Direct3D.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetFlushGPU(System.Boolean)">
            <summary>
             Set whether to flush the GPU command buffer to prevent multiple frames being queued and uneven frame timesteps. Default off, may decrease performance if enabled. Not currently implemented on OpenGL.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.Graphics.SetForceGL2(System.Boolean)" -->
        <member name="M:AtomicEngine.Graphics.SetOrientations(System.String)">
            <summary>
             Set allowed screen orientations as a space-separated list of "LandscapeLeft", "LandscapeRight", "Portrait" and "PortraitUpsideDown". Affects currently only iOS platform.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.ToggleFullscreen">
            <summary>
             Toggle between full screen and windowed mode. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.Close">
            <summary>
             Close the window.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.TakeScreenShot(AtomicEngine.Image)">
            <summary>
             Take a screenshot. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.BeginFrame">
            <summary>
             Begin frame rendering. Return true if device available and can render.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.EndFrame">
            <summary>
             End frame rendering and swap buffers.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.Clear(System.UInt32,AtomicEngine.Color,System.Single,System.UInt32)">
            <summary>
             Clear any or all of rendertarget, depth buffer and stencil buffer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.ResolveToTexture(AtomicEngine.Texture2D,AtomicEngine.IntRect)">
            <summary>
             Resolve multisampled backbuffer to a texture rendertarget. The texture's size should match the viewport size.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.Draw(AtomicEngine.PrimitiveType,System.UInt32,System.UInt32)">
            <summary>
             Draw non-indexed geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.Draw(AtomicEngine.PrimitiveType,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
             Draw indexed geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.Draw(AtomicEngine.PrimitiveType,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
             Draw indexed geometry with vertex index offset.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.DrawInstanced(AtomicEngine.PrimitiveType,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
             Draw indexed, instanced geometry. An instancing vertex buffer must be set.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.DrawInstanced(AtomicEngine.PrimitiveType,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
             Draw indexed, instanced geometry with vertex index offset.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetVertexBuffer(AtomicEngine.VertexBuffer)">
            <summary>
             Set vertex buffer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetVertexBuffers(AtomicEngine.Vector{AtomicEngine.VertexBuffer},System.UInt32)">
            <summary>
             Set multiple vertex buffers.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetShaders(AtomicEngine.ShaderVariation,AtomicEngine.ShaderVariation)">
            <summary>
             Set shaders.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetShaderParameter(AtomicEngine.StringHash,System.Single)">
            <summary>
             Set shader float constant.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetShaderParameter(AtomicEngine.StringHash,System.Boolean)">
            <summary>
             Set shader boolean constant.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetShaderParameter(AtomicEngine.StringHash,AtomicEngine.Color)">
            <summary>
             Set shader color constant.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetShaderParameter(AtomicEngine.StringHash,AtomicEngine.Vector2)">
            <summary>
             Set shader 2D vector constant.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetShaderParameter(AtomicEngine.StringHash,AtomicEngine.Vector3)">
            <summary>
             Set shader 3D vector constant.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetShaderParameter(AtomicEngine.StringHash,AtomicEngine.Vector4)">
            <summary>
             Set shader 4D vector constant.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.HasShaderParameter(AtomicEngine.StringHash)">
            <summary>
             Check whether a shader parameter exists on the currently set shaders.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.HasTextureUnit(AtomicEngine.TextureUnit)">
            <summary>
             Check whether the current vertex or pixel shader uses a texture unit.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.ClearParameterSource(AtomicEngine.ShaderParameterGroup)">
            <summary>
             Clear remembered shader parameter source group.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.ClearParameterSources">
            <summary>
             Clear remembered shader parameter sources.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.ClearTransformSources">
            <summary>
             Clear remembered transform shader parameter sources.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetTexture(System.UInt32,AtomicEngine.Texture)">
            <summary>
             Set texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetTextureForUpdate(AtomicEngine.Texture)">
            <summary>
             Bind texture unit 0 for update. Called by Texture. Used only on OpenGL.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetTextureParametersDirty">
            <summary>
             Dirty texture parameters of all textures (when global settings change.)
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetDefaultTextureFilterMode(AtomicEngine.TextureFilterMode)">
            <summary>
             Set default texture filtering mode. Called by Renderer before rendering.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetDefaultTextureAnisotropy(System.UInt32)">
            <summary>
             Set default texture anisotropy level. Called by Renderer before rendering.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.ResetRenderTargets">
            <summary>
             Reset all rendertargets, depth-stencil surface and viewport.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.ResetRenderTarget(System.UInt32)">
            <summary>
             Reset specific rendertarget.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.ResetDepthStencil">
            <summary>
             Reset depth-stencil surface.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetRenderTarget(System.UInt32,AtomicEngine.RenderSurface)">
            <summary>
             Set rendertarget.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetRenderTarget(System.UInt32,AtomicEngine.Texture2D)">
            <summary>
             Set rendertarget.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetDepthStencil(AtomicEngine.RenderSurface)">
            <summary>
             Set depth-stencil surface.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetDepthStencil(AtomicEngine.Texture2D)">
            <summary>
             Set depth-stencil surface.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetViewport(AtomicEngine.IntRect)">
            <summary>
             Set viewport.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetBlendMode(AtomicEngine.BlendMode,System.Boolean)">
            <summary>
             Set blending and alpha-to-coverage modes. Alpha-to-coverage is not supported on Direct3D9.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetColorWrite(System.Boolean)">
            <summary>
             Set color write on/off.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetCullMode(AtomicEngine.CullMode)">
            <summary>
             Set hardware culling mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetDepthBias(System.Single,System.Single)">
            <summary>
             Set depth bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetDepthTest(AtomicEngine.CompareMode)">
            <summary>
             Set depth compare.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetDepthWrite(System.Boolean)">
            <summary>
             Set depth write on/off.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetFillMode(AtomicEngine.FillMode)">
            <summary>
             Set polygon fill mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetScissorTest(System.Boolean,AtomicEngine.Rect,System.Boolean)">
            <summary>
             Set scissor test.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetScissorTest(System.Boolean,AtomicEngine.IntRect)">
            <summary>
             Set scissor test.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetStencilTest(System.Boolean,AtomicEngine.CompareMode,AtomicEngine.StencilOp,AtomicEngine.StencilOp,AtomicEngine.StencilOp,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
             Set stencil test.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetClipPlane(System.Boolean)">
            <summary>
             Set a custom clipping plane. The plane is specified in world space, but is dependent on the view and projection matrices.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.BeginDumpShaders(System.String)">
            <summary>
             Begin dumping shader variation names to an XML file for precaching.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.EndDumpShaders">
            <summary>
             End dumping shader variations names.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.PrecacheShaders(AtomicEngine.Deserializer)">
            <summary>
             Precache shader variations from an XML file generated with BeginDumpShaders().
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.IsInitialized">
            <summary>
             Return whether rendering initialized.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetWindowTitle">
            <summary>
             Return window title.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetApiName">
            <summary>
             Return graphics API name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetWindowPosition">
            <summary>
             Return window position.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetWidth">
            <summary>
             Return window width in pixels.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetHeight">
            <summary>
             Return window height in pixels.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetMultiSample">
            <summary>
             Return multisample mode (1 = no multisampling.)
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetFullscreen">
            <summary>
             Return whether window is fullscreen.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetBorderless">
            <summary>
             Return whether window is borderless.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetResizable">
            <summary>
             Return whether window is resizable.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetHighDPI">
            <summary>
             Return whether window is high DPI.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetVSync">
            <summary>
             Return whether vertical sync is on.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetTripleBuffer">
            <summary>
             Return whether triple buffering is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetSRGB">
            <summary>
             Return whether the main window is using sRGB conversion on write.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetDither">
            <summary>
             Return whether rendering output is dithered.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetFlushGPU">
            <summary>
             Return whether the GPU command buffer is flushed each frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetForceGL2">
            <summary>
             Return whether OpenGL 2 use is forced. Effective only on OpenGL.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetOrientations">
            <summary>
             Return allowed screen orientations.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.IsDeviceLost">
            <summary>
             Return whether graphics context is lost and can not render or load GPU resources.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetNumPrimitives">
            <summary>
             Return number of primitives drawn this frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetNumBatches">
            <summary>
             Return number of batches drawn this frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetDummyColorFormat">
            <summary>
             Return dummy color texture format for shadow maps. Is "NULL" (consume no video memory) if supported.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetShadowMapFormat">
            <summary>
             Return shadow map depth texture format, or 0 if not supported.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetHiresShadowMapFormat">
            <summary>
             Return 24-bit shadow map depth texture format, or 0 if not supported.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetInstancingSupport">
            <summary>
             Return whether hardware instancing is supported.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetLightPrepassSupport">
            <summary>
             Return whether light pre-pass rendering is supported.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetDeferredSupport">
            <summary>
             Return whether deferred rendering is supported.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetAnisotropySupport">
            <summary>
             Return whether anisotropic texture filtering is supported.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetHardwareShadowSupport">
            <summary>
             Return whether shadow map depth compare is done in hardware.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetReadableDepthSupport">
            <summary>
             Return whether a readable hardware depth format is available.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetSRGBSupport">
            <summary>
             Return whether sRGB conversion on texture sampling is supported.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetSRGBWriteSupport">
            <summary>
             Return whether sRGB conversion on rendertarget writing is supported.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetDesktopResolution">
            <summary>
             Return the desktop resolution.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetFormat(AtomicEngine.CompressedFormat)">
            <summary>
             Return hardware format for a compressed image format, or 0 if unsupported.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetShader(AtomicEngine.ShaderType,System.String,System.String)">
            <summary>
             Return a shader variation by name and defines.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetVertexBuffer(System.UInt32)">
            <summary>
             Return current vertex buffer by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetVertexShader">
            <summary>
             Return current vertex shader.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetPixelShader">
            <summary>
             Return current pixel shader.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetTextureUnit(System.String)">
            <summary>
             Return texture unit index by name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetTextureUnitName(AtomicEngine.TextureUnit)">
            <summary>
             Return texture unit name by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetTexture(System.UInt32)">
            <summary>
             Return current texture by texture unit index.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetDefaultTextureFilterMode">
            <summary>
             Return default texture filtering mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetDefaultTextureAnisotropy">
            <summary>
             Return default texture max. anisotropy level.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetRenderTarget(System.UInt32)">
            <summary>
             Return current rendertarget by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetDepthStencil">
            <summary>
             Return current depth-stencil surface.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetViewport">
            <summary>
             Return the viewport coordinates.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetBlendMode">
            <summary>
             Return blending mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetAlphaToCoverage">
            <summary>
             Return whether alpha-to-coverage is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetColorWrite">
            <summary>
             Return whether color write is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetCullMode">
            <summary>
             Return hardware culling mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetDepthConstantBias">
            <summary>
             Return depth constant bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetDepthSlopeScaledBias">
            <summary>
             Return depth slope scaled bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetDepthTest">
            <summary>
             Return depth compare mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetDepthWrite">
            <summary>
             Return whether depth write is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetFillMode">
            <summary>
             Return polygon fill mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetStencilTest">
            <summary>
             Return whether stencil test is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetScissorTest">
            <summary>
             Return whether scissor test is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetScissorRect">
            <summary>
             Return scissor rectangle coordinates.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetStencilTestMode">
            <summary>
             Return stencil compare mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetStencilPass">
            <summary>
             Return stencil operation to do if stencil test passes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetStencilFail">
            <summary>
             Return stencil operation to do if stencil test fails.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetStencilZFail">
            <summary>
             Return stencil operation to do if depth compare fails.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetStencilRef">
            <summary>
             Return stencil reference value.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetStencilCompareMask">
            <summary>
             Return stencil compare bitmask.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetStencilWriteMask">
            <summary>
             Return stencil write bitmask.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetUseClipPlane">
            <summary>
             Return whether a custom clipping plane is in use.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetRenderTargetDimensions">
            <summary>
             Return current rendertarget width and height.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.OnWindowResized">
            <summary>
             Window was resized through user interaction. Called by Input subsystem.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.OnWindowMoved">
            <summary>
             Window was moved through user interaction. Called by Input subsystem.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.Restore">
            <summary>
             Restore GPU objects and reinitialize state. Requires an open window. Used only on OpenGL.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.Maximize">
            <summary>
             Maximize the window.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.Minimize">
            <summary>
             Minimize the window.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.CleanupScratchBuffers">
            <summary>
             Clean up too large scratch buffers.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.CleanupShaderPrograms(AtomicEngine.ShaderVariation)">
            <summary>
             Clean up shader parameters when a shader variation is released or destroyed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.CleanupRenderSurface(AtomicEngine.RenderSurface)">
            <summary>
             Clean up a render surface from all FBOs. Used only on OpenGL.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.MarkFBODirty">
            <summary>
             Mark the FBO needing an update. Used only on OpenGL.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetVBO(System.UInt32)">
            <summary>
             Bind a VBO, avoiding redundant operation. Used only on OpenGL.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetUBO(System.UInt32)">
            <summary>
             Bind a UBO, avoiding redundant operation. Used only on OpenGL.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetAlphaFormat">
            <summary>
             Return the API-specific alpha texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetLuminanceFormat">
            <summary>
             Return the API-specific luminance texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetLuminanceAlphaFormat">
            <summary>
             Return the API-specific luminance alpha texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetRGBFormat">
            <summary>
             Return the API-specific RGB texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetRGBAFormat">
            <summary>
             Return the API-specific RGBA texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetRGBA16Format">
            <summary>
             Return the API-specific RGBA 16-bit texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetRGBAFloat16Format">
            <summary>
             Return the API-specific RGBA 16-bit float texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetRGBAFloat32Format">
            <summary>
             Return the API-specific RGBA 32-bit float texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetRG16Format">
            <summary>
             Return the API-specific RG 16-bit texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetRGFloat16Format">
            <summary>
             Return the API-specific RG 16-bit float texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetRGFloat32Format">
            <summary>
             Return the API-specific RG 32-bit float texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetFloat16Format">
            <summary>
             Return the API-specific single channel 16-bit float texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetFloat32Format">
            <summary>
             Return the API-specific single channel 32-bit float texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetLinearDepthFormat">
            <summary>
             Return the API-specific linear depth texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetDepthStencilFormat">
            <summary>
             Return the API-specific hardware depth-stencil texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetReadableDepthFormat">
            <summary>
             Return the API-specific readable hardware depth format, or 0 if not supported.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetFormat(System.String)">
            <summary>
             Return the API-specific texture format from a textual description, for example "rgb".
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetPixelUVOffset">
            <summary>
             Return UV offset required for pixel perfect rendering.
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetMaxBones">
            <summary>
             Return maximum number of supported bones for skinning.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.Graphics.GetGL3Support" -->
        <member name="M:AtomicEngine.Graphics.GetNumPasses">
            <summary>
             Return number of passes drawn this frame
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetNumPasses(System.UInt32)">
            <summary>
             Set number of passes drawn this frame
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.GetSinglePassPrimitives">
            <summary>
             Return number of single render pass primitives drawn this frame (D3D9 Only)
            </summary>
        </member>
        <member name="M:AtomicEngine.Graphics.SetSinglePassPrimitives(System.UInt32)">
            <summary>
             Set number of single render pass primitives drawn this frame (D3D9 Only)
            </summary>
        </member>
        <member name="T:AtomicEngine.Light">
            <summary>
             %Light component.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetShadowBias(AtomicEngine.BiasParameters)">
            Set shadow depth bias parameters.
        </member>
        <member name="M:AtomicEngine.Light.SetShadowCascade(AtomicEngine.CascadeParameters)">
            Set directional light cascaded shadow parameters.
        </member>
        <member name="M:AtomicEngine.Light.SetShadowFocus(AtomicEngine.FocusParameters)">
            Set shadow map focusing parameters.
        </member>
        <member name="M:AtomicEngine.Light.GetShadowBias">
            Set shadow depth bias parameters.
        </member>
        <member name="M:AtomicEngine.Light.GetShadowCascade">
            Set directional light cascaded shadow parameters.
        </member>
        <member name="M:AtomicEngine.Light.GetShadowFocus">
            Set shadow map focusing parameters.
        </member>
        <member name="M:AtomicEngine.Light.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetLightType(AtomicEngine.LightType)">
            <summary>
             Set light type.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetPerVertex(System.Boolean)">
            <summary>
             Set vertex lighting mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetColor(AtomicEngine.Color)">
            <summary>
             Set color.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetTemperature(System.Single)">
            <summary>
             Set temperature of the light in Kelvin. Modulates the light color when "use physical values" is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetUsePhysicalValues(System.Boolean)">
            <summary>
             Set use physical light values.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetSpecularIntensity(System.Single)">
            <summary>
             Set specular intensity. Zero disables specular calculations.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetBrightness(System.Single)">
            <summary>
             Set light brightness multiplier. Both the color and specular intensity are multiplied with this. When "use physical values" is enabled, the value is specified in lumens.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetRange(System.Single)">
            <summary>
             Set range.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetFov(System.Single)">
            <summary>
             Set spotlight field of view.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetAspectRatio(System.Single)">
            <summary>
             Set spotlight aspect ratio.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetFadeDistance(System.Single)">
            <summary>
             Set fade out start distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetShadowFadeDistance(System.Single)">
            <summary>
             Set shadow fade out start distance. Only has effect if shadow distance is also non-zero.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetShadowIntensity(System.Single)">
            <summary>
             Set light intensity in shadow between 0.0 - 1.0. 0.0 (the default) gives fully dark shadows.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetShadowResolution(System.Single)">
            <summary>
             Set shadow resolution between 0.25 - 1.0. Determines the shadow map to use.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetShadowNearFarRatio(System.Single)">
            <summary>
             Set shadow camera near/far clip distance ratio for spot and point lights. Does not affect directional lights, since they are orthographic and have near clip 0.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetShadowMaxExtrusion(System.Single)">
            <summary>
             Set maximum shadow extrusion for directional lights. The actual extrusion will be the smaller of this and camera far clip. Default 1000.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetRampTexture(AtomicEngine.Texture)">
            <summary>
             Set range attenuation texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetShapeTexture(AtomicEngine.Texture)">
            <summary>
             Set spotlight attenuation texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetLightType">
            <summary>
             Return light type.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetPerVertex">
            <summary>
             Return vertex lighting mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetColor">
            <summary>
             Return color.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetTemperature">
            <summary>
             Return the temperature of the light in Kelvin.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetUsePhysicalValues">
            <summary>
             Return if light uses temperature and brightness in lumens.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetColorFromTemperature">
            <summary>
             Return the color value of the temperature in Kelvin.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetSpecularIntensity">
            <summary>
             Return specular intensity.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetBrightness">
            <summary>
             Return brightness multiplier. Specified in lumens when "use physical values" is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetEffectiveColor">
            <summary>
             Return effective color, multiplied by brightness and affected by temperature when "use physical values" is enabled. Alpha is always 1 so that can compare against the default black color to detect a light with no effect.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetEffectiveSpecularIntensity">
            <summary>
             Return effective specular intensity, multiplied by absolute value of brightness.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetRange">
            <summary>
             Return range.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetFov">
            <summary>
             Return spotlight field of view.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetAspectRatio">
            <summary>
             Return spotlight aspect ratio.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetFadeDistance">
            <summary>
             Return fade start distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetShadowFadeDistance">
            <summary>
             Return shadow fade start distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetShadowIntensity">
            <summary>
             Return light intensity in shadow.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetShadowResolution">
            <summary>
             Return shadow resolution.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetShadowNearFarRatio">
            <summary>
             Return shadow camera near/far clip distance ratio.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetShadowMaxExtrusion">
            <summary>
             Return maximum shadow extrusion distance for directional lights.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetRampTexture">
            <summary>
             Return range attenuation texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetShapeTexture">
            <summary>
             Return spotlight attenuation texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetFrustum">
            <summary>
             Return spotlight frustum.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetNumShadowSplits">
            <summary>
             Return number of shadow map cascade splits for a directional light, considering also graphics API limitations.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.IsNegative">
            <summary>
             Return whether light has negative (darkening) color.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetIntensitySortValue(System.Single)">
            <summary>
             Set sort value based on intensity and view distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.SetIntensitySortValue(AtomicEngine.BoundingBox)">
            <summary>
             Set sort value based on overall intensity over a bounding box.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light.GetIntensityDivisor(System.Single)">
            <summary>
             Return a divisor value based on intensity for calculating the sort value.
            </summary>
        </member>
        <member name="T:AtomicEngine.Material">
            <summary>
             Describes how to render 3D geometries.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.EndLoad">
            <summary>
             Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.Save(AtomicEngine.Serializer)">
            <summary>
             Save resource. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetNumTechniques(System.UInt32)">
            <summary>
             Set number of techniques.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetTechnique(System.UInt32,AtomicEngine.Technique,System.UInt32,System.Single)">
            <summary>
             Set technique.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetVertexShaderDefines(System.String)">
            <summary>
             Set additional vertex shader defines. Separate multiple defines with spaces. Setting defines at the material level causes technique(s) to be cloned as necessary.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetPixelShaderDefines(System.String)">
            <summary>
             Set additional pixel shader defines. Separate multiple defines with spaces. Setting defines at the material level causes technique(s) to be cloned as necessary.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetShaderParameterAnimationWrapMode(System.String,AtomicEngine.WrapMode)">
            <summary>
             Set shader parameter animation wrap mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetShaderParameterAnimationSpeed(System.String,System.Single)">
            <summary>
             Set shader parameter animation speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetTexture(AtomicEngine.TextureUnit,AtomicEngine.Texture)">
            <summary>
             Set texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetUVTransform(AtomicEngine.Vector2,System.Single,AtomicEngine.Vector2)">
            <summary>
             Set texture coordinate transform.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetUVTransform(AtomicEngine.Vector2,System.Single,System.Single)">
            <summary>
             Set texture coordinate transform.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetCullMode(AtomicEngine.CullMode)">
            <summary>
             Set culling mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetShadowCullMode(AtomicEngine.CullMode)">
            <summary>
             Set culling mode for shadows.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetFillMode(AtomicEngine.FillMode)">
            <summary>
             Set polygon fill mode. Interacts with the camera's fill mode setting so that the "least filled" mode will be used.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetAlphaToCoverage(System.Boolean)">
            <summary>
             Set alpha-to-coverage mode on all passes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetRenderOrder(System.Byte)">
            <summary>
             Set 8-bit render order within pass. Default 128. Lower values will render earlier and higher values later, taking precedence over e.g. state and distance sorting.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetOcclusion(System.Boolean)">
            <summary>
             Set whether to use in occlusion rendering. Default true.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SetScene(AtomicEngine.Scene)">
            <summary>
             Associate the material with a scene to ensure that shader parameter animation happens in sync with scene update, respecting the scene time scale. If no scene is set, the global update events will be used.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.RemoveShaderParameter(System.String)">
            <summary>
             Remove shader parameter.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.ReleaseShaders">
            <summary>
             Reset all shader pointers.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.Clone(System.String)">
            <summary>
             Clone the material.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.SortTechniques">
            <summary>
             Ensure that material techniques are listed in correct order.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.MarkForAuxView(System.UInt32)">
            <summary>
             Mark material for auxiliary view rendering.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetNumTechniques">
            <summary>
             Return number of techniques.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetTechnique(System.UInt32)">
            <summary>
             Return technique by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetPass(System.UInt32,System.String)">
            <summary>
             Return pass by technique index and pass name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetTexture(AtomicEngine.TextureUnit)">
            <summary>
             Return texture by unit.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetVertexShaderDefines">
            <summary>
             Return additional vertex shader defines.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetPixelShaderDefines">
            <summary>
             Return additional pixel shader defines.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetShaderParameterAnimation(System.String)">
            <summary>
             Return shader parameter animation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetShaderParameterAnimationWrapMode(System.String)">
            <summary>
             Return shader parameter animation wrap mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetShaderParameterAnimationSpeed(System.String)">
            <summary>
             Return shader parameter animation speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetCullMode">
            <summary>
             Return normal culling mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetShadowCullMode">
            <summary>
             Return culling mode for shadows.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetFillMode">
            <summary>
             Return polygon fill mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetAlphaToCoverage">
            <summary>
             Return alpha-to-coverage mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetRenderOrder">
            <summary>
             Return render order.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetAuxViewFrameNumber">
            <summary>
             Return last auxiliary view rendered frame number.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetOcclusion">
            <summary>
             Return whether should render occlusion.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetSpecular">
            <summary>
             Return whether should render specular.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetScene">
            <summary>
             Return the scene associated with the material for shader parameter animation updates.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetShaderParameterHash">
            <summary>
             Return shader parameter hash value. Used as an optimization to avoid setting shader parameters unnecessarily.
            </summary>
        </member>
        <member name="M:AtomicEngine.Material.GetTextureUnitName(AtomicEngine.TextureUnit)">
            <summary>
             Return name for texture unit.
            </summary>
        </member>
        <member name="M:AtomicEngine.RayOctreeQuery.#ctor(AtomicEngine.Ray,AtomicEngine.RayQueryLevel,System.Single,System.UInt32,System.UInt32)">
            Construct with ray and query parameters.
        </member>
        <member name="F:AtomicEngine.RayOctreeQuery.Ray">
            Ray.
        </member>
        <member name="F:AtomicEngine.RayOctreeQuery.DrawableFlags">
            Drawable flags to include.
        </member>
        <member name="F:AtomicEngine.RayOctreeQuery.ViewMask">
            Drawable layers to include.
        </member>
        <member name="F:AtomicEngine.RayOctreeQuery.MaxDistance">
            Maximum ray distance.
        </member>
        <member name="F:AtomicEngine.RayOctreeQuery.Level">
            Raycast detail level.
        </member>
        <member name="T:AtomicEngine.Octree">
            <summary>
             %Octree component. Should be added only to the root scene node
            </summary>
        </member>
        <member name="M:AtomicEngine.Octree.RaycastSingle(AtomicEngine.RayOctreeQuery)">
            Return the closest drawable object by a ray query.
        </member>
        <member name="M:AtomicEngine.Octree.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Octree.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.Octree.SetSize(AtomicEngine.BoundingBox,System.UInt32)">
            <summary>
             Set size and maximum subdivision levels. If octree is not empty, drawable objects will be temporarily moved to the root.
            </summary>
        </member>
        <member name="M:AtomicEngine.Octree.AddManualDrawable(AtomicEngine.Drawable)">
            <summary>
             Add a drawable manually.
            </summary>
        </member>
        <member name="M:AtomicEngine.Octree.RemoveManualDrawable(AtomicEngine.Drawable)">
            <summary>
             Remove a manually added drawable.
            </summary>
        </member>
        <member name="M:AtomicEngine.Octree.GetNumLevels">
            <summary>
             Return subdivision levels.
            </summary>
        </member>
        <member name="M:AtomicEngine.Octree.QueueUpdate(AtomicEngine.Drawable)">
            <summary>
             Mark drawable object as requiring an update and a reinsertion.
            </summary>
        </member>
        <member name="M:AtomicEngine.Octree.CancelUpdate(AtomicEngine.Drawable)">
            <summary>
             Cancel drawable object's update.
            </summary>
        </member>
        <member name="M:AtomicEngine.Octree.DrawDebugGeometry(System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="T:AtomicEngine.RenderPath">
            <summary>
             Rendering path definition. A sequence of commands (e.g. clear screen, draw objects with specific pass) that yields the scene rendering result.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderPath.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderPath.Clone">
            <summary>
             Clone the rendering path.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderPath.Load(AtomicEngine.XMLFile)">
            <summary>
             Clear existing data and load from an XML file. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderPath.Append(AtomicEngine.XMLFile)">
            <summary>
             Append data from an XML file. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderPath.SetEnabled(System.String,System.Boolean)">
            <summary>
             Enable/disable commands and rendertargets by tag.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderPath.ToggleEnabled(System.String)">
            <summary>
             Toggle enabled state of commands and rendertargets by tag.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderPath.RemoveRenderTarget(System.UInt32)">
            <summary>
             Remove a rendertarget by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderPath.RemoveRenderTarget(System.String)">
            <summary>
             Remove a rendertarget by name.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderPath.RemoveRenderTargets(System.String)">
            <summary>
             Remove rendertargets by tag name.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderPath.RemoveCommand(System.UInt32)">
            <summary>
             Remove a command by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderPath.RemoveCommands(System.String)">
            <summary>
             Remove commands by tag name.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderPath.GetNumRenderTargets">
            <summary>
             Return number of rendertargets.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderPath.GetNumCommands">
            <summary>
             Return number of commands.
            </summary>
        </member>
        <member name="M:AtomicEngine.Skeleton.Define(AtomicEngine.Skeleton)">
            Define from another skeleton.
        </member>
        <member name="M:AtomicEngine.Skeleton.SetRootBoneIndex(System.UInt32)">
            Set root bone's index.
        </member>
        <member name="M:AtomicEngine.Skeleton.ClearBones">
            Clear bones.
        </member>
        <member name="M:AtomicEngine.Skeleton.Reset">
            Reset all animating bones to initial positions.
        </member>
        <member name="M:AtomicEngine.Skeleton.GetNumBones">
            Return number of bones.
        </member>
        <member name="M:AtomicEngine.Skeleton.GetRootBone">
            Return root bone.
        </member>
        <member name="M:AtomicEngine.Skeleton.GetBone(System.UInt32)">
            Return bone by index.
        </member>
        <member name="M:AtomicEngine.Skeleton.GetBone(System.String)">
            Return bone by name.
        </member>
        <member name="M:AtomicEngine.Skeleton.ResetSilent">
            Reset all animating bones to initial positions without marking the nodes dirty. Requires the node dirtying to be performed later.
        </member>
        <member name="T:AtomicEngine.VertexBuffer">
            <summary>
             Hardware vertex buffer.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.#ctor(System.IntPtr)">
            <summary>
             Construct. Optionally force headless (no GPU-side buffer) operation.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.OnDeviceLost">
            <summary>
             Mark the buffer destroyed on graphics context destruction. May be a no-op depending on the API.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.OnDeviceReset">
            <summary>
             Recreate the buffer and restore data if applicable. May be a no-op depending on the API.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.Release">
            <summary>
             Release buffer.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.SetShadowed(System.Boolean)">
            <summary>
             Enable shadowing in CPU memory. Shadowing is forced on if the graphics subsystem does not exist.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.SetSize(System.UInt32,System.UInt32,System.Boolean)">
            <summary>
             Set size and vertex elements and dynamic mode using legacy element bitmask. Previous data will be lost.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.Unlock">
            <summary>
             Unlock the buffer and apply changes to the GPU buffer.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.IsShadowed">
            <summary>
             Return whether CPU memory shadowing is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.IsDynamic">
            <summary>
             Return whether is dynamic.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.IsLocked">
            <summary>
             Return whether is currently locked.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.GetVertexCount">
            <summary>
             Return number of vertices.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.GetVertexSize">
            <summary>
             Return vertex size in bytes.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.HasElement(AtomicEngine.VertexElementSemantic,System.Byte)">
            <summary>
             Return whether has a specified element semantic.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.HasElement(AtomicEngine.VertexElementType,AtomicEngine.VertexElementSemantic,System.Byte)">
            <summary>
             Return whether has an element semantic with specific type.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.GetElementOffset(AtomicEngine.VertexElementSemantic,System.Byte)">
            <summary>
             Return offset of a element within vertex, or M_MAX_UNSIGNED if does not exist.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.GetElementOffset(AtomicEngine.VertexElementType,AtomicEngine.VertexElementSemantic,System.Byte)">
            <summary>
             Return offset of a element with specific type within vertex, or M_MAX_UNSIGNED if element does not exist.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.GetElementMask">
            <summary>
             Return legacy vertex element mask. Note that both semantic and type must match the legacy element for a mask bit to be set.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.GetBufferHash(System.UInt32)">
            <summary>
             Return buffer hash for building vertex declarations. Used internally.
            </summary>
        </member>
        <member name="M:AtomicEngine.VertexBuffer.GetVertexSize(System.UInt32)">
            <summary>
             Return vertex size for a legacy vertex element bitmask.
            </summary>
        </member>
        <member name="T:AtomicEngine.Viewport">
            <summary>
             %Viewport definition either for a render surface or the backbuffer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.#ctor(System.IntPtr)">
            <summary>
             Construct with defaults.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.#ctor(AtomicEngine.Scene,AtomicEngine.Camera,AtomicEngine.RenderPath)">
            <summary>
             Construct with a full rectangle.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.#ctor(AtomicEngine.Scene,AtomicEngine.Camera,AtomicEngine.IntRect,AtomicEngine.RenderPath)">
            <summary>
             Construct with a specified rectangle.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.SetScene(AtomicEngine.Scene)">
            <summary>
             Set scene.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.SetCamera(AtomicEngine.Camera)">
            <summary>
             Set viewport camera.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.SetRect(AtomicEngine.IntRect)">
            <summary>
             Set view rectangle. A zero rectangle (0 0 0 0) means to use the rendertarget's full dimensions.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.SetRenderPath(AtomicEngine.RenderPath)">
            <summary>
             Set rendering path.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.SetRenderPath(AtomicEngine.XMLFile)">
            <summary>
             Set rendering path from an XML file.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.SetDrawDebug(System.Boolean)">
            <summary>
             Set whether to render debug geometry. Default true.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.SetCullCamera(AtomicEngine.Camera)">
            <summary>
             Set separate camera to use for culling. Sharing a culling camera between several viewports allows to prepare the view only once, saving in CPU use. The culling camera's frustum should cover all the viewport cameras' frusta or else objects may be missing from the rendered view.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.GetScene">
            <summary>
             Return scene.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.GetCamera">
            <summary>
             Return viewport camera.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.GetView">
            <summary>
             Return the internal rendering structure. May be null if the viewport has not been rendered yet.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.GetRect">
            <summary>
             Return view rectangle. A zero rectangle (0 0 0 0) means to use the rendertarget's full dimensions. In this case you could fetch the actual view rectangle from View object, though it will be valid only after the first frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.GetRenderPath">
            <summary>
             Return rendering path.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.GetDrawDebug">
            <summary>
             Return whether to draw debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.GetCullCamera">
            <summary>
             Return the culling camera. If null, the viewport camera will be used for culling (normal case.)
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.WorldToScreenPoint(AtomicEngine.Vector3)">
            <summary>
             Convert a world space point to normalized screen coordinates.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.ScreenToWorldPoint(System.Int32,System.Int32,System.Single)">
            <summary>
             Convert screen coordinates and depth to a world space point.
            </summary>
        </member>
        <member name="M:AtomicEngine.Viewport.AllocateView">
            <summary>
             Allocate the view structure. Called by Renderer.
            </summary>
        </member>
        <member name="T:AtomicEngine.Deserializer">
            <summary>
             Abstract stream for reading.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.Seek(System.UInt32)">
            <summary>
             Set position from the beginning of the stream.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.GetName">
            <summary>
             Return name of the stream.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.GetChecksum">
            <summary>
             Return a checksum if applicable.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.IsEof">
            <summary>
             Return whether the end of stream has been reached.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.GetPosition">
            <summary>
             Return current position.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.GetSize">
            <summary>
             Return size.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadInt64">
            <summary>
             Read a 64-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadInt">
            <summary>
             Read a 32-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadShort">
            <summary>
             Read a 16-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadByte">
            <summary>
             Read an 8-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadUInt64">
            <summary>
             Read a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadUInt">
            <summary>
             Read a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadUShort">
            <summary>
             Read a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadUByte">
            <summary>
             Read an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadBool">
            <summary>
             Read a bool.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadFloat">
            <summary>
             Read a float.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadDouble">
            <summary>
             Read a double.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadIntRect">
            <summary>
             Read an IntRect.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadIntVector2">
            <summary>
             Read an IntVector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadRect">
            <summary>
             Read a Rect.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadVector2">
            <summary>
             Read a Vector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadVector3">
            <summary>
             Read a Vector3.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadPackedVector3(System.Single)">
            <summary>
             Read a Vector3 packed into 3 x 16 bits with the specified maximum absolute range.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadVector4">
            <summary>
             Read a Vector4.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadQuaternion">
            <summary>
             Read a quaternion.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadPackedQuaternion">
            <summary>
             Read a quaternion with each component packed in 16 bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadColor">
            <summary>
             Read a color.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadBoundingBox">
            <summary>
             Read a bounding box.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadString">
            <summary>
             Read a null-terminated string.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadFileID">
            <summary>
             Read a four-letter file ID.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadStringHash">
            <summary>
             Read a 32-bit StringHash.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadVariantVector(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Read a variant vector.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadVLE">
            <summary>
             Read a variable-length encoded unsigned integer, which can use 29 bits maximum.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadNetID">
            <summary>
             Read a 24-bit network object ID.
            </summary>
        </member>
        <member name="M:AtomicEngine.Deserializer.ReadLine">
            <summary>
             Read a text line.
            </summary>
        </member>
        <member name="T:AtomicEngine.File">
            <summary>
             %File opened either through the filesystem or from within a package file.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.Read(System.Int32)">
            <summary>
            Read bytes from the file. Return array of bytes of the length actually read (can be 0 length)
            </summary>
        </member>
        <member name="M:AtomicEngine.File.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write bytes to the file, with optional offset into array and count of bytes to write. 
            Return number of bytes actually written.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.#ctor(System.String,AtomicEngine.FileMode)">
            <summary>
             Construct and open a filesystem file.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.#ctor(AtomicEngine.PackageFile,System.String)">
            <summary>
             Construct and open from a package file.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.Seek(System.UInt32)">
            <summary>
             Set position from the beginning of the file.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.GetName">
            <summary>
             Return the file name.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.GetChecksum">
            <summary>
             Return a checksum of the file contents using the SDBM hash algorithm.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.Close">
            <summary>
             Close the file.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.Flush">
            <summary>
             Flush any buffered output to the file.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.SetName(System.String)">
            <summary>
             Change the file name. Used by the resource system.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.GetMode">
            <summary>
             Return the open mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.IsOpen">
            <summary>
             Return whether is open.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.IsPackaged">
            <summary>
             Return whether the file originates from a package.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadText">
            <summary>
             Reads a text file, ensuring data from file is 0 terminated
            </summary>
        </member>
        <member name="M:AtomicEngine.File.GetFullPath">
            <summary>
             Return the fullpath to the file
            </summary>
        </member>
        <member name="M:AtomicEngine.File.Copy(AtomicEngine.File)">
            <summary>
             Unlike FileSystem.Copy this copy works when the source file is in a package file
            </summary>
        </member>
        <member name="M:AtomicEngine.File.IsEof">
            <summary>
             Return whether the end of stream has been reached.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.GetPosition">
            <summary>
             Return current position.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.GetSize">
            <summary>
             Return size.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadInt64">
            <summary>
             Read a 64-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadInt">
            <summary>
             Read a 32-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadShort">
            <summary>
             Read a 16-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadByte">
            <summary>
             Read an 8-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadUInt64">
            <summary>
             Read a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadUInt">
            <summary>
             Read a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadUShort">
            <summary>
             Read a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadUByte">
            <summary>
             Read an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadBool">
            <summary>
             Read a bool.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadFloat">
            <summary>
             Read a float.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadDouble">
            <summary>
             Read a double.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadIntRect">
            <summary>
             Read an IntRect.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadIntVector2">
            <summary>
             Read an IntVector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadRect">
            <summary>
             Read a Rect.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadVector2">
            <summary>
             Read a Vector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadVector3">
            <summary>
             Read a Vector3.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadPackedVector3(System.Single)">
            <summary>
             Read a Vector3 packed into 3 x 16 bits with the specified maximum absolute range.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadVector4">
            <summary>
             Read a Vector4.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadQuaternion">
            <summary>
             Read a quaternion.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadPackedQuaternion">
            <summary>
             Read a quaternion with each component packed in 16 bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadColor">
            <summary>
             Read a color.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadBoundingBox">
            <summary>
             Read a bounding box.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadString">
            <summary>
             Read a null-terminated string.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadFileID">
            <summary>
             Read a four-letter file ID.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadStringHash">
            <summary>
             Read a 32-bit StringHash.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadVariantVector(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Read a variant vector.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadVLE">
            <summary>
             Read a variable-length encoded unsigned integer, which can use 29 bits maximum.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadNetID">
            <summary>
             Read a 24-bit network object ID.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.ReadLine">
            <summary>
             Read a text line.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteInt64(System.Int64)">
            <summary>
             Write a 64-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteInt(System.Int32)">
            <summary>
             Write a 32-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteShort(System.Int16)">
            <summary>
             Write a 16-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteByte(System.Char)">
            <summary>
             Write an 8-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteUInt64(System.Int64)">
            <summary>
             Write a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteUInt(System.UInt32)">
            <summary>
             Write a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteUShort(System.UInt16)">
            <summary>
             Write a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteUByte(System.Byte)">
            <summary>
             Write an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteBool(System.Boolean)">
            <summary>
             Write a bool.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteFloat(System.Single)">
            <summary>
             Write a float.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteDouble(System.Single)">
            <summary>
             Write a double.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteIntRect(AtomicEngine.IntRect)">
            <summary>
             Write an IntRect.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteIntVector2(AtomicEngine.IntVector2)">
            <summary>
             Write an IntVector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteRect(AtomicEngine.Rect)">
            <summary>
             Write a Rect.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteVector2(AtomicEngine.Vector2)">
            <summary>
             Write a Vector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteVector3(AtomicEngine.Vector3)">
            <summary>
             Write a Vector3.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WritePackedVector3(AtomicEngine.Vector3,System.Single)">
            <summary>
             Write a Vector3 packed into 3 x 16 bits with the specified maximum absolute range.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteVector4(AtomicEngine.Vector4)">
            <summary>
             Write a Vector4.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteQuaternion(AtomicEngine.Quaternion)">
            <summary>
             Write a quaternion.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WritePackedQuaternion(AtomicEngine.Quaternion)">
            <summary>
             Write a quaternion with each component packed in 16 bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteColor(AtomicEngine.Color)">
            <summary>
             Write a color.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteBoundingBox(AtomicEngine.BoundingBox)">
            <summary>
             Write a bounding box.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteString(System.String)">
            <summary>
             Write a null-terminated string.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteFileID(System.String)">
            <summary>
             Write a four-letter file ID. If the string is not long enough, spaces will be appended.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteStringHash(AtomicEngine.StringHash)">
            <summary>
             Write a 32-bit StringHash.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteVariantVector(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Write a variant vector.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteVLE(System.UInt32)">
            <summary>
             Write a variable-length encoded unsigned integer, which can use 29 bits maximum.
            </summary>
        </member>
        <member name="M:AtomicEngine.File.WriteNetID(System.UInt32)">
            <summary>
             Write a 24-bit network object ID.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.File.WriteLine(System.String)" -->
        <member name="T:AtomicEngine.Log">
            <summary>
             Logging subsystem.
            </summary>
        </member>
        <member name="M:AtomicEngine.Log.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Log.Open(System.String)">
            <summary>
             Open the log file.
            </summary>
        </member>
        <member name="M:AtomicEngine.Log.Close">
            <summary>
             Close the log file.
            </summary>
        </member>
        <member name="M:AtomicEngine.Log.SetLevel(System.Int32)">
            <summary>
             Set logging level.
            </summary>
        </member>
        <member name="M:AtomicEngine.Log.SetTimeStamp(System.Boolean)">
            <summary>
             Set whether to timestamp log messages.
            </summary>
        </member>
        <member name="M:AtomicEngine.Log.SetQuiet(System.Boolean)">
            <summary>
             Set quiet mode ie. only print error entries to standard error stream (which is normally redirected to console also). Output to log file is not affected by this mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Log.GetLevel">
            <summary>
             Return logging level.
            </summary>
        </member>
        <member name="M:AtomicEngine.Log.GetTimeStamp">
            <summary>
             Return whether log messages are timestamped.
            </summary>
        </member>
        <member name="M:AtomicEngine.Log.GetLastMessage">
            <summary>
             Return last log message.
            </summary>
        </member>
        <member name="M:AtomicEngine.Log.IsQuiet">
            <summary>
             Return whether log is in quiet mode (only errors printed to standard error stream).
            </summary>
        </member>
        <member name="M:AtomicEngine.Log.Write(System.Int32,System.String)">
            <summary>
             Write to the log. If logging level is higher than the level of the message, the message is ignored.
            </summary>
        </member>
        <member name="M:AtomicEngine.Log.WriteRaw(System.String,System.Boolean)">
            <summary>
             Write raw output to the log.
            </summary>
        </member>
        <member name="T:AtomicEngine.Serializer">
            <summary>
             Abstract stream for writing.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteInt64(System.Int64)">
            <summary>
             Write a 64-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteInt(System.Int32)">
            <summary>
             Write a 32-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteShort(System.Int16)">
            <summary>
             Write a 16-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteByte(System.Char)">
            <summary>
             Write an 8-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteUInt64(System.Int64)">
            <summary>
             Write a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteUInt(System.UInt32)">
            <summary>
             Write a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteUShort(System.UInt16)">
            <summary>
             Write a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteUByte(System.Byte)">
            <summary>
             Write an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteBool(System.Boolean)">
            <summary>
             Write a bool.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteFloat(System.Single)">
            <summary>
             Write a float.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteDouble(System.Single)">
            <summary>
             Write a double.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteIntRect(AtomicEngine.IntRect)">
            <summary>
             Write an IntRect.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteIntVector2(AtomicEngine.IntVector2)">
            <summary>
             Write an IntVector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteRect(AtomicEngine.Rect)">
            <summary>
             Write a Rect.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteVector2(AtomicEngine.Vector2)">
            <summary>
             Write a Vector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteVector3(AtomicEngine.Vector3)">
            <summary>
             Write a Vector3.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WritePackedVector3(AtomicEngine.Vector3,System.Single)">
            <summary>
             Write a Vector3 packed into 3 x 16 bits with the specified maximum absolute range.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteVector4(AtomicEngine.Vector4)">
            <summary>
             Write a Vector4.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteQuaternion(AtomicEngine.Quaternion)">
            <summary>
             Write a quaternion.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WritePackedQuaternion(AtomicEngine.Quaternion)">
            <summary>
             Write a quaternion with each component packed in 16 bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteColor(AtomicEngine.Color)">
            <summary>
             Write a color.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteBoundingBox(AtomicEngine.BoundingBox)">
            <summary>
             Write a bounding box.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteString(System.String)">
            <summary>
             Write a null-terminated string.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteFileID(System.String)">
            <summary>
             Write a four-letter file ID. If the string is not long enough, spaces will be appended.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteStringHash(AtomicEngine.StringHash)">
            <summary>
             Write a 32-bit StringHash.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteVariantVector(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Write a variant vector.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteVLE(System.UInt32)">
            <summary>
             Write a variable-length encoded unsigned integer, which can use 29 bits maximum.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializer.WriteNetID(System.UInt32)">
            <summary>
             Write a 24-bit network object ID.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.Serializer.WriteLine(System.String)" -->
        <member name="M:AtomicEngine.IPC.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Frustum.Define(System.Single,System.Single,System.Single,System.Single,System.Single,AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
            Define with projection parameters and a transform.
            </summary>
        </member>
        <member name="M:AtomicEngine.Frustum.Define(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Define with projection parameters
            </summary>
        </member>
        <member name="M:AtomicEngine.Frustum.DefineOrtho(System.Single,System.Single,System.Single,System.Single,System.Single,AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
            Define with orthographic projection parameters and a transform.
            </summary>
        </member>
        <member name="M:AtomicEngine.Frustum.DefineOrtho(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Define with orthographic projection parameters.
            </summary>
        </member>
        <member name="M:AtomicEngine.Frustum.IsInside(AtomicEngine.Vector3)">
            <summary>
            Test if a point is inside or outside.
            </summary>
        </member>
        <member name="M:AtomicEngine.Frustum.IsInside(AtomicEngine.BoundingBox)">
            <summary>
            Test if a bounding box is inside, outside or intersects.
            </summary>
        </member>
        <member name="M:AtomicEngine.Frustum.IsInsideFast(AtomicEngine.BoundingBox)">
            <summary>
            Test if a bounding box is (partially) inside or outside.
            </summary>
        </member>
        <member name="M:AtomicEngine.Frustum.Distance(AtomicEngine.Vector3)">
            <summary>
            Return distance of a point to the frustum, or 0 if inside.
            </summary>
        </member>
        <member name="F:AtomicEngine.IntRect.Left">
            Left coordinate.
        </member>
        <member name="F:AtomicEngine.IntRect.Top">
            Top coordinate.
        </member>
        <member name="F:AtomicEngine.IntRect.Right">
            Right coordinate.
        </member>
        <member name="F:AtomicEngine.IntRect.Bottom">
            Bottom coordinate.
        </member>
        <member name="T:AtomicEngine.IntVector2">
            <summary>Represents a 2D vector using two single-precision inting-point numbers.</summary>
            <remarks>
            The IntVector2 structure is suitable for interoperation with unmanaged code requiring two consecutive ints.
            </remarks>
        </member>
        <member name="F:AtomicEngine.IntVector2.X">
            <summary>
            The X component of the IntVector2.
            </summary>
        </member>
        <member name="F:AtomicEngine.IntVector2.Y">
            <summary>
            The Y component of the IntVector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.IntVector2.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new IntVector2.
            </summary>
            <param name="x">The x coordinate of the net IntVector2.</param>
            <param name="y">The y coordinate of the net IntVector2.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.#ctor(AtomicEngine.IntVector2)">
            <summary>
            Constructs a new IntVector2 from the given IntVector2.
            </summary>
            <param name="v">The IntVector2 to copy components from.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.#ctor(AtomicEngine.Vector2)">
            <summary>
            Constructs a new IntVector2 from the given Vector2.
            </summary>
            <param name="v">The IntVector2 to copy components from.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Add(AtomicEngine.IntVector2)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Add(AtomicEngine.IntVector2@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Sub(AtomicEngine.IntVector2)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Sub(AtomicEngine.IntVector2@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Mult(System.Int32)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Div(System.Int32)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="P:AtomicEngine.IntVector2.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:AtomicEngine.IntVector2.LengthFast"/>
            <seealso cref="P:AtomicEngine.IntVector2.LengthSquared"/>
        </member>
        <member name="P:AtomicEngine.IntVector2.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:AtomicEngine.IntVector2.Length"/>
            <seealso cref="P:AtomicEngine.IntVector2.LengthSquared"/>
        </member>
        <member name="P:AtomicEngine.IntVector2.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:AtomicEngine.IntVector2.Length"/>
            <seealso cref="P:AtomicEngine.IntVector2.LengthFast"/>
        </member>
        <member name="P:AtomicEngine.IntVector2.PerpendicularRight">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
        </member>
        <member name="P:AtomicEngine.IntVector2.PerpendicularLeft">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
        </member>
        <member name="M:AtomicEngine.IntVector2.Normalize">
            <summary>
            Scales the IntVector2 to unit length.
            </summary>
        </member>
        <member name="M:AtomicEngine.IntVector2.NormalizeFast">
            <summary>
            Scales the IntVector2 to approximately unit length.
            </summary>
        </member>
        <member name="M:AtomicEngine.IntVector2.Scale(System.Int32,System.Int32)">
            <summary>
            Scales the current IntVector2 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Scale(AtomicEngine.IntVector2)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Scale(AtomicEngine.IntVector2@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:AtomicEngine.IntVector2.UnitX">
            <summary>
            Defines a unit-length IntVector2 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:AtomicEngine.IntVector2.UnitY">
            <summary>
            Defines a unit-length IntVector2 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:AtomicEngine.IntVector2.Zero">
            <summary>
            Defines a zero-length IntVector2.
            </summary>
        </member>
        <member name="F:AtomicEngine.IntVector2.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:AtomicEngine.IntVector2.SizeInBytes">
            <summary>
            Defines the size of the IntVector2 struct in bytes.
            </summary>
        </member>
        <member name="M:AtomicEngine.IntVector2.Add(AtomicEngine.IntVector2,AtomicEngine.IntVector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.Add(AtomicEngine.IntVector2@,AtomicEngine.IntVector2@,AtomicEngine.IntVector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Subtract(AtomicEngine.IntVector2,AtomicEngine.IntVector2)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.Subtract(AtomicEngine.IntVector2@,AtomicEngine.IntVector2@,AtomicEngine.IntVector2@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Multiply(AtomicEngine.IntVector2,System.Int32)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.Multiply(AtomicEngine.IntVector2@,System.Int32,AtomicEngine.IntVector2@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Multiply(AtomicEngine.IntVector2,AtomicEngine.IntVector2)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.Multiply(AtomicEngine.IntVector2@,AtomicEngine.IntVector2@,AtomicEngine.IntVector2@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Divide(AtomicEngine.IntVector2,System.Int32)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.Divide(AtomicEngine.IntVector2@,System.Int32,AtomicEngine.IntVector2@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Divide(AtomicEngine.IntVector2,AtomicEngine.IntVector2)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.Divide(AtomicEngine.IntVector2@,AtomicEngine.IntVector2@,AtomicEngine.IntVector2@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.ComponentMin(AtomicEngine.IntVector2,AtomicEngine.IntVector2)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.ComponentMin(AtomicEngine.IntVector2@,AtomicEngine.IntVector2@,AtomicEngine.IntVector2@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.ComponentMax(AtomicEngine.IntVector2,AtomicEngine.IntVector2)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.ComponentMax(AtomicEngine.IntVector2@,AtomicEngine.IntVector2@,AtomicEngine.IntVector2@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Min(AtomicEngine.IntVector2,AtomicEngine.IntVector2)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.Max(AtomicEngine.IntVector2,AtomicEngine.IntVector2)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.Clamp(AtomicEngine.IntVector2,AtomicEngine.IntVector2,AtomicEngine.IntVector2)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.Clamp(AtomicEngine.IntVector2@,AtomicEngine.IntVector2@,AtomicEngine.IntVector2@,AtomicEngine.IntVector2@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Normalize(AtomicEngine.IntVector2)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.Normalize(AtomicEngine.IntVector2@,AtomicEngine.IntVector2@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.NormalizeFast(AtomicEngine.IntVector2)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.NormalizeFast(AtomicEngine.IntVector2@,AtomicEngine.IntVector2@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Dot(AtomicEngine.IntVector2,AtomicEngine.IntVector2)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.Dot(AtomicEngine.IntVector2@,AtomicEngine.IntVector2@,System.Int32@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.Lerp(AtomicEngine.IntVector2,AtomicEngine.IntVector2,System.Int32)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.Lerp(AtomicEngine.IntVector2@,AtomicEngine.IntVector2@,System.Int32,AtomicEngine.IntVector2@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.BaryCentric(AtomicEngine.IntVector2,AtomicEngine.IntVector2,AtomicEngine.IntVector2,System.Int32,System.Int32)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.BaryCentric(AtomicEngine.IntVector2@,AtomicEngine.IntVector2@,AtomicEngine.IntVector2@,System.Int32,System.Int32,AtomicEngine.IntVector2@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:AtomicEngine.IntVector2.op_Addition(AtomicEngine.IntVector2,AtomicEngine.IntVector2)">
            <summary>
            Adds the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of addition.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.op_Subtraction(AtomicEngine.IntVector2,AtomicEngine.IntVector2)">
            <summary>
            Subtracts the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of subtraction.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.op_UnaryNegation(AtomicEngine.IntVector2)">
            <summary>
            Negates the specified instance.
            </summary>
            <param name="vec">Operand.</param>
            <returns>Result of negation.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.op_Multiply(AtomicEngine.IntVector2,System.Int32)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.op_Multiply(System.Int32,AtomicEngine.IntVector2)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="scale">Left operand.</param>
            <param name="vec">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.op_Division(AtomicEngine.IntVector2,System.Int32)">
            <summary>
            Divides the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand</param>
            <param name="scale">Right operand</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.op_Equality(AtomicEngine.IntVector2,AtomicEngine.IntVector2)">
            <summary>
            Compares the specified instances for equality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.op_Inequality(AtomicEngine.IntVector2,AtomicEngine.IntVector2)">
            <summary>
            Compares the specified instances for inequality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are not equal; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.ToString">
            <summary>
            Returns a System.String that represents the current IntVector2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.IntVector2.Equals(AtomicEngine.IntVector2)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:AtomicEngine.MathHelper">
            <summary>
            Contains common mathematical functions and constants.
            </summary>
        </member>
        <member name="F:AtomicEngine.MathHelper.Pi">
            <summary>
            Defines the value of Pi as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:AtomicEngine.MathHelper.PiOver2">
            <summary>
            Defines the value of Pi divided by two as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:AtomicEngine.MathHelper.PiOver3">
            <summary>
            Defines the value of Pi divided by three as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:AtomicEngine.MathHelper.PiOver4">
            <summary>
            Definesthe value of  Pi divided by four as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:AtomicEngine.MathHelper.PiOver6">
            <summary>
            Defines the value of Pi divided by six as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:AtomicEngine.MathHelper.TwoPi">
            <summary>
            Defines the value of Pi multiplied by two as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:AtomicEngine.MathHelper.ThreePiOver2">
            <summary>
            Defines the value of Pi multiplied by 3 and divided by two as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:AtomicEngine.MathHelper.E">
            <summary>
            Defines the value of E as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="F:AtomicEngine.MathHelper.Log10E">
            <summary>
            Defines the base-10 logarithm of E.
            </summary>
        </member>
        <member name="F:AtomicEngine.MathHelper.Log2E">
            <summary>
            Defines the base-2 logarithm of E.
            </summary>
        </member>
        <member name="M:AtomicEngine.MathHelper.NextPowerOfTwo(System.Int64)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:AtomicEngine.MathHelper.NextPowerOfTwo(System.Int32)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:AtomicEngine.MathHelper.NextPowerOfTwo(System.Single)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:AtomicEngine.MathHelper.NextPowerOfTwo(System.Double)">
            <summary>
            Returns the next power of two that is larger than the specified number.
            </summary>
            <param name="n">The specified number.</param>
            <returns>The next power of two.</returns>
        </member>
        <member name="M:AtomicEngine.MathHelper.Factorial(System.Int32)">
            <summary>Calculates the factorial of a given natural number.
            </summary>
            <param name="n">The number.</param>
            <returns>n!</returns>
        </member>
        <member name="M:AtomicEngine.MathHelper.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            Calculates the binomial coefficient <paramref name="n"/> above <paramref name="k"/>.
            </summary>
            <param name="n">The n.</param>
            <param name="k">The k.</param>
            <returns>n! / (k! * (n - k)!)</returns>
        </member>
        <member name="M:AtomicEngine.MathHelper.InverseSqrtFast(System.Single)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:AtomicEngine.MathHelper.InverseSqrtFast(System.Double)">
            <summary>
            Returns an approximation of the inverse square root of left number.
            </summary>
            <param name="x">A number.</param>
            <returns>An approximation of the inverse square root of the specified number, with an upper error bound of 0.001</returns>
            <remarks>
            This is an improved implementation of the the method known as Carmack's inverse square root
            which is found in the Quake III source code. This implementation comes from
            http://www.codemaestro.com/reviews/review00000105.html. For the history of this method, see
            http://www.beyond3d.com/content/articles/8/
            </remarks>
        </member>
        <member name="M:AtomicEngine.MathHelper.DegreesToRadians(System.Single)">
            <summary>
            Convert degrees to radians
            </summary>
            <param name="degrees">An angle in degrees</param>
            <returns>The angle expressed in radians</returns>
        </member>
        <member name="M:AtomicEngine.MathHelper.RadiansToDegrees(System.Single)">
            <summary>
            Convert radians to degrees
            </summary>
            <param name="radians">An angle in radians</param>
            <returns>The angle expressed in degrees</returns>
        </member>
        <member name="M:AtomicEngine.MathHelper.DegreesToRadians(System.Double)">
            <summary>
            Convert degrees to radians
            </summary>
            <param name="degrees">An angle in degrees</param>
            <returns>The angle expressed in radians</returns>
        </member>
        <member name="M:AtomicEngine.MathHelper.RadiansToDegrees(System.Double)">
            <summary>
            Convert radians to degrees
            </summary>
            <param name="radians">An angle in radians</param>
            <returns>The angle expressed in degrees</returns>
        </member>
        <member name="M:AtomicEngine.MathHelper.Swap(System.Double@,System.Double@)">
            <summary>
            Swaps two double values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
        </member>
        <member name="M:AtomicEngine.MathHelper.Swap(System.Single@,System.Single@)">
            <summary>
            Swaps two float values.
            </summary>
            <param name="a">The first value.</param>
            <param name="b">The second value.</param>
        </member>
        <member name="M:AtomicEngine.MathHelper.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Clamp a float to a range.
            </summary>
        </member>
        <member name="F:AtomicEngine.Matrix3.R0C0">
            <summary>Row 0, Column 0</summary>
        </member>
        <member name="F:AtomicEngine.Matrix3.R0C1">
            <summary>Row 0, Column 1</summary>
        </member>
        <member name="F:AtomicEngine.Matrix3.R0C2">
            <summary>Row 0, Column 2</summary>
        </member>
        <member name="F:AtomicEngine.Matrix3.R1C0">
            <summary>Row 1, Column 0</summary>
        </member>
        <member name="F:AtomicEngine.Matrix3.R1C1">
            <summary>Row 1, Column 1</summary>
        </member>
        <member name="F:AtomicEngine.Matrix3.R1C2">
            <summary>Row 1, Column 2</summary>
        </member>
        <member name="F:AtomicEngine.Matrix3.R2C0">
            <summary>Row 2, Column 0</summary>
        </member>
        <member name="F:AtomicEngine.Matrix3.R2C1">
            <summary>Row 2, Column 1</summary>
        </member>
        <member name="F:AtomicEngine.Matrix3.R2C2">
            <summary>Row 2, Column 2</summary>
        </member>
        <member name="P:AtomicEngine.Matrix3.Item(System.Int32,System.Int32)">
            <summary>Gets the component at the given row and column in the matrix.</summary>
            <param name="row">The row of the matrix.</param>
            <param name="column">The column of the matrix.</param>
            <returns>The component at the given row and column in the matrix.</returns>
        </member>
        <member name="P:AtomicEngine.Matrix3.Item(System.Int32)">
            <summary>Gets the component at the index into the matrix.</summary>
            <param name="index">The index into the components of the matrix.</param>
            <returns>The component at the given index into the matrix.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix3.op_Explicit(AtomicEngine.Matrix3)~System.IntPtr">
            <summary>Converts the matrix into an IntPtr.</summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>An IntPtr for the matrix.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix3.op_Explicit(AtomicEngine.Matrix3)~System.Single*">
            <summary>Converts the matrix into left float*.</summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>A float* for the matrix.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix3.op_Explicit(AtomicEngine.Matrix3)~System.Single[]">
            <summary>Converts the matrix into an array of floats.</summary>
            <param name="matrix">The matrix to convert.</param>
            <returns>An array of floats for the matrix.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix3.#ctor(AtomicEngine.Matrix3@)">
            <summary>Constructs left matrix with the same components as the given matrix.</summary>
            <param name="vector">The matrix whose components to copy.</param>
        </member>
        <member name="M:AtomicEngine.Matrix3.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>Constructs left matrix with the given values.</summary>
            <param name="r0c0">The value for row 0 column 0.</param>
            <param name="r0c1">The value for row 0 column 1.</param>
            <param name="r0c2">The value for row 0 column 2.</param>
            <param name="r1c0">The value for row 1 column 0.</param>
            <param name="r1c1">The value for row 1 column 1.</param>
            <param name="r1c2">The value for row 1 column 2.</param>
            <param name="r2c0">The value for row 2 column 0.</param>
            <param name="r2c1">The value for row 2 column 1.</param>
            <param name="r2c2">The value for row 2 column 2.</param>
        </member>
        <member name="M:AtomicEngine.Matrix3.#ctor(System.Single[])">
            <summary>Constructs left matrix from the given array of float-precision floating-point numbers.</summary>
            <param name="floatArray">The array of floats for the components of the matrix.</param>
        </member>
        <member name="M:AtomicEngine.Matrix3.Equals(AtomicEngine.Matrix3)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="matrix">The OpenTK.Matrix3 structure to compare with.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix3.Equals(AtomicEngine.Matrix3@)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="matrix">The OpenTK.Matrix3 structure to compare to.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix3.Equals(AtomicEngine.Matrix3@,AtomicEngine.Matrix3@)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="left">The left-hand operand.</param>
            <param name="right">The right-hand operand.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix3.EqualsApprox(AtomicEngine.Matrix3@,System.Single)">
            <summary>Indicates whether the current matrix is approximately equal to another matrix.</summary>
            <param name="matrix">The OpenTK.Matrix3 structure to compare with.</param>
            <param name="tolerance">The limit below which the matrices are considered equal.</param>
            <returns>true if the current matrix is approximately equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix3.EqualsApprox(AtomicEngine.Matrix3@,AtomicEngine.Matrix3@,System.Single)">
            <summary>Indicates whether the current matrix is approximately equal to another matrix.</summary>
            <param name="left">The left-hand operand.</param>
            <param name="right">The right-hand operand.</param>
            <param name="tolerance">The limit below which the matrices are considered equal.</param>
            <returns>true if the current matrix is approximately equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix3.Add(AtomicEngine.Matrix3@)">
            <summary>Add left matrix to this matrix.</summary>
            <param name="matrix">The matrix to add.</param>
        </member>
        <member name="M:AtomicEngine.Matrix3.Add(AtomicEngine.Matrix3@,AtomicEngine.Matrix3@)">
            <summary>Add left matrix to this matrix.</summary>
            <param name="matrix">The matrix to add.</param>
            <param name="result">The resulting matrix of the addition.</param>
        </member>
        <member name="M:AtomicEngine.Matrix3.Add(AtomicEngine.Matrix3@,AtomicEngine.Matrix3@,AtomicEngine.Matrix3@)">
            <summary>Add left matrix to left matrix.</summary>
            <param name="matrix">The matrix on the matrix side of the equation.</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the addition.</param>
        </member>
        <member name="M:AtomicEngine.Matrix3.Subtract(AtomicEngine.Matrix3@)">
            <summary>Subtract left matrix from this matrix.</summary>
            <param name="matrix">The matrix to subtract.</param>
        </member>
        <member name="M:AtomicEngine.Matrix3.Subtract(AtomicEngine.Matrix3@,AtomicEngine.Matrix3@)">
            <summary>Subtract left matrix from this matrix.</summary>
            <param name="matrix">The matrix to subtract.</param>
            <param name="result">The resulting matrix of the subtraction.</param>
        </member>
        <member name="M:AtomicEngine.Matrix3.Subtract(AtomicEngine.Matrix3@,AtomicEngine.Matrix3@,AtomicEngine.Matrix3@)">
            <summary>Subtract left matrix from left matrix.</summary>
            <param name="matrix">The matrix on the matrix side of the equation.</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the subtraction.</param>
        </member>
        <member name="M:AtomicEngine.Matrix3.Multiply(AtomicEngine.Matrix3@)">
            <summary>Multiply left martix times this matrix.</summary>
            <param name="matrix">The matrix to multiply.</param>
        </member>
        <member name="M:AtomicEngine.Matrix3.Multiply(AtomicEngine.Matrix3@,AtomicEngine.Matrix3@)">
            <summary>Multiply matrix times this matrix.</summary>
            <param name="matrix">The matrix to multiply.</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:AtomicEngine.Matrix3.Multiply(AtomicEngine.Matrix3@,AtomicEngine.Matrix3@,AtomicEngine.Matrix3@)">
            <summary>Multiply left matrix times left matrix.</summary>
            <param name="matrix">The matrix on the matrix side of the equation.</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:AtomicEngine.Matrix3.Multiply(System.Single)">
            <summary>Multiply matrix times this matrix.</summary>
            <param name="matrix">The matrix to multiply.</param>
        </member>
        <member name="M:AtomicEngine.Matrix3.Multiply(System.Single,AtomicEngine.Matrix3@)">
            <summary>Multiply matrix times this matrix.</summary>
            <param name="matrix">The matrix to multiply.</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="M:AtomicEngine.Matrix3.Multiply(AtomicEngine.Matrix3@,System.Single,AtomicEngine.Matrix3@)">
            <summary>Multiply left matrix times left matrix.</summary>
            <param name="matrix">The matrix on the matrix side of the equation.</param>
            <param name="right">The matrix on the right side of the equation</param>
            <param name="result">The resulting matrix of the multiplication.</param>
        </member>
        <member name="F:AtomicEngine.Matrix3.Identity">
            <summary>The identity matrix.</summary>
        </member>
        <member name="F:AtomicEngine.Matrix3.Zero">
            <summary>A matrix of all zeros.</summary>
        </member>
        <member name="M:AtomicEngine.Matrix3.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix3.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>A System.String containing left fully qualified type name.</returns>
        </member>
        <member name="T:AtomicEngine.Matrix4">
            <summary>
            Represents a 4x4 Matrix
            </summary>
        </member>
        <member name="F:AtomicEngine.Matrix4.Row0">
            <summary>
            Top row of the matrix
            </summary>
        </member>
        <member name="F:AtomicEngine.Matrix4.Row1">
            <summary>
            2nd row of the matrix
            </summary>
        </member>
        <member name="F:AtomicEngine.Matrix4.Row2">
            <summary>
            3rd row of the matrix
            </summary>
        </member>
        <member name="F:AtomicEngine.Matrix4.Row3">
            <summary>
            Bottom row of the matrix
            </summary>
        </member>
        <member name="F:AtomicEngine.Matrix4.Identity">
            <summary>
            The identity matrix
            </summary>
        </member>
        <member name="M:AtomicEngine.Matrix4.#ctor(AtomicEngine.Vector4,AtomicEngine.Vector4,AtomicEngine.Vector4,AtomicEngine.Vector4)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="row0">Top row of the matrix</param>
            <param name="row1">Second row of the matrix</param>
            <param name="row2">Third row of the matrix</param>
            <param name="row3">Bottom row of the matrix</param>
        </member>
        <member name="M:AtomicEngine.Matrix4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="m00">First item of the first row of the matrix.</param>
            <param name="m01">Second item of the first row of the matrix.</param>
            <param name="m02">Third item of the first row of the matrix.</param>
            <param name="m03">Fourth item of the first row of the matrix.</param>
            <param name="m10">First item of the second row of the matrix.</param>
            <param name="m11">Second item of the second row of the matrix.</param>
            <param name="m12">Third item of the second row of the matrix.</param>
            <param name="m13">Fourth item of the second row of the matrix.</param>
            <param name="m20">First item of the third row of the matrix.</param>
            <param name="m21">Second item of the third row of the matrix.</param>
            <param name="m22">Third item of the third row of the matrix.</param>
            <param name="m23">First item of the third row of the matrix.</param>
            <param name="m30">Fourth item of the fourth row of the matrix.</param>
            <param name="m31">Second item of the fourth row of the matrix.</param>
            <param name="m32">Third item of the fourth row of the matrix.</param>
            <param name="m33">Fourth item of the fourth row of the matrix.</param>
        </member>
        <member name="P:AtomicEngine.Matrix4.Determinant">
            <summary>
            The determinant of this matrix
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.Column0">
            <summary>
            The first column of this matrix
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.Column1">
            <summary>
            The second column of this matrix
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.Column2">
            <summary>
            The third column of this matrix
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.Column3">
            <summary>
            The fourth column of this matrix
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M11">
            <summary>
            Gets or sets the value at row 1, column 1 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M12">
            <summary>
            Gets or sets the value at row 1, column 2 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M13">
            <summary>
            Gets or sets the value at row 1, column 3 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M14">
            <summary>
            Gets or sets the value at row 1, column 4 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M21">
            <summary>
            Gets or sets the value at row 2, column 1 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M22">
            <summary>
            Gets or sets the value at row 2, column 2 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M23">
            <summary>
            Gets or sets the value at row 2, column 3 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M24">
            <summary>
            Gets or sets the value at row 2, column 4 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M31">
            <summary>
            Gets or sets the value at row 3, column 1 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M32">
            <summary>
            Gets or sets the value at row 3, column 2 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M33">
            <summary>
            Gets or sets the value at row 3, column 3 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M34">
            <summary>
            Gets or sets the value at row 3, column 4 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M41">
            <summary>
            Gets or sets the value at row 4, column 1 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M42">
            <summary>
            Gets or sets the value at row 4, column 2 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M43">
            <summary>
            Gets or sets the value at row 4, column 3 of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Matrix4.M44">
            <summary>
            Gets or sets the value at row 4, column 4 of this instance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Matrix4.Invert">
            <summary>
            Converts this instance into its inverse.
            </summary>
        </member>
        <member name="M:AtomicEngine.Matrix4.Transpose">
            <summary>
            Converts this instance into its transpose.
            </summary>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateFromAxisAngle(AtomicEngine.Vector3,System.Single,AtomicEngine.Matrix4@)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <param name="result">A matrix instance.</param>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateFromAxisAngle(AtomicEngine.Vector3,System.Single)">
            <summary>
            Build a rotation matrix from the specified axis/angle rotation.
            </summary>
            <param name="axis">The axis to rotate about.</param>
            <param name="angle">Angle in radians to rotate counter-clockwise (looking in the direction of the given axis).</param>
            <returns>A matrix instance.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateRotationX(System.Single,AtomicEngine.Matrix4@)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateRotationX(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the x-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateRotationY(System.Single,AtomicEngine.Matrix4@)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateRotationY(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the y-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateRotationZ(System.Single,AtomicEngine.Matrix4@)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateRotationZ(System.Single)">
            <summary>
            Builds a rotation matrix for a rotation around the z-axis.
            </summary>
            <param name="angle">The counter-clockwise angle in radians.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateTranslation(System.Single,System.Single,System.Single,AtomicEngine.Matrix4@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateTranslation(AtomicEngine.Vector3@,AtomicEngine.Matrix4@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateTranslation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">X translation.</param>
            <param name="y">Y translation.</param>
            <param name="z">Z translation.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateTranslation(AtomicEngine.Vector3)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="vector">The translation vector.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,AtomicEngine.Matrix4@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the projection volume.</param>
            <param name="height">The height of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <rereturns>The resulting Matrix4 instance.</rereturns>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,AtomicEngine.Matrix4@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <param name="result">The resulting Matrix4 instance.</param>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="left">The left edge of the projection volume.</param>
            <param name="right">The right edge of the projection volume.</param>
            <param name="bottom">The bottom edge of the projection volume.</param>
            <param name="top">The top edge of the projection volume.</param>
            <param name="zNear">The near edge of the projection volume.</param>
            <param name="zFar">The far edge of the projection volume.</param>
            <returns>The resulting Matrix4 instance.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,AtomicEngine.Matrix4@)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <param name="result">A projection matrix that transforms camera space to raster space</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>fovy is zero, less than zero or larger than Math.PI</item>
            <item>aspect is negative or zero</item>
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>fovy is zero, less than zero or larger than Math.PI</item>
            <item>aspect is negative or zero</item>
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,AtomicEngine.Matrix4@)">
            <summary>
            Creates an perspective projection matrix.
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <param name="result">A projection matrix that transforms camera space to raster space</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:AtomicEngine.Matrix4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an perspective projection matrix.
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="zNear">Distance to the near clip plane</param>
            <param name="zFar">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown under the following conditions:
            <list type="bullet">
            <item>zNear is negative or zero</item>
            <item>zFar is negative or zero</item>
            <item>zNear is larger than zFar</item>
            </list>
            </exception>
        </member>
        <member name="M:AtomicEngine.Matrix4.Translation(AtomicEngine.Vector3)">
            <summary>
            Builds a translation matrix.
            </summary>
            <param name="trans">The translation vector.</param>
            <returns>A new Matrix4 instance.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Build a translation matrix with the given translation
            </summary>
            <param name="x">X translation</param>
            <param name="y">Y translation</param>
            <param name="z">Z translation</param>
            <returns>A Translation matrix</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.Scale(System.Single)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Single scale factor for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.Scale(AtomicEngine.Vector3)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="scale">Scale factors for x,y and z axes</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Build a scaling matrix
            </summary>
            <param name="x">Scale factor for x-axis</param>
            <param name="y">Scale factor for y-axis</param>
            <param name="z">Scale factor for z-axis</param>
            <returns>A scaling matrix</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.RotateX(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the x-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the x-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.RotateY(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the y-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the y-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.RotateZ(System.Single)">
            <summary>
            Build a rotation matrix that rotates about the z-axis
            </summary>
            <param name="angle">angle in radians to rotate counter-clockwise around the z-axis</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.Rotate(AtomicEngine.Vector3,System.Single)">
            <summary>
            Build a rotation matrix to rotate about the given axis
            </summary>
            <param name="axis">the axis to rotate about</param>
            <param name="angle">angle in radians to rotate counter-clockwise (looking in the direction of the given axis)</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.Rotate(AtomicEngine.Quaternion)">
            <summary>
            Build a rotation matrix from a quaternion
            </summary>
            <param name="q">the quaternion</param>
            <returns>A rotation matrix</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.LookAt(AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Build a world space to camera space matrix
            </summary>
            <param name="eye">Eye (camera) position in world space</param>
            <param name="target">Target position in world space</param>
            <param name="up">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <returns>A Matrix4 that transforms world space to camera space</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.LookAt(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Build a world space to camera space matrix
            </summary>
            <param name="eyeX">Eye (camera) position in world space</param>
            <param name="eyeY">Eye (camera) position in world space</param>
            <param name="eyeZ">Eye (camera) position in world space</param>
            <param name="targetX">Target position in world space</param>
            <param name="targetY">Target position in world space</param>
            <param name="targetZ">Target position in world space</param>
            <param name="upX">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <param name="upY">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <param name="upZ">Up vector in world space (should not be parallel to the camera direction, that is target - eye)</param>
            <returns>A Matrix4 that transforms world space to camera space</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.Frustum(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="left">Left edge of the view frustum</param>
            <param name="right">Right edge of the view frustum</param>
            <param name="bottom">Bottom edge of the view frustum</param>
            <param name="top">Top edge of the view frustum</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Build a projection matrix
            </summary>
            <param name="fovy">Angle of the field of view in the y direction (in radians)</param>
            <param name="aspect">Aspect ratio of the view (width / height)</param>
            <param name="near">Distance to the near clip plane</param>
            <param name="far">Distance to the far clip plane</param>
            <returns>A projection matrix that transforms camera space to raster space</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.Mult(AtomicEngine.Matrix4,AtomicEngine.Matrix4)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <returns>A new instance that is the result of the multiplication</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.Mult(AtomicEngine.Matrix4@,AtomicEngine.Matrix4@,AtomicEngine.Matrix4@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The left operand of the multiplication.</param>
            <param name="right">The right operand of the multiplication.</param>
            <param name="result">A new instance that is the result of the multiplication</param>
        </member>
        <member name="M:AtomicEngine.Matrix4.Invert(AtomicEngine.Matrix4)">
            <summary>
            Calculate the inverse of the given matrix
            </summary>
            <param name="mat">The matrix to invert</param>
            <returns>The inverse of the given matrix if it has one, or the input if it is singular</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the Matrix4 is singular.</exception>
        </member>
        <member name="M:AtomicEngine.Matrix4.Transpose(AtomicEngine.Matrix4)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <returns>The transpose of the given matrix</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.Transpose(AtomicEngine.Matrix4@,AtomicEngine.Matrix4@)">
            <summary>
            Calculate the transpose of the given matrix
            </summary>
            <param name="mat">The matrix to transpose</param>
            <param name="result">The result of the calculation</param>
        </member>
        <member name="M:AtomicEngine.Matrix4.op_Multiply(AtomicEngine.Matrix4,AtomicEngine.Matrix4)">
            <summary>
            Matrix multiplication
            </summary>
            <param name="left">left-hand operand</param>
            <param name="right">right-hand operand</param>
            <returns>A new Matrix44 which holds the result of the multiplication</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.op_Equality(AtomicEngine.Matrix4,AtomicEngine.Matrix4)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.op_Inequality(AtomicEngine.Matrix4,AtomicEngine.Matrix4)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.ToString">
            <summary>
            Returns a System.String that represents the current Matrix44.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare tresult.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.Matrix4.Equals(AtomicEngine.Matrix4)">
            <summary>Indicates whether the current matrix is equal to another matrix.</summary>
            <param name="other">An matrix to compare with this matrix.</param>
            <returns>true if the current matrix is equal to the matrix parameter; otherwise, false.</returns>
        </member>
        <member name="F:AtomicEngine.Plane.Normal">
            <summary>
            Plane normal.
            </summary>
        </member>
        <member name="F:AtomicEngine.Plane.AbsNormal">
            <summary>
            Plane absolute normal.
            </summary>
        </member>
        <member name="F:AtomicEngine.Plane.D">
            <summary>
            Plane constant.
            </summary>
        </member>
        <member name="M:AtomicEngine.Plane.#ctor(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Construct from a normal vector and a point on the plane.
            </summary>
        </member>
        <member name="M:AtomicEngine.Plane.#ctor(AtomicEngine.Vector4)">
            <summary>
            Construct from a 4-dimensional vector, where the w coordinate is the plane parameter.
            </summary>
        </member>
        <member name="M:AtomicEngine.Plane.Distance(AtomicEngine.Vector3)">
            Return signed distance to a point.
        </member>
        <member name="T:AtomicEngine.Quaternion">
            <summary>
            Represents a Quaternion.
            </summary>
        </member>
        <member name="M:AtomicEngine.Quaternion.#ctor(AtomicEngine.Vector3,System.Single)">
            <summary>
            Construct a new Quaternion from vector and w components
            </summary>
            <param name="v">The vector part</param>
            <param name="w">The w part</param>
        </member>
        <member name="M:AtomicEngine.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct a new Quaternion
            </summary>
            <param name="x">The x component</param>
            <param name="y">The y component</param>
            <param name="z">The z component</param>
            <param name="w">The w component</param>
        </member>
        <member name="P:AtomicEngine.Quaternion.XYZ">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Quaternion.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Quaternion.X">
            <summary>
            Gets or sets the X component of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Quaternion.Y">
            <summary>
            Gets or sets the Y component of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Quaternion.Z">
            <summary>
            Gets or sets the Z component of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Quaternion.W">
            <summary>
            Gets or sets the W component of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Quaternion.IsNaN">
            <summary>
            Return whether is NaN.
            </summary>
        </member>
        <member name="M:AtomicEngine.Quaternion.ToAxisAngle(AtomicEngine.Vector3@,System.Single@)">
            <summary>
            Convert the current quaternion to axis angle representation
            </summary>
            <param name="axis">The resultant axis</param>
            <param name="angle">The resultant angle</param>
        </member>
        <member name="M:AtomicEngine.Quaternion.ToAxisAngle">
            <summary>
            Convert this instance to an axis-angle representation.
            </summary>
            <returns>A Vector4 that is the axis-angle representation of this quaternion.</returns>
        </member>
        <member name="P:AtomicEngine.Quaternion.Length">
            <summary>
            Gets the length (magnitude) of the quaternion.
            </summary>
            <seealso cref="P:AtomicEngine.Quaternion.LengthSquared"/>
        </member>
        <member name="P:AtomicEngine.Quaternion.LengthSquared">
            <summary>
            Gets the square of the quaternion length (magnitude).
            </summary>
        </member>
        <member name="M:AtomicEngine.Quaternion.Normalize">
            <summary>
            Scales the Quaternion to unit length.
            </summary>
        </member>
        <member name="M:AtomicEngine.Quaternion.Conjugate">
            <summary>
            Convert this quaternion to its conjugate
            </summary>
        </member>
        <member name="F:AtomicEngine.Quaternion.Identity">
            <summary>
            Defines the identity quaternion.
            </summary>
        </member>
        <member name="M:AtomicEngine.Quaternion.Add(AtomicEngine.Quaternion,AtomicEngine.Quaternion)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <returns>The result of the addition</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.Add(AtomicEngine.Quaternion@,AtomicEngine.Quaternion@,AtomicEngine.Quaternion@)">
            <summary>
            Add two quaternions
            </summary>
            <param name="left">The first operand</param>
            <param name="right">The second operand</param>
            <param name="result">The result of the addition</param>
        </member>
        <member name="M:AtomicEngine.Quaternion.Sub(AtomicEngine.Quaternion,AtomicEngine.Quaternion)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.Sub(AtomicEngine.Quaternion@,AtomicEngine.Quaternion@,AtomicEngine.Quaternion@)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The left instance.</param>
            <param name="right">The right instance.</param>
            <param name="result">The result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.Quaternion.Mult(AtomicEngine.Quaternion,AtomicEngine.Quaternion)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.Mult(AtomicEngine.Quaternion@,AtomicEngine.Quaternion@,AtomicEngine.Quaternion@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:AtomicEngine.Quaternion.Multiply(AtomicEngine.Quaternion,AtomicEngine.Quaternion)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.Multiply(AtomicEngine.Quaternion@,AtomicEngine.Quaternion@,AtomicEngine.Quaternion@)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:AtomicEngine.Quaternion.Multiply(AtomicEngine.Quaternion@,System.Single,AtomicEngine.Quaternion@)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <param name="result">A new instance containing the result of the calculation.</param>
        </member>
        <member name="M:AtomicEngine.Quaternion.Multiply(AtomicEngine.Quaternion,System.Single)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.Conjugate(AtomicEngine.Quaternion)">
            <summary>
            Get the conjugate of the given quaternion
            </summary>
            <param name="q">The quaternion</param>
            <returns>The conjugate of the given quaternion</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.Conjugate(AtomicEngine.Quaternion@,AtomicEngine.Quaternion@)">
            <summary>
            Get the conjugate of the given quaternion
            </summary>
            <param name="q">The quaternion</param>
            <param name="result">The conjugate of the given quaternion</param>
        </member>
        <member name="M:AtomicEngine.Quaternion.Invert(AtomicEngine.Quaternion)">
            <summary>
            Get the inverse of the given quaternion
            </summary>
            <param name="q">The quaternion to invert</param>
            <returns>The inverse of the given quaternion</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.Invert(AtomicEngine.Quaternion@,AtomicEngine.Quaternion@)">
            <summary>
            Get the inverse of the given quaternion
            </summary>
            <param name="q">The quaternion to invert</param>
            <param name="result">The inverse of the given quaternion</param>
        </member>
        <member name="M:AtomicEngine.Quaternion.Normalize(AtomicEngine.Quaternion)">
            <summary>
            Scale the given quaternion to unit length
            </summary>
            <param name="q">The quaternion to normalize</param>
            <returns>The normalized quaternion</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.Normalize(AtomicEngine.Quaternion@,AtomicEngine.Quaternion@)">
            <summary>
            Scale the given quaternion to unit length
            </summary>
            <param name="q">The quaternion to normalize</param>
            <param name="result">The normalized quaternion</param>
        </member>
        <member name="M:AtomicEngine.Quaternion.FromAxisAngle(AtomicEngine.Vector3,System.Single)">
            <summary>
            Build a quaternion from the given axis and angle
            </summary>
            <param name="axis">The axis to rotate about</param>
            <param name="angle">The rotation angle in radians</param>
            <returns></returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.Slerp(AtomicEngine.Quaternion,AtomicEngine.Quaternion,System.Single)">
            <summary>
            Do Spherical linear interpolation between two quaternions 
            </summary>
            <param name="q1">The first quaternion</param>
            <param name="q2">The second quaternion</param>
            <param name="blend">The blend factor</param>
            <returns>A smooth blend between the given quaternions</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.op_Addition(AtomicEngine.Quaternion,AtomicEngine.Quaternion)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.op_Subtraction(AtomicEngine.Quaternion,AtomicEngine.Quaternion)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.op_Multiply(AtomicEngine.Quaternion,AtomicEngine.Quaternion)">
            <summary>
            Multiplies two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.op_Multiply(AtomicEngine.Quaternion,System.Single)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.op_Multiply(System.Single,AtomicEngine.Quaternion)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.op_Multiply(AtomicEngine.Quaternion,AtomicEngine.Vector3)">
            <summary>
            Multiplies an instance by a vector3.
            </summary>
            <param name="quaternion">The instance.</param>
            <param name="vector">The vector.</param>
            <returns>A new instance containing the result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.op_Equality(AtomicEngine.Quaternion,AtomicEngine.Quaternion)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.op_Inequality(AtomicEngine.Quaternion,AtomicEngine.Quaternion)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equal right; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.ToString">
            <summary>
            Returns a System.String that represents the current Quaternion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.Equals(System.Object)">
            <summary>
            Compares this object instance to another object for equality. 
            </summary>
            <param name="other">The other object to be used in the comparison.</param>
            <returns>True if both objects are Quaternions of equal value. Otherwise it returns false.</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.GetHashCode">
            <summary>
            Provides the hash code for this object. 
            </summary>
            <returns>A hash code formed from the bitwise XOR of this objects members.</returns>
        </member>
        <member name="M:AtomicEngine.Quaternion.Equals(AtomicEngine.Quaternion)">
            <summary>
            Compares this Quaternion instance to another Quaternion for equality. 
            </summary>
            <param name="other">The other Quaternion to be used in the comparison.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="F:AtomicEngine.Rect.Min">
            Minimum vector.
        </member>
        <member name="F:AtomicEngine.Rect.Max">
            Maximum vector.
        </member>
        <member name="T:AtomicEngine.Vector2">
            <summary>Represents a 2D vector using two single-precision floating-point numbers.</summary>
            <remarks>
            The Vector2 structure is suitable for interoperation with unmanaged code requiring two consecutive floats.
            </remarks>
        </member>
        <member name="F:AtomicEngine.Vector2.X">
            <summary>
            The X component of the Vector2.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector2.Y">
            <summary>
            The Y component of the Vector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a new Vector2.
            </summary>
            <param name="x">The x coordinate of the net Vector2.</param>
            <param name="y">The y coordinate of the net Vector2.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.#ctor(AtomicEngine.Vector2)">
            <summary>
            Constructs a new Vector2 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.#ctor(AtomicEngine.Vector3)">
            <summary>
            Constructs a new Vector2 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from. Z is discarded.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.#ctor(AtomicEngine.Vector4)">
            <summary>
            Constructs a new Vector2 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from. Z and W are discarded.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Add(AtomicEngine.Vector2)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Add(AtomicEngine.Vector2@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Sub(AtomicEngine.Vector2)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Sub(AtomicEngine.Vector2@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="P:AtomicEngine.Vector2.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:AtomicEngine.Vector2.LengthFast"/>
            <seealso cref="P:AtomicEngine.Vector2.LengthSquared"/>
        </member>
        <member name="P:AtomicEngine.Vector2.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:AtomicEngine.Vector2.Length"/>
            <seealso cref="P:AtomicEngine.Vector2.LengthSquared"/>
        </member>
        <member name="P:AtomicEngine.Vector2.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:AtomicEngine.Vector2.Length"/>
            <seealso cref="P:AtomicEngine.Vector2.LengthFast"/>
        </member>
        <member name="P:AtomicEngine.Vector2.PerpendicularRight">
            <summary>
            Gets the perpendicular vector on the right side of this vector.
            </summary>
        </member>
        <member name="P:AtomicEngine.Vector2.PerpendicularLeft">
            <summary>
            Gets the perpendicular vector on the left side of this vector.
            </summary>
        </member>
        <member name="M:AtomicEngine.Vector2.Normalize">
            <summary>
            Scales the Vector2 to unit length.
            </summary>
        </member>
        <member name="M:AtomicEngine.Vector2.NormalizeFast">
            <summary>
            Scales the Vector2 to approximately unit length.
            </summary>
        </member>
        <member name="M:AtomicEngine.Vector2.Scale(System.Single,System.Single)">
            <summary>
            Scales the current Vector2 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Scale(AtomicEngine.Vector2)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Scale(AtomicEngine.Vector2@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:AtomicEngine.Vector2.UnitX">
            <summary>
            Defines a unit-length Vector2 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector2.UnitY">
            <summary>
            Defines a unit-length Vector2 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector2.Zero">
            <summary>
            Defines a zero-length Vector2.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector2.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector2.SizeInBytes">
            <summary>
            Defines the size of the Vector2 struct in bytes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Vector2.Sub(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Sub(AtomicEngine.Vector2@,AtomicEngine.Vector2@,AtomicEngine.Vector2@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Mult(AtomicEngine.Vector2,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Mult(AtomicEngine.Vector2@,System.Single,AtomicEngine.Vector2@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Div(AtomicEngine.Vector2,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Div(AtomicEngine.Vector2@,System.Single,AtomicEngine.Vector2@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Add(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Add(AtomicEngine.Vector2@,AtomicEngine.Vector2@,AtomicEngine.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Subtract(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Subtract(AtomicEngine.Vector2@,AtomicEngine.Vector2@,AtomicEngine.Vector2@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Multiply(AtomicEngine.Vector2,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Multiply(AtomicEngine.Vector2@,System.Single,AtomicEngine.Vector2@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Multiply(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Multiply(AtomicEngine.Vector2@,AtomicEngine.Vector2@,AtomicEngine.Vector2@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Divide(AtomicEngine.Vector2,System.Single)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Divide(AtomicEngine.Vector2@,System.Single,AtomicEngine.Vector2@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Divide(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Divide(AtomicEngine.Vector2@,AtomicEngine.Vector2@,AtomicEngine.Vector2@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector2.ComponentMin(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.ComponentMin(AtomicEngine.Vector2@,AtomicEngine.Vector2@,AtomicEngine.Vector2@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:AtomicEngine.Vector2.ComponentMax(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.ComponentMax(AtomicEngine.Vector2@,AtomicEngine.Vector2@,AtomicEngine.Vector2@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Min(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Max(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Clamp(AtomicEngine.Vector2,AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Clamp(AtomicEngine.Vector2@,AtomicEngine.Vector2@,AtomicEngine.Vector2@,AtomicEngine.Vector2@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Normalize(AtomicEngine.Vector2)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Normalize(AtomicEngine.Vector2@,AtomicEngine.Vector2@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:AtomicEngine.Vector2.NormalizeFast(AtomicEngine.Vector2)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.NormalizeFast(AtomicEngine.Vector2@,AtomicEngine.Vector2@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Dot(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Dot(AtomicEngine.Vector2@,AtomicEngine.Vector2@,System.Single@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:AtomicEngine.Vector2.Lerp(AtomicEngine.Vector2,AtomicEngine.Vector2,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Lerp(AtomicEngine.Vector2@,AtomicEngine.Vector2@,System.Single,AtomicEngine.Vector2@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:AtomicEngine.Vector2.BaryCentric(AtomicEngine.Vector2,AtomicEngine.Vector2,AtomicEngine.Vector2,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.BaryCentric(AtomicEngine.Vector2@,AtomicEngine.Vector2@,AtomicEngine.Vector2@,System.Single,System.Single,AtomicEngine.Vector2@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:AtomicEngine.Vector2.op_Addition(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Adds the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of addition.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.op_Subtraction(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Subtracts the specified instances.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>Result of subtraction.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.op_UnaryNegation(AtomicEngine.Vector2)">
            <summary>
            Negates the specified instance.
            </summary>
            <param name="vec">Operand.</param>
            <returns>Result of negation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.op_Multiply(AtomicEngine.Vector2,System.Single)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.op_Multiply(System.Single,AtomicEngine.Vector2)">
            <summary>
            Multiplies the specified instance by a scalar.
            </summary>
            <param name="scale">Left operand.</param>
            <param name="vec">Right operand.</param>
            <returns>Result of multiplication.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.op_Division(AtomicEngine.Vector2,System.Single)">
            <summary>
            Divides the specified instance by a scalar.
            </summary>
            <param name="vec">Left operand</param>
            <param name="scale">Right operand</param>
            <returns>Result of the division.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.op_Equality(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Compares the specified instances for equality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are equal; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.op_Inequality(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
            Compares the specified instances for inequality.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if both instances are not equal; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.ToString">
            <summary>
            Returns a System.String that represents the current Vector2.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicEngine.Vector2.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.Vector2.Equals(AtomicEngine.Vector2)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:AtomicEngine.Vector3">
            <summary>
            Represents a 3D vector using three single-precision floating-point numbers.
            </summary>
            <remarks>
            The Vector3 structure is suitable for interoperation with unmanaged code requiring three consecutive floats.
            </remarks>
        </member>
        <member name="F:AtomicEngine.Vector3.X">
            <summary>
            The X component of the Vector3.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector3.Y">
            <summary>
            The Y component of the Vector3.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector3.Z">
            <summary>
            The Z component of the Vector3.
            </summary>
        </member>
        <member name="P:AtomicEngine.Vector3.IsNaN">
            <summary>
            Return whether is NaN.
            </summary>
        </member>
        <member name="M:AtomicEngine.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Vector3.
            </summary>
            <param name="x">The x component of the Vector3.</param>
            <param name="y">The y component of the Vector3.</param>
            <param name="z">The z component of the Vector3.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.#ctor(AtomicEngine.Vector2)">
            <summary>
            Constructs a new Vector3 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.#ctor(AtomicEngine.Vector3)">
            <summary>
            Constructs a new Vector3 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.#ctor(AtomicEngine.Vector4)">
            <summary>
            Constructs a new Vector3 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Add(AtomicEngine.Vector3)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Add(AtomicEngine.Vector3@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Sub(AtomicEngine.Vector3)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Sub(AtomicEngine.Vector3@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="P:AtomicEngine.Vector3.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:AtomicEngine.Vector3.LengthFast"/>
            <seealso cref="P:AtomicEngine.Vector3.LengthSquared"/>
        </member>
        <member name="P:AtomicEngine.Vector3.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:AtomicEngine.Vector3.Length"/>
            <seealso cref="P:AtomicEngine.Vector3.LengthSquared"/>
        </member>
        <member name="P:AtomicEngine.Vector3.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:AtomicEngine.Vector3.Length"/>
            <seealso cref="P:AtomicEngine.Vector3.LengthFast"/>
        </member>
        <member name="M:AtomicEngine.Vector3.Normalize">
            <summary>
            Scales the Vector3 to unit length.
            </summary>
        </member>
        <member name="M:AtomicEngine.Vector3.NormalizeFast">
            <summary>
            Scales the Vector3 to approximately unit length.
            </summary>
        </member>
        <member name="M:AtomicEngine.Vector3.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Scales the current Vector3 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Scale(AtomicEngine.Vector3)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Scale(AtomicEngine.Vector3@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="F:AtomicEngine.Vector3.UnitX">
            <summary>
            Defines a unit-length Vector3 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector3.UnitY">
            <summary>
            Defines a unit-length Vector3 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector3.UnitZ">
            <summary>
            /// Defines a unit-length Vector3 that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector3.Zero">
            <summary>
            Defines a zero-length Vector3.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector3.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector3.Left">
            (-1,0,0) vector.
        </member>
        <member name="F:AtomicEngine.Vector3.Right">
            (1,0,0) vector.
        </member>
        <member name="F:AtomicEngine.Vector3.Up">
            (0,1,0) vector.
        </member>
        <member name="F:AtomicEngine.Vector3.Down">
            (0,-1,0) vector.
        </member>
        <member name="F:AtomicEngine.Vector3.Forward">
            (0,0,1) vector.
        </member>
        <member name="F:AtomicEngine.Vector3.Back">
            (0,0,-1) vector.
        </member>
        <member name="F:AtomicEngine.Vector3.SizeInBytes">
            <summary>
            Defines the size of the Vector3 struct in bytes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Vector3.Sub(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Sub(AtomicEngine.Vector3@,AtomicEngine.Vector3@,AtomicEngine.Vector3@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Mult(AtomicEngine.Vector3,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Mult(AtomicEngine.Vector3@,System.Single,AtomicEngine.Vector3@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Div(AtomicEngine.Vector3,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Div(AtomicEngine.Vector3@,System.Single,AtomicEngine.Vector3@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Add(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Add(AtomicEngine.Vector3@,AtomicEngine.Vector3@,AtomicEngine.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Subtract(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Subtract(AtomicEngine.Vector3@,AtomicEngine.Vector3@,AtomicEngine.Vector3@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Multiply(AtomicEngine.Vector3,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Multiply(AtomicEngine.Vector3@,System.Single,AtomicEngine.Vector3@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Multiply(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Multiply(AtomicEngine.Vector3@,AtomicEngine.Vector3@,AtomicEngine.Vector3@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Divide(AtomicEngine.Vector3,System.Single)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Divide(AtomicEngine.Vector3@,System.Single,AtomicEngine.Vector3@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Divide(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Divide(AtomicEngine.Vector3@,AtomicEngine.Vector3@,AtomicEngine.Vector3@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector3.ComponentMin(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.ComponentMin(AtomicEngine.Vector3@,AtomicEngine.Vector3@,AtomicEngine.Vector3@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:AtomicEngine.Vector3.ComponentMax(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.ComponentMax(AtomicEngine.Vector3@,AtomicEngine.Vector3@,AtomicEngine.Vector3@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Min(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Max(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Returns the Vector3 with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Clamp(AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Clamp(AtomicEngine.Vector3@,AtomicEngine.Vector3@,AtomicEngine.Vector3@,AtomicEngine.Vector3@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Normalize(AtomicEngine.Vector3)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Normalize(AtomicEngine.Vector3@,AtomicEngine.Vector3@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:AtomicEngine.Vector3.NormalizeFast(AtomicEngine.Vector3)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.NormalizeFast(AtomicEngine.Vector3@,AtomicEngine.Vector3@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Dot(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Dot(AtomicEngine.Vector3@,AtomicEngine.Vector3@,System.Single@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Cross(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Cross(AtomicEngine.Vector3@,AtomicEngine.Vector3@,AtomicEngine.Vector3@)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
            <param name="result">The cross product of the two inputs</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Lerp(AtomicEngine.Vector3,AtomicEngine.Vector3,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Lerp(AtomicEngine.Vector3@,AtomicEngine.Vector3@,System.Single,AtomicEngine.Vector3@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:AtomicEngine.Vector3.ClampedLerp(AtomicEngine.Vector3,AtomicEngine.Vector3,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.ClampedLerp(AtomicEngine.Vector3@,AtomicEngine.Vector3@,System.Single,AtomicEngine.Vector3@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:AtomicEngine.Vector3.BaryCentric(AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.Vector3,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.BaryCentric(AtomicEngine.Vector3@,AtomicEngine.Vector3@,AtomicEngine.Vector3@,System.Single,System.Single,AtomicEngine.Vector3@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:AtomicEngine.Vector3.TransformVector(AtomicEngine.Vector3,AtomicEngine.Matrix4)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.TransformVector(AtomicEngine.Vector3@,AtomicEngine.Matrix4@,AtomicEngine.Vector3@)">
            <summary>Transform a direction vector by the given Matrix
            Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
            </summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:AtomicEngine.Vector3.TransformNormal(AtomicEngine.Vector3,AtomicEngine.Matrix4)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.TransformNormal(AtomicEngine.Vector3@,AtomicEngine.Matrix4@,AtomicEngine.Vector3@)">
            <summary>Transform a Normal by the given Matrix</summary>
            <remarks>
            This calculates the inverse of the given matrix, use TransformNormalInverse if you
            already have the inverse to avoid this extra calculation
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:AtomicEngine.Vector3.TransformNormalInverse(AtomicEngine.Vector3,AtomicEngine.Matrix4)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <returns>The transformed normal</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.TransformNormalInverse(AtomicEngine.Vector3@,AtomicEngine.Matrix4@,AtomicEngine.Vector3@)">
            <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
            <remarks>
            This version doesn't calculate the inverse matrix.
            Use this version if you already have the inverse of the desired transform to hand
            </remarks>
            <param name="norm">The normal to transform</param>
            <param name="invMat">The inverse of the desired transformation</param>
            <param name="result">The transformed normal</param>
        </member>
        <member name="M:AtomicEngine.Vector3.TransformPosition(AtomicEngine.Vector3,AtomicEngine.Matrix4)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed position</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.TransformPosition(AtomicEngine.Vector3@,AtomicEngine.Matrix4@,AtomicEngine.Vector3@)">
            <summary>Transform a Position by the given Matrix</summary>
            <param name="pos">The position to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed position</param>
        </member>
        <member name="M:AtomicEngine.Vector3.Transform(AtomicEngine.Vector3,AtomicEngine.Matrix4)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Transform(AtomicEngine.Vector3@,AtomicEngine.Matrix4@,AtomicEngine.Vector4@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:AtomicEngine.Vector3.TransformPerspective(AtomicEngine.Vector3,AtomicEngine.Matrix4)">
            <summary>Transform a Vector3 by the given Matrix, and project the resulting Vector4 back to a Vector3</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.TransformPerspective(AtomicEngine.Vector3@,AtomicEngine.Matrix4@,AtomicEngine.Vector3@)">
            <summary>Transform a Vector3 by the given Matrix, and project the resulting Vector4 back to a Vector3</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="M:AtomicEngine.Vector3.CalculateAngle(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>Angle (in radians) between the vectors.</returns>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:AtomicEngine.Vector3.CalculateAngle(AtomicEngine.Vector3@,AtomicEngine.Vector3@,System.Single@)">
            <summary>Calculates the angle (in radians) between two vectors.</summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <param name="result">Angle (in radians) between the vectors.</param>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="P:AtomicEngine.Vector3.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2 with the X and Y components of this instance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Vector3.op_Addition(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.op_Subtraction(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.op_UnaryNegation(AtomicEngine.Vector3)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.op_Multiply(AtomicEngine.Vector3,System.Single)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.op_Multiply(System.Single,AtomicEngine.Vector3)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.op_Division(AtomicEngine.Vector3,System.Single)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.op_Equality(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.op_Inequality(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equa lright; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.ToString">
            <summary>
            Returns a System.String that represents the current Vector3.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicEngine.Vector3.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.Vector3.Equals(AtomicEngine.Vector3)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:AtomicEngine.Vector4">
            <summary>Represents a 4D vector using four single-precision floating-point numbers.</summary>
            <remarks>
            The Vector4 structure is suitable for interoperation with unmanaged code requiring four consecutive floats.
            </remarks>
        </member>
        <member name="F:AtomicEngine.Vector4.X">
            <summary>
            The X component of the Vector4.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector4.Y">
            <summary>
            The Y component of the Vector4.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector4.Z">
            <summary>
            The Z component of the Vector4.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector4.W">
            <summary>
            The W component of the Vector4.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector4.UnitX">
            <summary>
            Defines a unit-length Vector4 that points towards the X-axis.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector4.UnitY">
            <summary>
            Defines a unit-length Vector4 that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector4.UnitZ">
            <summary>
            Defines a unit-length Vector4 that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector4.UnitW">
            <summary>
            Defines a unit-length Vector4 that points towards the W-axis.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector4.Zero">
            <summary>
            Defines a zero-length Vector4.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector4.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:AtomicEngine.Vector4.SizeInBytes">
            <summary>
            Defines the size of the Vector4 struct in bytes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new Vector4.
            </summary>
            <param name="x">The x component of the Vector4.</param>
            <param name="y">The y component of the Vector4.</param>
            <param name="z">The z component of the Vector4.</param>
            <param name="w">The z component of the Vector4.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.#ctor(AtomicEngine.Vector2)">
            <summary>
            Constructs a new Vector4 from the given Vector2.
            </summary>
            <param name="v">The Vector2 to copy components from.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.#ctor(AtomicEngine.Vector3)">
            <summary>
            Constructs a new Vector4 from the given Vector3.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.#ctor(AtomicEngine.Vector3,System.Single)">
            <summary>
            Constructs a new Vector4 from the specified Vector3 and W component.
            </summary>
            <param name="v">The Vector3 to copy components from.</param>
            <param name="w">The W component of the new Vector4.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.#ctor(AtomicEngine.Vector4)">
            <summary>
            Constructs a new Vector4 from the given Vector4.
            </summary>
            <param name="v">The Vector4 to copy components from.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Add(AtomicEngine.Vector4)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Add(AtomicEngine.Vector4@)">
            <summary>Add the Vector passed as parameter to this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Sub(AtomicEngine.Vector4)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Sub(AtomicEngine.Vector4@)">
            <summary>Subtract the Vector passed as parameter from this instance.</summary>
            <param name="right">Right operand. This parameter is only read from.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Mult(System.Single)">
            <summary>Multiply this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Div(System.Single)">
            <summary>Divide this instance by a scalar.</summary>
            <param name="f">Scalar operand.</param>
        </member>
        <member name="P:AtomicEngine.Vector4.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="P:AtomicEngine.Vector4.LengthFast"/>
            <seealso cref="P:AtomicEngine.Vector4.LengthSquared"/>
        </member>
        <member name="P:AtomicEngine.Vector4.LengthFast">
            <summary>
            Gets an approximation of the vector length (magnitude).
            </summary>
            <remarks>
            This property uses an approximation of the square root function to calculate vector magnitude, with
            an upper error bound of 0.001.
            </remarks>
            <see cref="P:AtomicEngine.Vector4.Length"/>
            <seealso cref="P:AtomicEngine.Vector4.LengthSquared"/>
        </member>
        <member name="P:AtomicEngine.Vector4.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:AtomicEngine.Vector4.Length"/>
            <seealso cref="P:AtomicEngine.Vector4.LengthFast"/>
        </member>
        <member name="M:AtomicEngine.Vector4.Normalize">
            <summary>
            Scales the Vector4 to unit length.
            </summary>
        </member>
        <member name="M:AtomicEngine.Vector4.NormalizeFast">
            <summary>
            Scales the Vector4 to approximately unit length.
            </summary>
        </member>
        <member name="M:AtomicEngine.Vector4.Scale(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Scales the current Vector4 by the given amounts.
            </summary>
            <param name="sx">The scale of the X component.</param>
            <param name="sy">The scale of the Y component.</param>
            <param name="sz">The scale of the Z component.</param>
            <param name="sw">The scale of the Z component.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Scale(AtomicEngine.Vector4)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Scale(AtomicEngine.Vector4@)">
            <summary>Scales this instance by the given parameter.</summary>
            <param name="scale">The scaling of the individual components.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Sub(AtomicEngine.Vector4,AtomicEngine.Vector4)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Sub(AtomicEngine.Vector4@,AtomicEngine.Vector4@,AtomicEngine.Vector4@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Mult(AtomicEngine.Vector4,System.Single)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the multiplication</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Mult(AtomicEngine.Vector4@,System.Single,AtomicEngine.Vector4@)">
            <summary>
            Multiply a vector and a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the multiplication</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Div(AtomicEngine.Vector4,System.Single)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <returns>Result of the division</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Div(AtomicEngine.Vector4@,System.Single,AtomicEngine.Vector4@)">
            <summary>
            Divide a vector by a scalar
            </summary>
            <param name="a">Vector operand</param>
            <param name="f">Scalar operand</param>
            <param name="result">Result of the division</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Add(AtomicEngine.Vector4,AtomicEngine.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Add(AtomicEngine.Vector4@,AtomicEngine.Vector4@,AtomicEngine.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Subtract(AtomicEngine.Vector4,AtomicEngine.Vector4)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Subtract(AtomicEngine.Vector4@,AtomicEngine.Vector4@,AtomicEngine.Vector4@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Multiply(AtomicEngine.Vector4,System.Single)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Multiply(AtomicEngine.Vector4@,System.Single,AtomicEngine.Vector4@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Multiply(AtomicEngine.Vector4,AtomicEngine.Vector4)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Multiply(AtomicEngine.Vector4@,AtomicEngine.Vector4@,AtomicEngine.Vector4@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Divide(AtomicEngine.Vector4,System.Single)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Divide(AtomicEngine.Vector4@,System.Single,AtomicEngine.Vector4@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Divide(AtomicEngine.Vector4,AtomicEngine.Vector4)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Divide(AtomicEngine.Vector4@,AtomicEngine.Vector4@,AtomicEngine.Vector4@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Min(AtomicEngine.Vector4,AtomicEngine.Vector4)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Min(AtomicEngine.Vector4@,AtomicEngine.Vector4@,AtomicEngine.Vector4@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Max(AtomicEngine.Vector4,AtomicEngine.Vector4)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Max(AtomicEngine.Vector4@,AtomicEngine.Vector4@,AtomicEngine.Vector4@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Clamp(AtomicEngine.Vector4,AtomicEngine.Vector4,AtomicEngine.Vector4)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Clamp(AtomicEngine.Vector4@,AtomicEngine.Vector4@,AtomicEngine.Vector4@,AtomicEngine.Vector4@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Normalize(AtomicEngine.Vector4)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Normalize(AtomicEngine.Vector4@,AtomicEngine.Vector4@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:AtomicEngine.Vector4.NormalizeFast(AtomicEngine.Vector4)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.NormalizeFast(AtomicEngine.Vector4@,AtomicEngine.Vector4@)">
            <summary>
            Scale a vector to approximately unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Dot(AtomicEngine.Vector4,AtomicEngine.Vector4)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Dot(AtomicEngine.Vector4@,AtomicEngine.Vector4@,System.Single@)">
            <summary>
            Calculate the dot product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Lerp(AtomicEngine.Vector4,AtomicEngine.Vector4,System.Single)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Lerp(AtomicEngine.Vector4@,AtomicEngine.Vector4@,System.Single,AtomicEngine.Vector4@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:AtomicEngine.Vector4.BaryCentric(AtomicEngine.Vector4,AtomicEngine.Vector4,AtomicEngine.Vector4,System.Single,System.Single)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.BaryCentric(AtomicEngine.Vector4@,AtomicEngine.Vector4@,AtomicEngine.Vector4@,System.Single,System.Single,AtomicEngine.Vector4@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:AtomicEngine.Vector4.Transform(AtomicEngine.Vector4,AtomicEngine.Matrix4)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <returns>The transformed vector</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Transform(AtomicEngine.Vector4@,AtomicEngine.Matrix4@,AtomicEngine.Vector4@)">
            <summary>Transform a Vector by the given Matrix</summary>
            <param name="vec">The vector to transform</param>
            <param name="mat">The desired transformation</param>
            <param name="result">The transformed vector</param>
        </member>
        <member name="P:AtomicEngine.Vector4.Xy">
            <summary>
            Gets or sets an OpenTK.Vector2 with the X and Y components of this instance.
            </summary>
        </member>
        <member name="P:AtomicEngine.Vector4.Xyz">
            <summary>
            Gets or sets an OpenTK.Vector3 with the X, Y and Z components of this instance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Vector4.op_Addition(AtomicEngine.Vector4,AtomicEngine.Vector4)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.op_Subtraction(AtomicEngine.Vector4,AtomicEngine.Vector4)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.op_UnaryNegation(AtomicEngine.Vector4)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.op_Multiply(AtomicEngine.Vector4,System.Single)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.op_Multiply(System.Single,AtomicEngine.Vector4)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.op_Division(AtomicEngine.Vector4,System.Single)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.op_Equality(AtomicEngine.Vector4,AtomicEngine.Vector4)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.op_Inequality(AtomicEngine.Vector4,AtomicEngine.Vector4)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equa lright; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.op_Explicit(AtomicEngine.Vector4)~System.Single*">
            <summary>
            Returns a pointer to the first element of the specified instance.
            </summary>
            <param name="v">The instance.</param>
            <returns>A pointer to the first element of v.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.op_Explicit(AtomicEngine.Vector4)~System.IntPtr">
            <summary>
            Returns a pointer to the first element of the specified instance.
            </summary>
            <param name="v">The instance.</param>
            <returns>A pointer to the first element of v.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.ToString">
            <summary>
            Returns a System.String that represents the current Vector4.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AtomicEngine.Vector4.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:AtomicEngine.Vector4.Equals(AtomicEngine.Vector4)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:AtomicEngine.CrowdManager">
            <summary>
             Crowd manager scene component. Should be added only to the root scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.ApplyAttributes">
            <summary>
             Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Draw the agents' pathing debug data.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.DrawDebugGeometry(System.Boolean)">
            <summary>
             Add debug geometry to the debug renderer.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.SetCrowdTarget(AtomicEngine.Vector3,AtomicEngine.Node)">
            <summary>
             Set the crowd target position. The target position is set to all crowd agents found in the specified node. Defaulted to scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.SetCrowdVelocity(AtomicEngine.Vector3,AtomicEngine.Node)">
            <summary>
             Set the crowd move velocity. The move velocity is applied to all crowd agents found in the specified node. Defaulted to scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.ResetCrowdTarget(AtomicEngine.Node)">
            <summary>
             Reset any crowd target for all crowd agents found in the specified node. Defaulted to scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.SetMaxAgents(System.UInt32)">
            <summary>
             Set the maximum number of agents.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.SetMaxAgentRadius(System.Single)">
            <summary>
             Set the maximum radius of any agent.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.SetNavigationMesh(AtomicEngine.NavigationMesh)">
            <summary>
             Assigns the navigation mesh for the crowd.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.SetQueryFilterTypesAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Set all the query filter types configured in the crowd based on the corresponding attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.SetIncludeFlags(System.UInt32,System.UInt16)">
            <summary>
             Set the include flags for the specified query filter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.SetExcludeFlags(System.UInt32,System.UInt16)">
            <summary>
             Set the exclude flags for the specified query filter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.SetAreaCost(System.UInt32,System.UInt32,System.Single)">
            <summary>
             Set the cost of an area for the specified query filter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.SetObstacleAvoidanceTypesAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Set all the obstacle avoidance types configured in the crowd based on the corresponding attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetAgents(AtomicEngine.Node,System.Boolean)">
            <summary>
             Get all the crowd agent components in the specified node hierarchy. If the node is not specified then use scene node. When inCrowdFilter is set to true then only get agents that are in the crowd.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.FindNearestPoint(AtomicEngine.Vector3,System.Int32)">
            <summary>
             Find the nearest point on the navigation mesh to a given point using the crowd initialized query extent (based on maxAgentRadius) and the specified query filter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.MoveAlongSurface(AtomicEngine.Vector3,AtomicEngine.Vector3,System.Int32,System.Int32)">
            <summary>
             Try to move along the surface from one point to another using the crowd initialized query extent (based on maxAgentRadius) and the specified query filter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetRandomPoint(System.Int32)">
            <summary>
             Return a random point on the navigation mesh using the crowd initialized query extent (based on maxAgentRadius) and the specified query filter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetRandomPointInCircle(AtomicEngine.Vector3,System.Single,System.Int32)">
            <summary>
             Return a random point on the navigation mesh within a circle using the crowd initialized query extent (based on maxAgentRadius) and the specified query filter type. The circle radius is only a guideline and in practice the returned point may be further away.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetDistanceToWall(AtomicEngine.Vector3,System.Single,System.Int32)">
            <summary>
             Return distance to wall from a point using the crowd initialized query extent (based on maxAgentRadius) and the specified query filter type. Maximum search radius must be specified.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.Raycast(AtomicEngine.Vector3,AtomicEngine.Vector3,System.Int32)">
            <summary>
             Perform a walkability raycast on the navigation mesh between start and end using the crowd initialized query extent (based on maxAgentRadius) and the specified query filter type. Return the point where a wall was hit, or the end point if no walls.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetMaxAgents">
            <summary>
             Get the maximum number of agents.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetMaxAgentRadius">
            <summary>
             Get the maximum radius of any agent.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetNavigationMesh">
            <summary>
             Get the Navigation mesh assigned to the crowd.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetNumQueryFilterTypes">
            <summary>
             Get the number of configured query filter types.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetNumAreas(System.UInt32)">
            <summary>
             Get the number of configured area in the specified query filter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetQueryFilterTypesAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Return all the filter types configured in the crowd as attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetIncludeFlags(System.UInt32)">
            <summary>
             Get the include flags for the specified query filter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetExcludeFlags(System.UInt32)">
            <summary>
             Get the exclude flags for the specified query filter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetAreaCost(System.UInt32,System.UInt32)">
            <summary>
             Get the cost of an area for the specified query filter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetNumObstacleAvoidanceTypes">
            <summary>
             Get the number of configured obstacle avoidance types.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdManager.GetObstacleAvoidanceTypesAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Return all the obstacle avoidance types configured in the crowd as attribute.
            </summary>
        </member>
        <member name="T:AtomicEngine.NavigationMesh">
            <summary>
             Navigation mesh component. Collects the navigation geometry from child nodes with the Navigable component and responds to path queries.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetTileSize(System.Int32)">
            <summary>
             Set tile size.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetCellSize(System.Single)">
            <summary>
             Set cell size.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetCellHeight(System.Single)">
            <summary>
             Set cell height.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetAgentHeight(System.Single)">
            <summary>
             Set navigation agent height.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetAgentRadius(System.Single)">
            <summary>
             Set navigation agent radius.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetAgentMaxClimb(System.Single)">
            <summary>
             Set navigation agent max vertical climb.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetAgentMaxSlope(System.Single)">
            <summary>
             Set navigation agent max slope.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetRegionMinSize(System.Single)">
            <summary>
             Set region minimum size.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetRegionMergeSize(System.Single)">
            <summary>
             Set region merge size.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetEdgeMaxLength(System.Single)">
            <summary>
             Set edge max length.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetEdgeMaxError(System.Single)">
            <summary>
             Set edge max error.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetDetailSampleDistance(System.Single)">
            <summary>
             Set detail sampling distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetDetailSampleMaxError(System.Single)">
            <summary>
             Set detail sampling maximum error.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetPadding(AtomicEngine.Vector3)">
            <summary>
             Set padding of the navigation mesh bounding box. Having enough padding allows to add geometry on the extremities of the navigation mesh when doing partial rebuilds.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetAreaCost(System.UInt32,System.Single)">
            <summary>
             Set the cost of an area.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.Build">
            <summary>
             Rebuild the navigation mesh. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.Build(AtomicEngine.BoundingBox)">
            <summary>
             Rebuild part of the navigation mesh contained by the world-space bounding box. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.FindNearestPoint(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
             Find the nearest point on the navigation mesh to a given point. Extents specifies how far out from the specified point to check along each axis.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.MoveAlongSurface(AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.Vector3,System.Int32)">
            <summary>
             Try to move along the surface from one point to another.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetRandomPoint">
            <summary>
             Return a random point on the navigation mesh.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetRandomPointInCircle(AtomicEngine.Vector3,System.Single,AtomicEngine.Vector3)">
            <summary>
             Return a random point on the navigation mesh within a circle. The circle radius is only a guideline and in practice the returned point may be further away.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetDistanceToWall(AtomicEngine.Vector3,System.Single,AtomicEngine.Vector3)">
            <summary>
             Return distance to wall from a point. Maximum search radius must be specified.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.Raycast(AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
             Perform a walkability raycast on the navigation mesh between start and end and return the point where a wall was hit, or the end point if no walls.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.DrawDebugGeometry(System.Boolean)">
            <summary>
             Add debug geometry to the debug renderer.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetMeshName">
            <summary>
             Return the given name of this navigation mesh.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetMeshName(System.String)">
            <summary>
             Set the name of this navigation mesh.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetTileSize">
            <summary>
             Return tile size.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetCellSize">
            <summary>
             Return cell size.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetCellHeight">
            <summary>
             Return cell height.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetAgentHeight">
            <summary>
             Return navigation agent height.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetAgentRadius">
            <summary>
             Return navigation agent radius.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetAgentMaxClimb">
            <summary>
             Return navigation agent max vertical climb.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetAgentMaxSlope">
            <summary>
             Return navigation agent max slope.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetRegionMinSize">
            <summary>
             Return region minimum size.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetRegionMergeSize">
            <summary>
             Return region merge size.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetEdgeMaxLength">
            <summary>
             Return edge max length.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetEdgeMaxError">
            <summary>
             Return edge max error.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetDetailSampleDistance">
            <summary>
             Return detail sampling distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetDetailSampleMaxError">
            <summary>
             Return detail sampling maximum error.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetPadding">
            <summary>
             Return navigation mesh bounding box padding.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetAreaCost(System.UInt32)">
            <summary>
             Get the current cost of an area
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.IsInitialized">
            <summary>
             Return whether has been initialized with valid navigation data.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetBoundingBox">
            <summary>
             Return local space bounding box of the navigation mesh.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetWorldBoundingBox">
            <summary>
             Return world space bounding box of the navigation mesh.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetNumTiles">
            <summary>
             Return number of tiles.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetPartitionType(AtomicEngine.NavmeshPartitionType)">
            <summary>
             Set the partition type used for polygon generation.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetPartitionType">
            <summary>
             Return Partition Type.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetDrawOffMeshConnections(System.Boolean)">
            <summary>
             Draw debug geometry for OffMeshConnection components.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetDrawOffMeshConnections">
            <summary>
             Return whether to draw OffMeshConnection components.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.SetDrawNavAreas(System.Boolean)">
            <summary>
             Draw debug geometry for NavArea components.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavigationMesh.GetDrawNavAreas">
            <summary>
             Return whether to draw NavArea components.
            </summary>
        </member>
        <member name="T:AtomicEngine.PhysicsWorld">
            <summary>
             Physics simulation world component. Should be added only to the root scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.setDebugMode(System.Int32)">
            <summary>
             Set debug draw flags.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.getDebugMode">
            <summary>
             Return debug draw flags.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.Update(System.Single)">
            <summary>
             Step the simulation forward.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.UpdateCollisions">
            <summary>
             Refresh collisions only without updating dynamics.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.SetFps(System.Int32)">
            <summary>
             Set simulation substeps per second.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.SetGravity(AtomicEngine.Vector3)">
            <summary>
             Set gravity.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.SetMaxSubSteps(System.Int32)">
            <summary>
             Set maximum number of physics substeps per frame. 0 (default) is unlimited. Positive values cap the amount. Use a negative value to enable an adaptive timestep. This may cause inconsistent physics behavior.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.SetNumIterations(System.Int32)">
            <summary>
             Set number of constraint solver iterations.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.SetUpdateEnabled(System.Boolean)">
            <summary>
             Enable or disable automatic physics simulation during scene update. Enabled by default.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.SetInterpolation(System.Boolean)">
            <summary>
             Set whether to interpolate between simulation steps.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.SetInternalEdge(System.Boolean)">
            <summary>
             Set whether to use Bullet's internal edge utility for trimesh collisions. Disabled by default.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.SetSplitImpulse(System.Boolean)">
            <summary>
             Set split impulse collision mode. This is more accurate, but slower. Disabled by default.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.SetMaxNetworkAngularVelocity(System.Single)">
            <summary>
             Set maximum angular velocity for network replication.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.RemoveCachedGeometry(AtomicEngine.Model)">
            <summary>
             Invalidate cached collision geometry for a model.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.GetRigidBodies(AtomicEngine.Vector{AtomicEngine.RigidBody},AtomicEngine.BoundingBox,System.UInt32)">
            <summary>
             Return rigid bodies by a box query.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.GetRigidBodies(AtomicEngine.Vector{AtomicEngine.RigidBody},AtomicEngine.RigidBody)">
            <summary>
             Return rigid bodies by contact test with the specified body. It needs to be active to return all contacts reliably.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.GetCollidingBodies(AtomicEngine.Vector{AtomicEngine.RigidBody},AtomicEngine.RigidBody)">
            <summary>
             Return rigid bodies that have been in collision with the specified body on the last simulation step. Only returns collisions that were sent as events (depends on collision event mode) and excludes e.g. static-static collisions.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.GetGravity">
            <summary>
             Return gravity.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.GetMaxSubSteps">
            <summary>
             Return maximum number of physics substeps per frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.GetNumIterations">
            <summary>
             Return number of constraint solver iterations.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.IsUpdateEnabled">
            <summary>
             Return whether physics world will automatically simulate during scene update.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.GetInterpolation">
            <summary>
             Return whether interpolation between simulation steps is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.GetInternalEdge">
            <summary>
             Return whether Bullet's internal edge utility for trimesh collisions is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.GetSplitImpulse">
            <summary>
             Return whether split impulse collision mode is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.GetFps">
            <summary>
             Return simulation steps per second.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.GetMaxNetworkAngularVelocity">
            <summary>
             Return maximum angular velocity for network replication.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.AddRigidBody(AtomicEngine.RigidBody)">
            <summary>
             Add a rigid body to keep track of. Called by RigidBody.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.RemoveRigidBody(AtomicEngine.RigidBody)">
            <summary>
             Remove a rigid body. Called by RigidBody.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.AddCollisionShape(AtomicEngine.CollisionShape)">
            <summary>
             Add a collision shape to keep track of. Called by CollisionShape.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.RemoveCollisionShape(AtomicEngine.CollisionShape)">
            <summary>
             Remove a collision shape. Called by CollisionShape.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.AddConstraint(AtomicEngine.Constraint)">
            <summary>
             Add a constraint to keep track of. Called by Constraint.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.RemoveConstraint(AtomicEngine.Constraint)">
            <summary>
             Remove a constraint. Called by Constraint.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.DrawDebugGeometry(System.Boolean)">
            <summary>
             Add debug geometry to the debug renderer.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.SetDebugRenderer(AtomicEngine.DebugRenderer)">
            <summary>
             Set debug renderer to use. Called both by PhysicsWorld itself and physics components.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.SetDebugDepthTest(System.Boolean)">
            <summary>
             Set debug geometry depth test mode. Called both by PhysicsWorld itself and physics components.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.CleanupGeometryCache">
            <summary>
             Clean up the geometry cache.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.SetApplyingTransforms(System.Boolean)">
            <summary>
             Set node dirtying to be disregarded.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.IsApplyingTransforms">
            <summary>
             Return whether node dirtying should be disregarded.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld.IsSimulating">
            <summary>
             Return whether is currently inside the Bullet substep loop.
            </summary>
        </member>
        <member name="T:AtomicEngine.ResourceCache">
            <summary>
             %Resource cache subsystem. Loads resources on demand and stores them for later access.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.AddResourceDir(System.String,System.UInt32)">
            <summary>
             Add a resource load directory. Optional priority parameter which will control search order.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.AddPackageFile(AtomicEngine.PackageFile,System.UInt32)">
            <summary>
             Add a package file for loading resources from. Optional priority parameter which will control search order.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.AddPackageFile(System.String,System.UInt32)">
            <summary>
             Add a package file for loading resources from by name. Optional priority parameter which will control search order.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.AddManualResource(AtomicEngine.Resource)">
            <summary>
             Add a manually created resource. Must be uniquely named.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.RemoveResourceDir(System.String)">
            <summary>
             Remove a resource load directory.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.RemovePackageFile(AtomicEngine.PackageFile,System.Boolean,System.Boolean)">
            <summary>
             Remove a package file. Optionally release the resources loaded from it.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.RemovePackageFile(System.String,System.Boolean,System.Boolean)">
            <summary>
             Remove a package file by name. Optionally release the resources loaded from it.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.ReleaseResource(AtomicEngine.StringHash,System.String,System.Boolean)">
            <summary>
             Release a resource by name.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.ReleaseResources(AtomicEngine.StringHash,System.Boolean)">
            <summary>
             Release all resources of a specific type.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.ReleaseResources(AtomicEngine.StringHash,System.String,System.Boolean)">
            <summary>
             Release resources of a specific type and partial name.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.ReleaseAllResources(System.Boolean)">
            <summary>
             Release all resources. When called with the force flag false, releases all currently unused resources.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.ReloadResource(AtomicEngine.Resource)">
            <summary>
             Reload a resource. Return true on success. The resource will not be removed from the cache in case of failure.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.ReloadResourceWithDependencies(System.String)">
            <summary>
             Reload a resource based on filename. Causes also reload of dependent resources if necessary.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.SetMemoryBudget(AtomicEngine.StringHash,System.Int64)">
            <summary>
             Set memory budget for a specific resource type, default 0 is unlimited.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.SetAutoReloadResources(System.Boolean)">
            <summary>
             Enable or disable automatic reloading of resources as files are modified. Default false.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.SetReturnFailedResources(System.Boolean)">
            <summary>
             Enable or disable returning resources that failed to load. Default false. This may be useful in editing to not lose resource ref attributes.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.SetSearchPackagesFirst(System.Boolean)">
            <summary>
             Define whether when getting resources should check package files or directories first. True for packages, false for directories.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.SetFinishBackgroundResourcesMs(System.Int32)">
            <summary>
             Set how many milliseconds maximum per frame to spend on finishing background loaded resources.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetFile(System.String,System.Boolean,AtomicEngine.StringHash)">
            <summary>
             Open and return a file from the resource load paths or from inside a package file. If not found, use a fallback search with absolute path. Return null if fails. Can be called from outside the main thread.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetResource(AtomicEngine.StringHash,System.String,System.Boolean)">
            <summary>
             Return a resource by type and name. Load if not loaded yet. Return null if not found or if fails, unless SetReturnFailedResources(true) has been called. Can be called only from the main thread.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetTempResource(AtomicEngine.StringHash,System.String,System.Boolean)">
            <summary>
             Load a resource without storing it in the resource cache. Return null if not found or if fails. Can be called from outside the main thread if the resource itself is safe to load completely (it does not possess for example GPU data.)
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.BackgroundLoadResource(AtomicEngine.StringHash,System.String,System.Boolean,AtomicEngine.Resource)">
            <summary>
             Background load a resource. An event will be sent when complete. Return true if successfully stored to the load queue, false if eg. already exists. Can be called from outside the main thread.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetNumBackgroundLoadResources">
            <summary>
             Return number of pending background-loaded resources.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetResources(AtomicEngine.Vector{AtomicEngine.Resource},AtomicEngine.StringHash)">
            <summary>
             Return all loaded resources of a specific type.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.ResourceCache.GetExistingResource(AtomicEngine.StringHash,System.String)" -->
        <member name="M:AtomicEngine.ResourceCache.GetPackageFiles">
            <summary>
             Return added package files.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.Exists(System.String)">
            <summary>
             Return whether a file exists by name.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetMemoryBudget(AtomicEngine.StringHash)">
            <summary>
             Return memory budget for a resource type.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetMemoryUse(AtomicEngine.StringHash)">
            <summary>
             Return total memory use for a resource type.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetTotalMemoryUse">
            <summary>
             Return total memory use for all resources.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetResourceFileName(System.String)">
            <summary>
             Return full absolute file name of resource if possible.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetAutoReloadResources">
            <summary>
             Return whether automatic resource reloading is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetReturnFailedResources">
            <summary>
             Return whether resources that failed to load are returned.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetSearchPackagesFirst">
            <summary>
             Return whether when getting resources should check package files or directories first.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetFinishBackgroundResourcesMs">
            <summary>
             Return how many milliseconds maximum to spend on finishing background loaded resources.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetPreferredResourceDir(System.String)">
            <summary>
             Return either the path itself or its parent, based on which of them has recognized resource subdirectories.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.SanitateResourceName(System.String)">
            <summary>
             Remove unsupported constructs from the resource name to prevent ambiguity, and normalize absolute filename to resource path relative if possible.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.SanitateResourceDirName(System.String)">
            <summary>
             Remove unnecessary constructs from a resource directory name and ensure it to be an absolute path.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.StoreResourceDependency(AtomicEngine.Resource,System.String)">
            <summary>
             Store a dependency for a resource. If a dependency file changes, the resource will be reloaded.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.ResetDependencies(AtomicEngine.Resource)">
            <summary>
             Reset dependencies for a resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.PrintMemoryUsage">
            <summary>
             Returns a formatted string containing the memory actively used.
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetNumResourceDirs">
            <summary>
             Get the number of resource directories
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.GetResourceDir(System.UInt32)">
            <summary>
             Get resource directory at a given index
            </summary>
        </member>
        <member name="M:AtomicEngine.ResourceCache.Scan(System.String,System.String,System.UInt32,System.Boolean)">
            <summary>
             Scan specified files, returning them as an iterator
            </summary>
        </member>
        <member name="T:AtomicEngine.ResourceNameIterator">
            <summary>
             Helper class to expose resource iteration to script
            </summary>
        </member>
        <member name="T:AtomicEngine.Component">
            <summary>
             Base class for components. Components can be created to scene nodes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.Save(AtomicEngine.Serializer)">
            <summary>
             Save as binary data. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.MarkNetworkUpdate">
            <summary>
             Mark for attribute check on the next network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.GetDependencyNodes(AtomicEngine.Vector{AtomicEngine.Node})">
            <summary>
             Return the depended on nodes to order network updates.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.SetEnabled(System.Boolean)">
            <summary>
             Set enabled/disabled state.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.Remove">
            <summary>
             Remove from the scene node. If no other shared pointer references exist, causes immediate deletion.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.GetID">
            <summary>
             Return ID.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.GetNode">
            <summary>
             Return scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.GetScene">
            <summary>
             Return the scene the node belongs to.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.IsEnabled">
            <summary>
             Return whether is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.IsEnabledEffective">
            <summary>
             Return whether is effectively enabled (node is also enabled.)
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.GetComponent(AtomicEngine.StringHash)">
            <summary>
             Return component in the same scene node by type. If there are several, returns the first.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.GetComponents(AtomicEngine.Vector{AtomicEngine.Component},AtomicEngine.StringHash)">
            <summary>
             Return components in the same scene node by type.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.PrepareNetworkUpdate">
            <summary>
             Prepare network update by comparing attributes and marking replication states dirty as necessary.
            </summary>
        </member>
        <member name="M:AtomicEngine.Component.CleanupConnection(AtomicEngine.Connection)">
            <summary>
             Clean up all references to a network connection that is about to be removed.
            </summary>
        </member>
        <member name="M:AtomicEngine.CSComponent.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change. Changes update event subscription.
            </summary>
        </member>
        <member name="P:AtomicEngine.InspectorAttribute.ArraySize">
             <summary>
            Specify a fixed array size for field 
             </summary>
        </member>
        <member name="P:AtomicEngine.InspectorAttribute.Tooltip">
            <summary>
            Tooltip which will be displayed in editor 
            </summary>
        </member>
        <member name="T:AtomicEngine.Node">
            <summary>
             %Scene node that may contain components and child nodes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.Load(AtomicEngine.Deserializer,System.Boolean)">
            <summary>
             Load from binary data. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.Save(AtomicEngine.Serializer)">
            <summary>
             Save as binary data. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.ApplyAttributes">
            <summary>
             Apply attribute changes that can not be applied immediately recursively to child nodes and components.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SaveDefaultAttributes">
            <summary>
             Return whether should save default-valued attributes into XML. Always save node transforms for readability, even if identity.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.MarkNetworkUpdate">
            <summary>
             Mark for attribute check on the next network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SaveXML(AtomicEngine.Serializer,System.String)">
            <summary>
             Save to an XML file. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SaveJSON(AtomicEngine.Serializer,System.String)">
            <summary>
             Save to a JSON file. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetName(System.String)">
            <summary>
             Set name of the scene node. Names are not required to be unique.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.AddTag(System.String)">
            <summary>
             Add a tag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.AddTags(System.String,System.String)">
            <summary>
             Add tags with the specified separator, by default ;
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.RemoveTag(System.String)">
            <summary>
             Remove tag. Return true if existed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.RemoveAllTags">
            <summary>
             Remove all tags.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetPosition(AtomicEngine.Vector3)">
            <summary>
             Set position in parent space. If the scene node is on the root level (is child of the scene itself), this is same as world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetPosition2D(AtomicEngine.Vector2)">
            <summary>
             Set position in parent space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetPosition2D(System.Single,System.Single)">
            <summary>
             Set position in parent space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetRotation(AtomicEngine.Quaternion)">
            <summary>
             Set rotation in parent space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetRotation2D(System.Single)">
            <summary>
             Set rotation in parent space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetDirection(AtomicEngine.Vector3)">
            <summary>
             Set forward direction in parent space. Positive Z axis equals identity rotation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetScale(System.Single)">
            <summary>
             Set uniform scale in parent space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetScale(AtomicEngine.Vector3)">
            <summary>
             Set scale in parent space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetScale2D(AtomicEngine.Vector2)">
            <summary>
             Set scale in parent space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetScale2D(System.Single,System.Single)">
            <summary>
             Set scale in parent space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetTransform(AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Set both position and rotation in parent space as an atomic operation. This is faster than setting position and rotation separately.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetTransform(AtomicEngine.Vector3,AtomicEngine.Quaternion,System.Single)">
            <summary>
             Set both position, rotation and uniform scale in parent space as an atomic operation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetTransform(AtomicEngine.Vector3,AtomicEngine.Quaternion,AtomicEngine.Vector3)">
            <summary>
             Set both position, rotation and scale in parent space as an atomic operation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetTransform2D(AtomicEngine.Vector2,System.Single)">
            <summary>
             Set both position and rotation in parent space as an atomic operation (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetTransform2D(AtomicEngine.Vector2,System.Single,System.Single)">
            <summary>
             Set both position, rotation and uniform scale in parent space as an atomic operation (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetTransform2D(AtomicEngine.Vector2,System.Single,AtomicEngine.Vector2)">
            <summary>
             Set both position, rotation and scale in parent space as an atomic operation (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldPosition(AtomicEngine.Vector3)">
            <summary>
             Set position in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldPosition2D(AtomicEngine.Vector2)">
            <summary>
             Set position in world space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldPosition2D(System.Single,System.Single)">
            <summary>
             Set position in world space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldRotation(AtomicEngine.Quaternion)">
            <summary>
             Set rotation in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldRotation2D(System.Single)">
            <summary>
             Set rotation in world space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldDirection(AtomicEngine.Vector3)">
            <summary>
             Set forward direction in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldScale(System.Single)">
            <summary>
             Set uniform scale in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldScale(AtomicEngine.Vector3)">
            <summary>
             Set scale in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldScale2D(AtomicEngine.Vector2)">
            <summary>
             Set scale in world space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldScale2D(System.Single,System.Single)">
            <summary>
             Set scale in world space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldTransform(AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Set both position and rotation in world space as an atomic operation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldTransform(AtomicEngine.Vector3,AtomicEngine.Quaternion,System.Single)">
            <summary>
             Set both position, rotation and uniform scale in world space as an atomic operation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldTransform(AtomicEngine.Vector3,AtomicEngine.Quaternion,AtomicEngine.Vector3)">
            <summary>
             Set both position, rotation and scale in world space as an atomic opration.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldTransform2D(AtomicEngine.Vector2,System.Single)">
            <summary>
             Set both position and rotation in world space as an atomic operation (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldTransform2D(AtomicEngine.Vector2,System.Single,System.Single)">
            <summary>
             Set both position, rotation and uniform scale in world space as an atomic operation (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetWorldTransform2D(AtomicEngine.Vector2,System.Single,AtomicEngine.Vector2)">
            <summary>
             Set both position, rotation and scale in world space as an atomic opration (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.Translate(AtomicEngine.Vector3,AtomicEngine.TransformSpace)">
            <summary>
             Move the scene node in the chosen transform space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.Translate2D(AtomicEngine.Vector2,AtomicEngine.TransformSpace)">
            <summary>
             Move the scene node in the chosen transform space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.Rotate(AtomicEngine.Quaternion,AtomicEngine.TransformSpace)">
            <summary>
             Rotate the scene node in the chosen transform space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.Rotate2D(System.Single,AtomicEngine.TransformSpace)">
            <summary>
             Rotate the scene node in the chosen transform space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.RotateAround(AtomicEngine.Vector3,AtomicEngine.Quaternion,AtomicEngine.TransformSpace)">
            <summary>
             Rotate around a point in the chosen transform space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.RotateAround2D(AtomicEngine.Vector2,System.Single,AtomicEngine.TransformSpace)">
            <summary>
             Rotate around a point in the chosen transform space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.Pitch(System.Single,AtomicEngine.TransformSpace)">
            <summary>
             Rotate around the X axis.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.Yaw(System.Single,AtomicEngine.TransformSpace)">
            <summary>
             Rotate around the Y axis.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.Roll(System.Single,AtomicEngine.TransformSpace)">
            <summary>
             Rotate around the Z axis.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.LookAt(AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.TransformSpace)">
            <summary>
             Look at a target position in the chosen transform space. Note that the up vector is always specified in world space. Return true if successful, or false if resulted in an illegal rotation, in which case the current rotation remains.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetEnabled(System.Boolean)">
            <summary>
             Set enabled/disabled state without recursion. Components in a disabled node become effectively disabled regardless of their own enable/disable state.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetDeepEnabled(System.Boolean)">
            <summary>
             Set enabled state on self and child nodes. Nodes' own enabled state is remembered (IsEnabledSelf) and can be restored.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.ResetDeepEnabled">
            <summary>
             Reset enabled state to the node's remembered state prior to calling SetDeepEnabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetEnabledRecursive(System.Boolean)">
            <summary>
             Set enabled state on self and child nodes. Unlike SetDeepEnabled this does not remember the nodes' own enabled state, but overwrites it.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetOwner(AtomicEngine.Connection)">
            <summary>
             Set owner connection for networking.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.MarkDirty">
            <summary>
             Mark node and child nodes to need world transform recalculation. Notify listener components.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.CreateChild(System.String,AtomicEngine.CreateMode,System.UInt32)">
            <summary>
             Create a child scene node (with specified ID if provided).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.AddChild(AtomicEngine.Node,System.UInt32)">
            <summary>
             Add a child scene node at a specific index. If index is not explicitly specified or is greater than current children size, append the new child at the end.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.RemoveChild(AtomicEngine.Node)">
            <summary>
             Remove a child scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.RemoveAllChildren">
            <summary>
             Remove all child scene nodes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.RemoveChildren(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Remove child scene nodes that match criteria.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.CreateComponent(AtomicEngine.StringHash,AtomicEngine.CreateMode,System.UInt32)">
            <summary>
             Create a component to this node (with specified ID if provided).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetOrCreateComponent(AtomicEngine.StringHash,AtomicEngine.CreateMode,System.UInt32)">
            <summary>
             Create a component to this node if it does not exist already.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.CloneComponent(AtomicEngine.Component,System.UInt32)">
            <summary>
             Clone a component from another node using its create mode. Return the clone if successful or null on failure.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.CloneComponent(AtomicEngine.Component,AtomicEngine.CreateMode,System.UInt32)">
            <summary>
             Clone a component from another node and specify the create mode. Return the clone if successful or null on failure.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.RemoveComponent(AtomicEngine.Component)">
            <summary>
             Remove a component from this node.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.RemoveComponent(AtomicEngine.StringHash)">
            <summary>
             Remove the first component of specific type from this node.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.RemoveComponents(System.Boolean,System.Boolean)">
            <summary>
             Remove components that match criteria.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.RemoveComponents(AtomicEngine.StringHash)">
            <summary>
             Remove all components of specific type.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.RemoveAllComponents">
            <summary>
             Remove all components from this node.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.ReorderComponent(AtomicEngine.Component,System.UInt32)">
            <summary>
             Adjust index order of an existing component in this node.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.Clone(AtomicEngine.CreateMode)">
            <summary>
             Clone scene node, components and child nodes. Return the clone.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.Remove">
            <summary>
             Remove from the parent node. If no other shared pointer references exist, causes immediate deletion.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetParent(AtomicEngine.Node)">
            <summary>
             Assign to a new parent scene node. Retains the world transform.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.AddListener(AtomicEngine.Component)">
            <summary>
             Add listener component that is notified of node being dirtied. Can either be in the same node or another.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.RemoveListener(AtomicEngine.Component)">
            <summary>
             Remove listener component.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetID">
            <summary>
             Return ID.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetName">
            <summary>
             Return name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetNameHash">
            <summary>
             Return name hash.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.HasTag(System.String)">
            <summary>
             Return whether has a specific tag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetParent">
            <summary>
             Return parent scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetScene">
            <summary>
             Return scene.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.IsEnabled">
            <summary>
             Return whether is enabled. Disables nodes effectively disable all their components.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.IsEnabledSelf">
            <summary>
             Returns the node's last own enabled state. May be different than the value returned by IsEnabled when SetDeepEnabled has been used.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetOwner">
            <summary>
             Return owner connection in networking.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetPosition">
            <summary>
             Return position in parent space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetPosition2D">
            <summary>
             Return position in parent space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetRotation">
            <summary>
             Return rotation in parent space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetRotation2D">
            <summary>
             Return rotation in parent space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetDirection">
            <summary>
             Return forward direction in parent space. Positive Z axis equals identity rotation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetUp">
            <summary>
             Return up direction in parent space. Positive Y axis equals identity rotation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetRight">
            <summary>
             Return right direction in parent space. Positive X axis equals identity rotation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetScale">
            <summary>
             Return scale in parent space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetScale2D">
            <summary>
             Return scale in parent space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetWorldPosition">
            <summary>
             Return position in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetWorldPosition2D">
            <summary>
             Return position in world space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetWorldRotation">
            <summary>
             Return rotation in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetWorldRotation2D">
            <summary>
             Return rotation in world space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetWorldDirection">
            <summary>
             Return direction in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetWorldUp">
            <summary>
             Return node's up vector in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetWorldRight">
            <summary>
             Return node's right vector in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetWorldScale">
            <summary>
             Return scale in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetWorldScale2D">
            <summary>
             Return scale in world space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.LocalToWorld(AtomicEngine.Vector3)">
            <summary>
             Convert a local space position to world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.LocalToWorld(AtomicEngine.Vector4)">
            <summary>
             Convert a local space position or rotation to world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.LocalToWorld2D(AtomicEngine.Vector2)">
            <summary>
             Convert a local space position or rotation to world space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.WorldToLocal(AtomicEngine.Vector3)">
            <summary>
             Convert a world space position to local space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.WorldToLocal(AtomicEngine.Vector4)">
            <summary>
             Convert a world space position or rotation to local space.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.WorldToLocal2D(AtomicEngine.Vector2)">
            <summary>
             Convert a world space position or rotation to local space (for Atomic2D).
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.IsDirty">
            <summary>
             Return whether transform has changed and world transform needs recalculation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetNumChildren(System.Boolean)">
            <summary>
             Return number of child scene nodes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetChildren">
            <summary>
             Return immediate child scene nodes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetChildren(AtomicEngine.Vector{AtomicEngine.Node},System.Boolean)">
            <summary>
             Return child scene nodes, optionally recursive.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetChildrenWithComponent(AtomicEngine.Vector{AtomicEngine.Node},AtomicEngine.StringHash,System.Boolean)">
            <summary>
             Return child scene nodes with a specific component.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetChildrenWithTag(AtomicEngine.Vector{AtomicEngine.Node},System.String,System.Boolean)">
            <summary>
             Return child scene nodes with a specific tag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetChild(System.UInt32)">
            <summary>
             Return child scene node by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetChild(System.String,System.Boolean)">
            <summary>
             Return child scene node by name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetNumComponents">
            <summary>
             Return number of components.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetNumNetworkComponents">
            <summary>
             Return number of non-local components.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetComponents">
            <summary>
             Return all components.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetComponents(AtomicEngine.Vector{AtomicEngine.Component},AtomicEngine.StringHash,System.Boolean)">
            <summary>
             Return all components of type. Optionally recursive.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetComponent(AtomicEngine.StringHash,System.Boolean)">
            <summary>
             Return component by type. If there are several, returns the first.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetParentComponent(AtomicEngine.StringHash,System.Boolean)">
            <summary>
             Return component in parent node. If there are several, returns the first. May optional traverse up to the root node.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.HasComponent(AtomicEngine.StringHash)">
            <summary>
             Return whether has a specific component.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetListeners">
            <summary>
             Return listener components.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetID(System.UInt32)">
            <summary>
             Set ID. Called by Scene.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetScene(AtomicEngine.Scene)">
            <summary>
             Set scene. Called by Scene.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.ResetScene">
            <summary>
             Reset scene, ID and owner. Called by Scene.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.SetNetPositionAttr(AtomicEngine.Vector3)">
            <summary>
             Set network position attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetNetPositionAttr">
            <summary>
             Return network position attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetDependencyNodes">
            <summary>
             Return the depended on nodes to order network updates.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.PrepareNetworkUpdate">
            <summary>
             Prepare network update by comparing attributes and marking replication states dirty as necessary.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.CleanupConnection(AtomicEngine.Connection)">
            <summary>
             Clean up all references to a network connection that is about to be removed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.MarkReplicationDirty">
            <summary>
             Mark node dirty in scene replication states.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.CreateChild(System.UInt32,AtomicEngine.CreateMode)">
            <summary>
             Create a child node with specific ID.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.AddComponent(AtomicEngine.Component,System.UInt32,AtomicEngine.CreateMode)">
            <summary>
             Add a pre-created component. Using this function from application code is discouraged, as component operation without an owner node may not be well-defined in all cases. Prefer CreateComponent() instead.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetNumPersistentChildren">
            <summary>
             Calculate number of non-temporary child nodes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Node.GetNumPersistentComponents">
            <summary>
             Calculate number of non-temporary components.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.Node.SetPositionSilent(AtomicEngine.Vector3)" -->
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.Node.SetRotationSilent(AtomicEngine.Quaternion)" -->
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.Node.SetScaleSilent(AtomicEngine.Vector3)" -->
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.Node.SetTransformSilent(AtomicEngine.Vector3,AtomicEngine.Quaternion,AtomicEngine.Vector3)" -->
        <member name="M:AtomicEngine.Node.GetChildrenWithName(AtomicEngine.Vector{AtomicEngine.Node},System.String,System.Boolean)">
            <summary>
             Return child scene nodes by name, optionally recursive
            </summary>
        </member>
        <member name="T:AtomicEngine.Scene">
            <summary>
             Root scene node, represents the whole scene.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.Load(AtomicEngine.Deserializer,System.Boolean)">
            <summary>
             Load from binary data. Removes all existing child nodes and components first. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.Save(AtomicEngine.Serializer)">
            <summary>
             Save to binary data. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.MarkNetworkUpdate">
            <summary>
             Mark for attribute check on the next network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.LoadXML(AtomicEngine.Deserializer)">
            <summary>
             Load from an XML file. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.LoadJSON(AtomicEngine.Deserializer)">
            <summary>
             Load from a JSON file. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.SaveXML(AtomicEngine.Serializer,System.String)">
            <summary>
             Save to an XML file. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.SaveJSON(AtomicEngine.Serializer,System.String)">
            <summary>
             Save to a JSON file. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.LoadAsync(AtomicEngine.File,AtomicEngine.LoadMode)">
            <summary>
             Load from a binary file asynchronously. Return true if started successfully. The LOAD_RESOURCES_ONLY mode can also be used to preload resources from object prefab files.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.LoadAsyncXML(AtomicEngine.File,AtomicEngine.LoadMode)">
            <summary>
             Load from an XML file asynchronously. Return true if started successfully. The LOAD_RESOURCES_ONLY mode can also be used to preload resources from object prefab files.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.LoadAsyncJSON(AtomicEngine.File,AtomicEngine.LoadMode)">
            <summary>
             Load from a JSON file asynchronously. Return true if started successfully. The LOAD_RESOURCES_ONLY mode can also be used to preload resources from object prefab files.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.StopAsyncLoading">
            <summary>
             Stop asynchronous loading.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.Instantiate(AtomicEngine.Deserializer,AtomicEngine.Vector3,AtomicEngine.Quaternion,AtomicEngine.CreateMode)">
            <summary>
             Instantiate scene content from binary data. Return root node if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.InstantiateXML(AtomicEngine.Deserializer,AtomicEngine.Vector3,AtomicEngine.Quaternion,AtomicEngine.CreateMode)">
            <summary>
             Instantiate scene content from XML data. Return root node if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.InstantiateJSON(AtomicEngine.Deserializer,AtomicEngine.Vector3,AtomicEngine.Quaternion,AtomicEngine.CreateMode)">
            <summary>
             Instantiate scene content from JSON data. Return root node if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.Clear(System.Boolean,System.Boolean)">
            <summary>
             Clear scene completely of either replicated, local or all nodes and components.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.SetUpdateEnabled(System.Boolean)">
            <summary>
             Enable or disable scene update.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.SetTimeScale(System.Single)">
            <summary>
             Set update time scale. 1.0 = real time (default.)
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.SetElapsedTime(System.Single)">
            <summary>
             Set elapsed time in seconds. This can be used to prevent inaccuracy in the timer if the scene runs for a long time.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.SetSmoothingConstant(System.Single)">
            <summary>
             Set network client motion smoothing constant.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.SetSnapThreshold(System.Single)">
            <summary>
             Set network client motion smoothing snap threshold.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.SetAsyncLoadingMs(System.Int32)">
            <summary>
             Set maximum milliseconds per frame to spend on async scene loading.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.AddRequiredPackageFile(AtomicEngine.PackageFile)">
            <summary>
             Add a required package file for networking. To be called on the server.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.ClearRequiredPackageFiles">
            <summary>
             Clear required package files.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.RegisterVar(System.String)">
            <summary>
             Register a node user variable hash reverse mapping (for editing.)
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.UnregisterVar(System.String)">
            <summary>
             Unregister a node user variable hash reverse mapping.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.UnregisterAllVars">
            <summary>
             Clear all registered node user variable hash reverse mappings.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetNode(System.UInt32)">
            <summary>
             Return node from the whole scene by ID, or null if not found.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetNodesWithTag(AtomicEngine.Vector{AtomicEngine.Node},System.String)">
            <summary>
             Get nodes with specific tag from the whole scene, return false if empty.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.IsUpdateEnabled">
            <summary>
             Return whether updates are enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.IsAsyncLoading">
            <summary>
             Return whether an asynchronous loading operation is in progress.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetAsyncProgress">
            <summary>
             Return asynchronous loading progress between 0.0 and 1.0, or 1.0 if not in progress.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetAsyncLoadMode">
            <summary>
             Return the load mode of the current asynchronous loading operation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetFileName">
            <summary>
             Return source file name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetChecksum">
            <summary>
             Return source file checksum.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetTimeScale">
            <summary>
             Return update time scale.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetElapsedTime">
            <summary>
             Return elapsed time in seconds.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetSmoothingConstant">
            <summary>
             Return motion smoothing constant.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetSnapThreshold">
            <summary>
             Return motion smoothing snap threshold.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetAsyncLoadingMs">
            <summary>
             Return maximum milliseconds per frame to spend on async loading.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetVarName(AtomicEngine.StringHash)">
            <summary>
             Return a node user variable name, or empty if not registered.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.Update(System.Single)">
            <summary>
             Update scene. Called by HandleUpdate.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.BeginThreadedUpdate">
            <summary>
             Begin a threaded update. During threaded update components can choose to delay dirty processing.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.EndThreadedUpdate">
            <summary>
             End a threaded update. Notify components that marked themselves for delayed dirty processing.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.DelayedMarkedDirty(AtomicEngine.Component)">
            <summary>
             Add a component to the delayed dirty notify queue. Is thread-safe.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.IsThreadedUpdate">
            <summary>
             Return threaded update flag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetFreeNodeID(AtomicEngine.CreateMode)">
            <summary>
             Get free node ID, either non-local or local.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetFreeComponentID(AtomicEngine.CreateMode)">
            <summary>
             Get free component ID, either non-local or local.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.NodeTagAdded(AtomicEngine.Node,System.String)">
            <summary>
             Cache node by tag if tag not zero, no checking if already added. Used internaly in Node::AddTag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.NodeTagRemoved(AtomicEngine.Node,System.String)">
            <summary>
             Cache node by tag if tag not zero.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.NodeAdded(AtomicEngine.Node)">
            <summary>
             Node added. Assign scene pointer and add to ID map.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.NodeRemoved(AtomicEngine.Node)">
            <summary>
             Node removed. Remove from ID map.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.ComponentAdded(AtomicEngine.Component)">
            <summary>
             Component added. Add to ID map.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.ComponentRemoved(AtomicEngine.Component)">
            <summary>
             Component removed. Remove from ID map.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.SetVarNamesAttr(System.String)">
            <summary>
             Set node user variable reverse mappings.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.GetVarNamesAttr">
            <summary>
             Return node user variable reverse mappings.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.PrepareNetworkUpdate">
            <summary>
             Prepare network update by comparing attributes and marking replication states dirty as necessary.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.CleanupConnection(AtomicEngine.Connection)">
            <summary>
             Clean up all references to a network connection that is about to be removed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.MarkNetworkUpdate(AtomicEngine.Node)">
            <summary>
             Mark a node for attribute check on the next network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.Scene.MarkNetworkUpdate(AtomicEngine.Component)">
            <summary>
             Mark a component for attribute check on the next network update.
            </summary>
        </member>
        <member name="T:AtomicEngine.ValueAnimation">
            <summary>
             Value animation class.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimation.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimation.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimation.Save(AtomicEngine.Serializer)">
            <summary>
             Save resource. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimation.SetInterpolationMethod(AtomicEngine.InterpMethod)">
            <summary>
             Set interpolation method.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimation.SetSplineTension(System.Single)">
            <summary>
             Set spline tension, should be between 0.0f and 1.0f, but this is not a must.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimation.SetValueType(AtomicEngine.VariantType)">
            <summary>
             Set value type.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimation.SetEventFrame(System.Single,AtomicEngine.StringHash)">
            <summary>
             Set event frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimation.IsValid">
            <summary>
             Return animation is valid.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimation.GetInterpolationMethod">
            <summary>
             Return interpolation method.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimation.GetSplineTension">
            <summary>
             Return spline tension.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimation.GetValueType">
            <summary>
             Return value type.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimation.GetBeginTime">
            <summary>
             Return begin time.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimation.GetEndTime">
            <summary>
             Return end time.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimation.HasEventFrames">
            <summary>
             Has event frames.
            </summary>
        </member>
        <member name="T:AtomicEngine.ScriptVariant">
            <summary>
             For performance sensitive code, specialized marshaling should be used instead
            </summary>
        </member>
        <member name="T:AtomicEngine.UIWidget">
            <summary>
             Wraps a TurboBadger widget in our Object model
            </summary>
        </member>
        <member name="M:AtomicEngine.UIWidget.SetFocusRecursive">
            <summary>
             Set focus to first widget which accepts it
            </summary>
        </member>
        <member name="M:AtomicEngine.UIWidget.AddChildRelative(AtomicEngine.UIWidget,AtomicEngine.UI_WIDGET_Z_REL,AtomicEngine.UIWidget)">
            <summary>
             This takes a relative Z and insert the child before or after the given reference widget.
            </summary>
        </member>
        <member name="T:AtomicEngine.AnimatedSprite2D">
            <summary>
             Animated sprite component, it uses to play animation created by Spine (http://www.esotericsoftware.com) and Spriter (http://www.brashmonkey.com/).
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedSprite2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedSprite2D.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedSprite2D.SetAnimationSet(AtomicEngine.AnimationSet2D)">
            <summary>
             Set animation set.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedSprite2D.SetEntity(System.String)">
            <summary>
             Set entity name (skin name for spine, entity name for spriter).
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedSprite2D.SetAnimation(System.String,AtomicEngine.LoopMode2D)">
            <summary>
             Set animation by name and loop mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedSprite2D.SetLoopMode(AtomicEngine.LoopMode2D)">
            <summary>
             Set loop mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedSprite2D.SetSpeed(System.Single)">
            <summary>
             Set speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedSprite2D.GetAnimationSet">
            <summary>
             Return animation.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedSprite2D.GetEntity">
            <summary>
             Return entity name.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedSprite2D.GetAnimation">
            <summary>
             Return animation name.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedSprite2D.GetLoopMode">
            <summary>
             Return loop mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedSprite2D.GetSpeed">
            <summary>
             Return speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimatedSprite2D.SetAnimationAttr(System.String)">
            <summary>
             Set animation by name.
            </summary>
        </member>
        <member name="T:AtomicEngine.AnimationSet2D">
            <summary>
             Spriter animation set, it includes one or more animations, for more information please refer to http://www.esotericsoftware.com and http://www.brashmonkey.com/spriter.htm.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationSet2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationSet2D.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationSet2D.EndLoad">
            <summary>
             Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationSet2D.GetNumAnimations">
            <summary>
             Get number of animations.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationSet2D.GetAnimation(System.UInt32)">
            <summary>
             Return animation name.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationSet2D.HasAnimation(System.String)">
            <summary>
             Check has animation.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationSet2D.GetSprite">
            <summary>
             Return sprite.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationSet2D.GetSpriterFileSprite(System.Int32,System.Int32)">
            <summary>
             Return spriter file sprite.
            </summary>
        </member>
        <member name="T:AtomicEngine.CollisionBox2D">
            <summary>
             2D box collision component.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionBox2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionBox2D.SetSize(AtomicEngine.Vector2)">
            <summary>
             Set size.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionBox2D.SetSize(System.Single,System.Single)">
            <summary>
             Set size.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionBox2D.SetCenter(AtomicEngine.Vector2)">
            <summary>
             Set center.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionBox2D.SetCenter(System.Single,System.Single)">
            <summary>
             Set center.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionBox2D.SetAngle(System.Single)">
            <summary>
             Set angle.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionBox2D.GetSize">
            <summary>
             Return size.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionBox2D.GetCenter">
            <summary>
             Return center.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionBox2D.GetAngle">
            <summary>
             Return angle.
            </summary>
        </member>
        <member name="T:AtomicEngine.CollisionChain2D">
            <summary>
             2D chain collision component.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionChain2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionChain2D.SetLoop(System.Boolean)">
            <summary>
             Set loop.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionChain2D.SetVertexCount(System.UInt32)">
            <summary>
             Set vertex count.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionChain2D.SetVertex(System.UInt32,AtomicEngine.Vector2)">
            <summary>
             Set vertex.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionChain2D.GetLoop">
            <summary>
             Return loop.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionChain2D.GetVertexCount">
            <summary>
             Return vertex count.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionChain2D.GetVertex(System.UInt32)">
            <summary>
             Return vertex.
            </summary>
        </member>
        <member name="T:AtomicEngine.CollisionCircle2D">
            <summary>
             2D circle collision component.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionCircle2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionCircle2D.SetRadius(System.Single)">
            <summary>
             Set radius.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionCircle2D.SetCenter(AtomicEngine.Vector2)">
            <summary>
             Set center.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionCircle2D.SetCenter(System.Single,System.Single)">
            <summary>
             Set center.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionCircle2D.GetRadius">
            <summary>
             Return radius.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionCircle2D.GetCenter">
            <summary>
             Return center.
            </summary>
        </member>
        <member name="T:AtomicEngine.CollisionEdge2D">
            <summary>
             2D edge collision component.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionEdge2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionEdge2D.SetVertex1(AtomicEngine.Vector2)">
            <summary>
             Set vertex 1.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionEdge2D.SetVertex2(AtomicEngine.Vector2)">
            <summary>
             Set vertex 2.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionEdge2D.SetVertices(AtomicEngine.Vector2,AtomicEngine.Vector2)">
            <summary>
             Set vertices.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionEdge2D.GetVertex1">
            <summary>
             Return vertex 1.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionEdge2D.GetVertex2">
            <summary>
             Return vertex 2.
            </summary>
        </member>
        <member name="T:AtomicEngine.CollisionPolygon2D">
            <summary>
             2D polygon collision component.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionPolygon2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionPolygon2D.SetVertexCount(System.UInt32)">
            <summary>
             Set vertex count.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionPolygon2D.SetVertex(System.UInt32,AtomicEngine.Vector2)">
            <summary>
             Set vertex.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionPolygon2D.GetVertexCount">
            <summary>
             Return vertex count.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionPolygon2D.GetVertex(System.UInt32)">
            <summary>
             Return vertex.
            </summary>
        </member>
        <member name="T:AtomicEngine.CollisionShape2D">
            <summary>
             2D collision shape component.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.SetTrigger(System.Boolean)">
            <summary>
             Set trigger.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.SetCategoryBits(System.Int32)">
            <summary>
             Set filter category bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.SetMaskBits(System.Int32)">
            <summary>
             Set filter mask bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.SetGroupIndex(System.Int32)">
            <summary>
             Set filter group index.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.SetDensity(System.Single)">
            <summary>
             Set density.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.SetFriction(System.Single)">
            <summary>
             Set friction.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.SetRestitution(System.Single)">
            <summary>
             Set restitution .
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.CreateFixture">
            <summary>
             Create fixture.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.ReleaseFixture">
            <summary>
             Release fixture.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.IsTrigger">
            <summary>
             Return trigger.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.GetCategoryBits">
            <summary>
             Return filter category bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.GetMaskBits">
            <summary>
             Return filter mask bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.GetGroupIndex">
            <summary>
             Return filter group index.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.GetDensity">
            <summary>
             Return density.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.GetFriction">
            <summary>
             Return friction.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.GetRestitution">
            <summary>
             Return restitution.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.GetMass">
            <summary>
             Return mass.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.GetInertia">
            <summary>
             Return inertia.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape2D.GetMassCenter">
            <summary>
             Return mass center.
            </summary>
        </member>
        <member name="T:AtomicEngine.Constraint2D">
            <summary>
             2D physics constraint component.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint2D.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint2D.CreateJoint">
            <summary>
             Create joint.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint2D.ReleaseJoint">
            <summary>
             Release joint.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint2D.SetOtherBody(AtomicEngine.RigidBody2D)">
            <summary>
             Set other rigid body.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint2D.SetCollideConnected(System.Boolean)">
            <summary>
             Set collide connected.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint2D.SetAttachedConstraint(AtomicEngine.Constraint2D)">
            <summary>
             Set attached constriant (for gear).
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint2D.GetOwnerBody">
            <summary>
             Return owner body.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint2D.GetOtherBody">
            <summary>
             Return other body.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint2D.GetCollideConnected">
            <summary>
             Return collide connected.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint2D.GetAttachedConstraint">
            <summary>
             Return attached constraint (for gear).
            </summary>
        </member>
        <member name="T:AtomicEngine.ConstraintDistance2D">
            <summary>
             2D distance constraint component.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintDistance2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintDistance2D.SetOwnerBodyAnchor(AtomicEngine.Vector2)">
            <summary>
             Set owner body anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintDistance2D.SetOtherBodyAnchor(AtomicEngine.Vector2)">
            <summary>
             Set other body anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintDistance2D.SetFrequencyHz(System.Single)">
            <summary>
             Set frequency Hz.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintDistance2D.SetDampingRatio(System.Single)">
            <summary>
             Set damping ratio.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintDistance2D.GetOwnerBodyAnchor">
            <summary>
             Return owner body anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintDistance2D.GetOtherBodyAnchor">
            <summary>
             Return other body anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintDistance2D.GetFrequencyHz">
            <summary>
             Return frequency Hz.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintDistance2D.GetDampingRatio">
            <summary>
             Return damping ratio.
            </summary>
        </member>
        <member name="T:AtomicEngine.ConstraintFriction2D">
            <summary>
             2D friction constraint component.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintFriction2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintFriction2D.SetAnchor(AtomicEngine.Vector2)">
            <summary>
             Set anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintFriction2D.SetMaxForce(System.Single)">
            <summary>
             Set max force.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintFriction2D.SetMaxTorque(System.Single)">
            <summary>
             Set max torque.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintFriction2D.GetAnchor">
            <summary>
             Return anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintFriction2D.GetMaxForce">
            <summary>
             Set max force.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintFriction2D.GetMaxTorque">
            <summary>
             Set max torque.
            </summary>
        </member>
        <member name="T:AtomicEngine.ConstraintGear2D">
            <summary>
             2D gear constraint component.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintGear2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintGear2D.SetOwnerConstraint(AtomicEngine.Constraint2D)">
            <summary>
             Set owner constraint.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintGear2D.SetOtherConstraint(AtomicEngine.Constraint2D)">
            <summary>
             Set other constraint.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintGear2D.SetRatio(System.Single)">
            <summary>
             Set ratio.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintGear2D.GetOwnerConstraint">
            <summary>
             Return owner constraint.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintGear2D.GetOtherConstraint">
            <summary>
             Return other constraint.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintGear2D.GetRatio">
            <summary>
             Return ratio.
            </summary>
        </member>
        <member name="T:AtomicEngine.ConstraintMotor2D">
            <summary>
             2D motor constraint component.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMotor2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMotor2D.SetLinearOffset(AtomicEngine.Vector2)">
            <summary>
             Set linear offset.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMotor2D.SetAngularOffset(System.Single)">
            <summary>
             Set angular offset.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMotor2D.SetMaxForce(System.Single)">
            <summary>
             Set max force.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMotor2D.SetMaxTorque(System.Single)">
            <summary>
             Set max torque.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMotor2D.SetCorrectionFactor(System.Single)">
            <summary>
             Set correction factor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMotor2D.GetLinearOffset">
            <summary>
             Return linear offset.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMotor2D.GetAngularOffset">
            <summary>
             Return angular offset.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMotor2D.GetMaxForce">
            <summary>
             Return max force.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMotor2D.GetMaxTorque">
            <summary>
             Return max torque.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMotor2D.GetCorrectionFactor">
            <summary>
             Return correction factor.
            </summary>
        </member>
        <member name="T:AtomicEngine.ConstraintMouse2D">
            <summary>
             2D mouse constraint component.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMouse2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMouse2D.SetTarget(AtomicEngine.Vector2)">
            <summary>
             Set target.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMouse2D.SetMaxForce(System.Single)">
            <summary>
             Set max force.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMouse2D.SetFrequencyHz(System.Single)">
            <summary>
             Set frequency Hz.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMouse2D.SetDampingRatio(System.Single)">
            <summary>
             Set damping ratio.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMouse2D.GetTarget">
            <summary>
             Return target.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMouse2D.GetMaxForce">
            <summary>
             Return max force.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMouse2D.GetFrequencyHz">
            <summary>
             Return frequency Hz.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintMouse2D.GetDampingRatio">
            <summary>
             Return damping ratio.
            </summary>
        </member>
        <member name="T:AtomicEngine.ConstraintPrismatic2D">
            <summary>
             2D prismatic constraint component.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.SetAnchor(AtomicEngine.Vector2)">
            <summary>
             Set anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.SetAxis(AtomicEngine.Vector2)">
            <summary>
             Set axis.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.SetEnableLimit(System.Boolean)">
            <summary>
             Set enable limit.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.SetLowerTranslation(System.Single)">
            <summary>
             Set lower translation.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.SetUpperTranslation(System.Single)">
            <summary>
             Set upper translation.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.SetEnableMotor(System.Boolean)">
            <summary>
             Set enable motor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.SetMaxMotorForce(System.Single)">
            <summary>
             Set maxmotor force.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.SetMotorSpeed(System.Single)">
            <summary>
             Set motor speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.GetAnchor">
            <summary>
             Return anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.GetAxis">
            <summary>
             Return axis.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.GetEnableLimit">
            <summary>
             Return enable limit.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.GetLowerTranslation">
            <summary>
             Return lower translation.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.GetUpperTranslation">
            <summary>
             Return upper translation.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.GetEnableMotor">
            <summary>
             Return enable motor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.GetMaxMotorForce">
            <summary>
             Return maxmotor force.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPrismatic2D.GetMotorSpeed">
            <summary>
             Return motor speed.
            </summary>
        </member>
        <member name="T:AtomicEngine.ConstraintPulley2D">
            <summary>
             2D pulley constraint component.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPulley2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPulley2D.SetOwnerBodyGroundAnchor(AtomicEngine.Vector2)">
            <summary>
             Set other body ground anchor point.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPulley2D.SetOtherBodyGroundAnchor(AtomicEngine.Vector2)">
            <summary>
             Set other body ground anchor point.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPulley2D.SetOwnerBodyAnchor(AtomicEngine.Vector2)">
            <summary>
             Set owner body anchor point.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPulley2D.SetOtherBodyAnchor(AtomicEngine.Vector2)">
            <summary>
             Set other body anchor point.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPulley2D.SetRatio(System.Single)">
            <summary>
             Set ratio.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPulley2D.GetOwnerBodyGroundAnchor">
            <summary>
             Return owner body ground anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPulley2D.GetOtherBodyGroundAnchor">
            <summary>
             return other body ground anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPulley2D.GetOwnerBodyAnchor">
            <summary>
             Return owner body anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPulley2D.GetOtherBodyAnchor">
            <summary>
             Return other body anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintPulley2D.GetRatio">
            <summary>
             Return ratio.
            </summary>
        </member>
        <member name="T:AtomicEngine.ConstraintRevolute2D">
            <summary>
             2D revolute constraint component.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.SetAnchor(AtomicEngine.Vector2)">
            <summary>
             Set anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.SetEnableLimit(System.Boolean)">
            <summary>
             Set enable limit.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.SetLowerAngle(System.Single)">
            <summary>
             Set lower angle.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.SetUpperAngle(System.Single)">
            <summary>
             Set upper angle.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.SetEnableMotor(System.Boolean)">
            <summary>
             Set enable motor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.SetMotorSpeed(System.Single)">
            <summary>
             Set motor speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.SetMaxMotorTorque(System.Single)">
            <summary>
             Set max motor torque.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.GetAnchor">
            <summary>
             Return anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.GetEnableLimit">
            <summary>
             Return enable limit.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.GetLowerAngle">
            <summary>
             Return lower angle.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.GetUpperAngle">
            <summary>
             Return upper angle.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.GetEnableMotor">
            <summary>
             Return enable motor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.GetMotorSpeed">
            <summary>
             Return motor speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRevolute2D.GetMaxMotorTorque">
            <summary>
             Return max motor torque.
            </summary>
        </member>
        <member name="T:AtomicEngine.ConstraintRope2D">
            <summary>
             2D rope constraint component.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRope2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRope2D.SetOwnerBodyAnchor(AtomicEngine.Vector2)">
            <summary>
             Set owner body anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRope2D.SetOtherBodyAnchor(AtomicEngine.Vector2)">
            <summary>
             Set other body anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRope2D.SetMaxLength(System.Single)">
            <summary>
             Set max length.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRope2D.GetOwnerBodyAnchor">
            <summary>
             Return owner body anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRope2D.GetOtherBodyAnchor">
            <summary>
             Return other body anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintRope2D.GetMaxLength">
            <summary>
             Return max length.
            </summary>
        </member>
        <member name="T:AtomicEngine.ConstraintWeld2D">
            <summary>
             2D weld constraint component.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWeld2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWeld2D.SetAnchor(AtomicEngine.Vector2)">
            <summary>
             Set anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWeld2D.SetFrequencyHz(System.Single)">
            <summary>
             Set frequency Hz.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWeld2D.SetDampingRatio(System.Single)">
            <summary>
             Set damping ratio.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWeld2D.GetAnchor">
            <summary>
             Return anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWeld2D.GetFrequencyHz">
            <summary>
             Return frequency Hz.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWeld2D.GetDampingRatio">
            <summary>
             Return damping ratio.
            </summary>
        </member>
        <member name="T:AtomicEngine.ConstraintWheel2D">
            <summary>
             2D wheel constraint component.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.SetAnchor(AtomicEngine.Vector2)">
            <summary>
             Set anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.SetAxis(AtomicEngine.Vector2)">
            <summary>
             Set axis.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.SetEnableMotor(System.Boolean)">
            <summary>
             Set enable motor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.SetMaxMotorTorque(System.Single)">
            <summary>
             Set max motor torque.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.SetMotorSpeed(System.Single)">
            <summary>
             Set motor speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.SetFrequencyHz(System.Single)">
            <summary>
             Set frequency Hz.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.SetDampingRatio(System.Single)">
            <summary>
             Set damping ratio.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.GetAnchor">
            <summary>
             Return anchor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.GetAxis">
            <summary>
             Return axis.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.GetEnableMotor">
            <summary>
             Return enable motor.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.GetMaxMotorTorque">
            <summary>
             Return maxMotor torque.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.GetMotorSpeed">
            <summary>
             Return motor speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.GetFrequencyHz">
            <summary>
             Return frequency Hz.
            </summary>
        </member>
        <member name="M:AtomicEngine.ConstraintWheel2D.GetDampingRatio">
            <summary>
             Return damping ratio.
            </summary>
        </member>
        <member name="T:AtomicEngine.Drawable2D">
            <summary>
             Base class for 2D visible components.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable2D.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable2D.SetLayer(System.Int32)">
            <summary>
             Set layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable2D.SetOrderInLayer(System.Int32)">
            <summary>
             Set order in layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable2D.GetLayer">
            <summary>
             Return layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable2D.GetOrderInLayer">
            <summary>
             Return order in layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.DirectionalLight2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.PositionalLight2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.PointLight2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Light2DGroup.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="T:AtomicEngine.ParticleEffect2D">
            <summary>
             2D particle effect resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.EndLoad">
            <summary>
             Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.Save(AtomicEngine.Serializer)">
            <summary>
             Save resource. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetSprite(AtomicEngine.Sprite2D)">
            <summary>
             Set sprite.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetSourcePositionVariance(AtomicEngine.Vector2)">
            <summary>
             Set source position variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetSpeed(System.Single)">
            <summary>
             Set speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetSpeedVariance(System.Single)">
            <summary>
             Set speed variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetParticleLifeSpan(System.Single)">
            <summary>
             Set particle lifespan.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetParticleLifespanVariance(System.Single)">
            <summary>
             Set particle lifespan variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetAngle(System.Single)">
            <summary>
             Set angle.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetAngleVariance(System.Single)">
            <summary>
             Set angle variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetGravity(AtomicEngine.Vector2)">
            <summary>
             Set gravity.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetRadialAcceleration(System.Single)">
            <summary>
             Set radial acceleration.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetTangentialAcceleration(System.Single)">
            <summary>
             Set tangential acceleration.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetRadialAccelVariance(System.Single)">
            <summary>
             Set radial acceleration variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetTangentialAccelVariance(System.Single)">
            <summary>
             Set tangential acceleration variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetStartColor(AtomicEngine.Color)">
            <summary>
             Set start color.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetStartColorVariance(AtomicEngine.Color)">
            <summary>
             Set start color variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetFinishColor(AtomicEngine.Color)">
            <summary>
             Set finish color.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetFinishColorVariance(AtomicEngine.Color)">
            <summary>
             Set finish color variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetMaxParticles(System.Int32)">
            <summary>
             Set max particles.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetStartParticleSize(System.Single)">
            <summary>
             Set start particle size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetStartParticleSizeVariance(System.Single)">
            <summary>
             Set start particle size variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetFinishParticleSize(System.Single)">
            <summary>
             Set finish particle size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetFinishParticleSizeVariance(System.Single)">
            <summary>
             Set finish particle size variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetDuration(System.Single)">
            <summary>
             Set duration.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetEmitterType(AtomicEngine.EmitterType2D)">
            <summary>
             Set emitter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetMaxRadius(System.Single)">
            <summary>
             Set max radius.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetMaxRadiusVariance(System.Single)">
            <summary>
             Set max radius variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetMinRadius(System.Single)">
            <summary>
             Set min radius.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetMinRadiusVariance(System.Single)">
            <summary>
             Set min radius variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetRotatePerSecond(System.Single)">
            <summary>
             Set rotate per second.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetRotatePerSecondVariance(System.Single)">
            <summary>
             Set rotate per second variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetBlendMode(AtomicEngine.BlendMode)">
            <summary>
             Set blend mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetRotationStart(System.Single)">
            <summary>
             Set rotation start.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetRotationStartVariance(System.Single)">
            <summary>
             Set rotation start variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetRotationEnd(System.Single)">
            <summary>
             Set rotation end.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.SetRotationEndVariance(System.Single)">
            <summary>
             Set rotation end variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.Clone(System.String)">
            <summary>
             Clone the 2D particle effect.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetSprite">
            <summary>
             Return sprite.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetSourcePositionVariance">
            <summary>
             Return source position variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetSpeed">
            <summary>
             Return speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetSpeedVariance">
            <summary>
             Return speed variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetParticleLifeSpan">
            <summary>
             Return particle lifespan.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetParticleLifespanVariance">
            <summary>
             Return particle lifespan variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetAngle">
            <summary>
             Return angle.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetAngleVariance">
            <summary>
             Return angle variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetGravity">
            <summary>
             Return gravity.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetRadialAcceleration">
            <summary>
             Return radial acceleration.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetTangentialAcceleration">
            <summary>
             Return tangential acceleration.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetRadialAccelVariance">
            <summary>
             Return radial acceleration variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetTangentialAccelVariance">
            <summary>
             Return tangential acceleration variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetStartColor">
            <summary>
             Return start color.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetStartColorVariance">
            <summary>
             Return start color variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetFinishColor">
            <summary>
             Return finish color.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetFinishColorVariance">
            <summary>
             Return finish color variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetMaxParticles">
            <summary>
             Return max particles.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetStartParticleSize">
            <summary>
             Return start particle size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetStartParticleSizeVariance">
            <summary>
             Return start particle size variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetFinishParticleSize">
            <summary>
             Return finish particle size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetFinishParticleSizeVariance">
            <summary>
             Return finish particle size variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetDuration">
            <summary>
             Return duration.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetEmitterType">
            <summary>
             Return emitter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetMaxRadius">
            <summary>
             Return max radius.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetMaxRadiusVariance">
            <summary>
             Return max radius variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetMinRadius">
            <summary>
             Return min radius.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetMinRadiusVariance">
            <summary>
             Return min radius variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetRotatePerSecond">
            <summary>
             Return rotate per second.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetRotatePerSecondVariance">
            <summary>
             Return rotate per second variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetBlendMode">
            <summary>
             Return blend mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetRotationStart">
            <summary>
             Return rotation start.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetRotationStartVariance">
            <summary>
             Return rotation start variance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetRotationEnd">
            <summary>
             Return rotation end.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect2D.GetRotationEndVariance">
            <summary>
             Return rotation end variance.
            </summary>
        </member>
        <member name="T:AtomicEngine.ParticleEmitter2D">
            <summary>
             2D particle emitter component.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter2D.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter2D.SetEffect(AtomicEngine.ParticleEffect2D)">
            <summary>
             Set particle effect.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter2D.SetSprite(AtomicEngine.Sprite2D)">
            <summary>
             Set sprite.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter2D.SetBlendMode(AtomicEngine.BlendMode)">
            <summary>
             Set blend mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter2D.SetMaxParticles(System.UInt32)">
            <summary>
             Set max particles.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter2D.GetEffect">
            <summary>
             Return particle effect.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter2D.GetSprite">
            <summary>
             Return sprite.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter2D.GetBlendMode">
            <summary>
             Return blend mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter2D.GetMaxParticles">
            <summary>
             Return max particles.
            </summary>
        </member>
        <member name="T:AtomicEngine.PhysicsWorld2D">
            <summary>
             2D physics simulation world component. Should be added only to the root scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.Update(System.Single)">
            <summary>
             Step the simulation forward.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.DrawDebugGeometry">
            <summary>
             Add debug geometry to the debug renderer.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetUpdateEnabled(System.Boolean)">
            <summary>
             Enable or disable automatic physics simulation during scene update. Enabled by default.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetDrawShape(System.Boolean)">
            <summary>
             Set draw shape.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetDrawJoint(System.Boolean)">
            <summary>
             Set draw joint.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetDrawAabb(System.Boolean)">
            <summary>
             Set draw aabb.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetDrawPair(System.Boolean)">
            <summary>
             Set draw pair.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetDrawCenterOfMass(System.Boolean)">
            <summary>
             Set draw center of mass.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetAllowSleeping(System.Boolean)">
            <summary>
             Set allow sleeping.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetWarmStarting(System.Boolean)">
            <summary>
             Set warm starting.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetContinuousPhysics(System.Boolean)">
            <summary>
             Set continuous physics.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetSubStepping(System.Boolean)">
            <summary>
             Set sub stepping.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetGravity(AtomicEngine.Vector2)">
            <summary>
             Set gravity.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetAutoClearForces(System.Boolean)">
            <summary>
             Set auto clear forces.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetVelocityIterations(System.Int32)">
            <summary>
             Set velocity iterations.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetPositionIterations(System.Int32)">
            <summary>
             Set position iterations.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.AddRigidBody(AtomicEngine.RigidBody2D)">
            <summary>
             Add rigid body.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.RemoveRigidBody(AtomicEngine.RigidBody2D)">
            <summary>
             Remove rigid body.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetRigidBody(AtomicEngine.Vector2,System.UInt32)">
            <summary>
             Return rigid body at point.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetRigidBody(System.Int32,System.Int32,System.UInt32)">
            <summary>
             Return rigid body at screen point.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetRigidBodies(AtomicEngine.Vector{AtomicEngine.RigidBody2D},AtomicEngine.Rect,System.UInt32)">
            <summary>
             Return rigid bodies by a box query.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.IsUpdateEnabled">
            <summary>
             Return whether physics world will automatically simulate during scene update.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetDrawShape">
            <summary>
             Return draw shape.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetDrawJoint">
            <summary>
             Return draw joint.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetDrawAabb">
            <summary>
             Return draw aabb.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetDrawPair">
            <summary>
             Return draw pair.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetDrawCenterOfMass">
            <summary>
             Return draw center of mass.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetAllowSleeping">
            <summary>
             Return allow sleeping.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetWarmStarting">
            <summary>
             Return warm starting.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetContinuousPhysics">
            <summary>
             Return continuous physics.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetSubStepping">
            <summary>
             Return sub stepping.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetAutoClearForces">
            <summary>
             Return auto clear forces.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetGravity">
            <summary>
             Return gravity.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetVelocityIterations">
            <summary>
             Return velocity iterations.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.GetPositionIterations">
            <summary>
             Return position iterations.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.SetApplyingTransforms(System.Boolean)">
            <summary>
             Set node dirtying to be disregarded.
            </summary>
        </member>
        <member name="M:AtomicEngine.PhysicsWorld2D.IsApplyingTransforms">
            <summary>
             Return whether node dirtying should be disregarded.
            </summary>
        </member>
        <member name="T:AtomicEngine.RigidBody2D">
            <summary>
             2D rigid body component.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.SetBodyType(AtomicEngine.BodyType2D)">
            <summary>
             Set body type.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.SetMass(System.Single)">
            <summary>
             Set mass.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.SetInertia(System.Single)">
            <summary>
             Set inertia.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.SetMassCenter(AtomicEngine.Vector2)">
            <summary>
             Set mass center.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.SetUseFixtureMass(System.Boolean)">
            <summary>
             Set whether to automatically calculate mass and inertia from collision shapes. Default true.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.SetLinearDamping(System.Single)">
            <summary>
             Set linear damping.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.SetAngularDamping(System.Single)">
            <summary>
             Set angular damping.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.SetAllowSleep(System.Boolean)">
            <summary>
             Set allow sleep.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.SetFixedRotation(System.Boolean)">
            <summary>
             Set fixed rotation.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.SetBullet(System.Boolean)">
            <summary>
             Set bullet mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.SetGravityScale(System.Single)">
            <summary>
             Set gravity scale.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.SetAwake(System.Boolean)">
            <summary>
             Set awake.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.SetLinearVelocity(AtomicEngine.Vector2)">
            <summary>
             Set linear velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.SetAngularVelocity(System.Single)">
            <summary>
             Set angular velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.ApplyForce(AtomicEngine.Vector2,AtomicEngine.Vector2,System.Boolean)">
            <summary>
             Apply force.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.ApplyForceToCenter(AtomicEngine.Vector2,System.Boolean)">
            <summary>
             Apply force to center.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.ApplyTorque(System.Single,System.Boolean)">
            <summary>
             Apply Torque.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.ApplyLinearImpulse(AtomicEngine.Vector2,AtomicEngine.Vector2,System.Boolean)">
            <summary>
             Apply linear impulse.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.ApplyAngularImpulse(System.Single,System.Boolean)">
            <summary>
             Apply angular impulse.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.CreateBody">
            <summary>
             Create body.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.ReleaseBody">
            <summary>
             Release body.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.ApplyWorldTransform">
            <summary>
             Apply world transform from the Box2D body. Called by PhysicsWorld2D.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.RigidBody2D.ApplyWorldTransform(AtomicEngine.Vector3,AtomicEngine.Quaternion)" -->
        <member name="M:AtomicEngine.RigidBody2D.AddCollisionShape2D(AtomicEngine.CollisionShape2D)">
            <summary>
             Add collision shape.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.RemoveCollisionShape2D(AtomicEngine.CollisionShape2D)">
            <summary>
             Remove collision shape.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.AddConstraint2D(AtomicEngine.Constraint2D)">
            <summary>
             Add constraint.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.RemoveConstraint2D(AtomicEngine.Constraint2D)">
            <summary>
             Remove constraint.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.GetBodyType">
            <summary>
             Return body type.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.GetMass">
            <summary>
             Return mass.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.GetInertia">
            <summary>
             Return inertia.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.GetMassCenter">
            <summary>
             Return mass center.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.GetUseFixtureMass">
            <summary>
             Return whether to calculate mass and inertia from collision shapes automatically.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.GetLinearDamping">
            <summary>
             Return linear damping.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.GetAngularDamping">
            <summary>
             Return angular damping.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.IsAllowSleep">
            <summary>
             Return allow sleep.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.IsFixedRotation">
            <summary>
             Return fixed rotation.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.IsBullet">
            <summary>
             Return bullet mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.GetGravityScale">
            <summary>
             Return gravity scale.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.IsAwake">
            <summary>
             Return awake.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.GetLinearVelocity">
            <summary>
             Return linear velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody2D.GetAngularVelocity">
            <summary>
             Return angular velocity.
            </summary>
        </member>
        <member name="T:AtomicEngine.Sprite2D">
            <summary>
             Sprite.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.EndLoad">
            <summary>
             Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.SetTexture(AtomicEngine.Texture2D)">
            <summary>
             Set texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.SetRectangle(AtomicEngine.IntRect)">
            <summary>
             Set rectangle.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.SetHotSpot(AtomicEngine.Vector2)">
            <summary>
             Set hot spot.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.SetOffset(AtomicEngine.IntVector2)">
            <summary>
             Set offset.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.SetTextureEdgeOffset(System.Single)">
            <summary>
             Set texture edge offset in pixels. This affects the left/right and top/bottom edges equally to prevent edge sampling artifacts. Default 0.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.SetSpriteSheet(AtomicEngine.SpriteSheet2D)">
            <summary>
             Set sprite sheet.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.GetTexture">
            <summary>
             Return texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.GetRectangle">
            <summary>
             Return rectangle.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.GetHotSpot">
            <summary>
             Return hot spot.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.GetOffset">
            <summary>
             Return offset.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.GetTextureEdgeOffset">
            <summary>
             Return texture edge offset.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.GetSpriteSheet">
            <summary>
             Return sprite sheet.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.GetDrawRectangle(AtomicEngine.Rect@,System.Boolean,System.Boolean)">
            <summary>
             Return draw rectangle.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.GetDrawRectangle(AtomicEngine.Rect@,AtomicEngine.Vector2,System.Boolean,System.Boolean)">
            <summary>
             Return draw rectangle with custom hot spot.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sprite2D.GetTextureRectangle(AtomicEngine.Rect@,System.Boolean,System.Boolean)">
            <summary>
             Return texture rectangle.
            </summary>
        </member>
        <member name="T:AtomicEngine.SpriteSheet2D">
            <summary>
             Sprite sheet.
            </summary>
        </member>
        <member name="M:AtomicEngine.SpriteSheet2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.SpriteSheet2D.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.SpriteSheet2D.EndLoad">
            <summary>
             Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.SpriteSheet2D.SetTexture(AtomicEngine.Texture2D)">
            <summary>
             Set texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.SpriteSheet2D.DefineSprite(System.String,AtomicEngine.IntRect,AtomicEngine.Vector2,AtomicEngine.IntVector2)">
            <summary>
             Define sprite.
            </summary>
        </member>
        <member name="M:AtomicEngine.SpriteSheet2D.GetTexture">
            <summary>
             Return texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.SpriteSheet2D.GetSprite(System.String)">
            <summary>
             Return sprite.
            </summary>
        </member>
        <member name="T:AtomicEngine.StaticSprite2D">
            <summary>
             Static sprite component.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.SetSprite(AtomicEngine.Sprite2D)">
            <summary>
             Set sprite.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.SetBlendMode(AtomicEngine.BlendMode)">
            <summary>
             Set blend mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.SetFlip(System.Boolean,System.Boolean)">
            <summary>
             Set flip.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.SetFlipX(System.Boolean)">
            <summary>
             Set flip X.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.SetFlipY(System.Boolean)">
            <summary>
             Set flip Y.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.SetColor(AtomicEngine.Color)">
            <summary>
             Set color.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.SetAlpha(System.Single)">
            <summary>
             Set alpha.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.SetUseHotSpot(System.Boolean)">
            <summary>
             Set use hot spot.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.SetHotSpot(AtomicEngine.Vector2)">
            <summary>
             Set hot spot.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.SetCustomMaterial(AtomicEngine.Material)">
            <summary>
             Set custom material.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.GetSprite">
            <summary>
             Return sprite.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.GetBlendMode">
            <summary>
             Return blend mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.GetFlipX">
            <summary>
             Return flip X.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.GetFlipY">
            <summary>
             Return flip Y.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.GetColor">
            <summary>
             Return color.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.GetAlpha">
            <summary>
             Return alpha.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.GetUseHotSpot">
            <summary>
             Return use hot spot.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.GetHotSpot">
            <summary>
             Return hot spot.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticSprite2D.GetCustomMaterial">
            <summary>
             Return custom material.
            </summary>
        </member>
        <member name="T:AtomicEngine.TileMap2D">
            <summary>
             Tile map component.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMap2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMap2D.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMap2D.SetTmxFile(AtomicEngine.TmxFile2D)">
            <summary>
             Set tmx file.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMap2D.DrawDebugGeometry">
            <summary>
             Add debug geometry to the debug renderer.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMap2D.GetTmxFile">
            <summary>
             Return tmx file.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMap2D.GetNumLayers">
            <summary>
             Return number of layers.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMap2D.GetLayer(System.UInt32)">
            <summary>
             Return tile map layer at index.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMap2D.TileIndexToPosition(System.Int32,System.Int32)">
            <summary>
             Convert tile index to position.
            </summary>
        </member>
        <member name="T:AtomicEngine.PropertySet2D">
            <summary>
             Property set.
            </summary>
        </member>
        <member name="M:AtomicEngine.PropertySet2D.HasProperty(System.String)">
            <summary>
             Return has property.
            </summary>
        </member>
        <member name="M:AtomicEngine.PropertySet2D.GetProperty(System.String)">
            <summary>
             Return property value.
            </summary>
        </member>
        <member name="T:AtomicEngine.Tile2D">
            <summary>
             Tile define.
            </summary>
        </member>
        <member name="M:AtomicEngine.Tile2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Tile2D.GetGid">
            <summary>
             Return gid.
            </summary>
        </member>
        <member name="M:AtomicEngine.Tile2D.GetSprite">
            <summary>
             Return sprite.
            </summary>
        </member>
        <member name="M:AtomicEngine.Tile2D.HasProperty(System.String)">
            <summary>
             Return has property.
            </summary>
        </member>
        <member name="M:AtomicEngine.Tile2D.GetProperty(System.String)">
            <summary>
             Return property.
            </summary>
        </member>
        <member name="M:AtomicEngine.Tile2D.GetObjectGroup">
            <summary>
             Return Object Group.
            </summary>
        </member>
        <member name="T:AtomicEngine.TileMapObject2D">
            <summary>
             Tile map object.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapObject2D.GetObjectType">
            <summary>
             Return type.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapObject2D.GetName">
            <summary>
             Return name.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapObject2D.GetPosition">
            <summary>
             Return position.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapObject2D.GetSize">
            <summary>
             Return size (for rectangle and ellipse).
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapObject2D.GetNumPoints">
            <summary>
             Return number of points (use for script).
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapObject2D.GetPoint(System.UInt32)">
            <summary>
             Return point at index (use for script).
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapObject2D.GetTileGid">
            <summary>
             Return tile Gid.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapObject2D.GetTileSprite">
            <summary>
             Return tile sprite.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapObject2D.HasProperty(System.String)">
            <summary>
             Return has property.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapObject2D.GetProperty(System.String)">
            <summary>
             Return property value.
            </summary>
        </member>
        <member name="T:AtomicEngine.TileMapLayer2D">
            <summary>
             Tile map component.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Add debug geometry to the debug renderer.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.Initialize(AtomicEngine.TileMap2D,AtomicEngine.TmxLayer2D)">
            <summary>
             Initialize with tile map and tmx layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.SetDrawOrder(System.Int32)">
            <summary>
             Set draw order
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.SetVisible(System.Boolean)">
            <summary>
             Set visible.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.GetTileMap">
            <summary>
             Return tile map.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.GetTmxLayer">
            <summary>
             Return tmx layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.GetDrawOrder">
            <summary>
             Return draw order.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.IsVisible">
            <summary>
             Return visible.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.HasProperty(System.String)">
            <summary>
             Return has property
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.GetProperty(System.String)">
            <summary>
             Return property.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.GetLayerType">
            <summary>
             Return layer type.
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.GetWidth">
            <summary>
             Return width (for tile layer only).
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.GetHeight">
            <summary>
             Return height (for tile layer only).
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.GetTileNode(System.Int32,System.Int32)">
            <summary>
             Return tile node (for tile layer only).
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.GetTile(System.Int32,System.Int32)">
            <summary>
             Return tile (for tile layer only).
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.GetNumObjects">
            <summary>
             Return number of tile map objects (for object group only).
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.GetObject(System.UInt32)">
            <summary>
             Return tile map object (for object group only).
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.GetObjectNode(System.UInt32)">
            <summary>
             Return object node (for object group only).
            </summary>
        </member>
        <member name="M:AtomicEngine.TileMapLayer2D.GetImageNode">
            <summary>
             Return image node (for image layer only).
            </summary>
        </member>
        <member name="T:AtomicEngine.TmxLayer2D">
            <summary>
             Tmx layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxLayer2D.GetTmxFile">
            <summary>
             Return tmx file.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxLayer2D.GetName">
            <summary>
             Return name.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxLayer2D.GetWidth">
            <summary>
             Return width.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxLayer2D.GetHeight">
            <summary>
             Return height.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxLayer2D.IsVisible">
            <summary>
             Return is visible.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxLayer2D.HasProperty(System.String)">
            <summary>
             Return has property (use for script).
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxLayer2D.GetProperty(System.String)">
            <summary>
             Return property value (use for script).
            </summary>
        </member>
        <member name="T:AtomicEngine.TmxTileLayer2D">
            <summary>
             Tmx tile layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxTileLayer2D.GetTile(System.Int32,System.Int32)">
            <summary>
             Return tile.
            </summary>
        </member>
        <member name="T:AtomicEngine.TmxObjectGroup2D">
            <summary>
             Tmx image layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxObjectGroup2D.GetNumObjects">
            <summary>
             Return number of objects.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxObjectGroup2D.GetObject(System.UInt32)">
            <summary>
             Return tile map object at index.
            </summary>
        </member>
        <member name="T:AtomicEngine.TmxImageLayer2D">
            <summary>
             Tmx image layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxImageLayer2D.GetPosition">
            <summary>
             Return position.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxImageLayer2D.GetSource">
            <summary>
             Return source.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxImageLayer2D.GetSprite">
            <summary>
             Return sprite.
            </summary>
        </member>
        <member name="T:AtomicEngine.TmxFile2D">
            <summary>
             Tile map file.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxFile2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxFile2D.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxFile2D.EndLoad">
            <summary>
             Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxFile2D.SetInfo(AtomicEngine.Orientation2D,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
             Set Tilemap information.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxFile2D.AddLayer(System.UInt32,AtomicEngine.TmxLayer2D)">
            <summary>
             Add layer at index, if index > number of layers then append to end.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxFile2D.AddLayer(AtomicEngine.TmxLayer2D)">
            <summary>
             Append layer to end.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxFile2D.GetTileSprite(System.Int32)">
            <summary>
             Return tile sprite by gid, if not exist return 0.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxFile2D.GetTilePropertySet(System.Int32)">
            <summary>
             Return tile property set by gid, if not exist return 0.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxFile2D.GetNumLayers">
            <summary>
             Return number of layers.
            </summary>
        </member>
        <member name="M:AtomicEngine.TmxFile2D.GetLayer(System.UInt32)">
            <summary>
             Return layer at index.
            </summary>
        </member>
        <member name="T:AtomicEngine.Audio">
            <summary>
             %Audio subsystem.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.SetMode(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
             Initialize sound output with specified buffer length and output mode.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.Audio.Update(System.Single)" -->
        <member name="M:AtomicEngine.Audio.Play">
            <summary>
             Restart sound output.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.Stop">
            <summary>
             Suspend sound output.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.SetMasterGain(System.String,System.Single)">
            <summary>
             Set master gain on a specific sound type such as sound effects, music or voice.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.PauseSoundType(System.String)">
            <summary>
             Pause playback of specific sound type. This allows to suspend e.g. sound effects or voice when the game is paused. By default all sound types are unpaused.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.ResumeSoundType(System.String)">
            <summary>
             Resume playback of specific sound type.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.ResumeAll">
            <summary>
             Resume playback of all sound types.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.SetListener(AtomicEngine.SoundListener)">
            <summary>
             Set active sound listener for 3D sounds.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.StopSound(AtomicEngine.Sound)">
            <summary>
             Stop any sound source playing a certain sound clip.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.GetSampleSize">
            <summary>
             Return byte size of one sample.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.GetMixRate">
            <summary>
             Return mixing rate.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.GetInterpolation">
            <summary>
             Return whether output is interpolated.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.IsStereo">
            <summary>
             Return whether output is stereo.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.IsPlaying">
            <summary>
             Return whether audio is being output.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.IsInitialized">
            <summary>
             Return whether an audio stream has been reserved.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.GetMasterGain(System.String)">
            <summary>
             Return master gain for a specific sound source type. Unknown sound types will return full gain (1).
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.IsSoundTypePaused(System.String)">
            <summary>
             Return whether specific sound type has been paused.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.GetListener">
            <summary>
             Return active sound listener.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.GetSoundSources">
            <summary>
             Return all sound sources.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.HasMasterGain(System.String)">
            <summary>
             Return whether the specified master gain has been defined.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.AddSoundSource(AtomicEngine.SoundSource)">
            <summary>
             Add a sound source to keep track of. Called by SoundSource.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.RemoveSoundSource(AtomicEngine.SoundSource)">
            <summary>
             Remove a sound source. Called by SoundSource.
            </summary>
        </member>
        <member name="M:AtomicEngine.Audio.GetSoundSourceMasterGain(AtomicEngine.StringHash)">
            <summary>
             Return sound type specific gain multiplied by master gain.
            </summary>
        </member>
        <member name="T:AtomicEngine.Sound">
            <summary>
             %Sound resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.LoadRaw(AtomicEngine.Deserializer)">
            <summary>
             Load raw sound data.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.LoadWav(AtomicEngine.Deserializer)">
            <summary>
             Load WAV format sound data.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.LoadOggVorbis(AtomicEngine.Deserializer)">
            <summary>
             Load Ogg Vorbis format sound data. Does not decode at load, but will rather be decoded while playing.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.SetSize(System.UInt32)">
            <summary>
             Set sound size in bytes. Also resets the sound to be uncompressed and one-shot.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.SetFormat(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
             Set uncompressed sound data format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.SetLooped(System.Boolean)">
            <summary>
             Set loop on/off. If loop is enabled, sets the full sound as loop range.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.SetLoop(System.UInt32,System.UInt32)">
            <summary>
             Define loop.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.GetLength">
            <summary>
             Return length in seconds.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.GetDataSize">
            <summary>
             Return total sound data size.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.GetSampleSize">
            <summary>
             Return sample size.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.GetFrequency">
            <summary>
             Return default frequency as a float.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.GetIntFrequency">
            <summary>
             Return default frequency as an integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.IsLooped">
            <summary>
             Return whether is looped.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.IsSixteenBit">
            <summary>
             Return whether data is sixteen bit.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.IsStereo">
            <summary>
             Return whether data is stereo.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.IsCompressed">
            <summary>
             Return whether is compressed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Sound.FixInterpolation">
            <summary>
             Fix interpolation by copying data from loop start to loop end (looped), or adding silence (oneshot.) Called internally, does not normally need to be called, unless the sound data is modified manually on the fly.
            </summary>
        </member>
        <member name="T:AtomicEngine.SoundListener">
            <summary>
             %Sound listener component
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundListener.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="T:AtomicEngine.SoundSource">
            <summary>
             %Sound source component with stereo position. A sound source needs to be created to a node to be considered "enabled" and be able to play, however that node does not need to belong to a scene.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.Play(AtomicEngine.Sound)">
            <summary>
             Play a sound.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.Play(AtomicEngine.Sound,System.Single)">
            <summary>
             Play a sound with specified frequency.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.Play(AtomicEngine.Sound,System.Single,System.Single)">
            <summary>
             Play a sound with specified frequency and gain.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.Play(AtomicEngine.Sound,System.Single,System.Single,System.Single)">
            <summary>
             Play a sound with specified frequency, gain and panning.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.Stop">
            <summary>
             Stop playback.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.SetSoundType(System.String)">
            <summary>
             Set sound type, determines the master gain group.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.SetFrequency(System.Single)">
            <summary>
             Set frequency.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.SetGain(System.Single)">
            <summary>
             Set gain. 0.0 is silence, 1.0 is full volume.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.SetAttenuation(System.Single)">
            <summary>
             Set attenuation. 1.0 is unaltered. Used for distance attenuated playback.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.SetPanning(System.Single)">
            <summary>
             Set stereo panning. -1.0 is full left and 1.0 is full right.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.SetAutoRemoveMode(AtomicEngine.AutoRemoveMode)">
            <summary>
            / Set to remove either the sound source component or its owner node from the scene automatically on sound playback completion. Disabled by default.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.GetSound">
            <summary>
             Return sound.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.GetSoundType">
            <summary>
             Return sound type, determines the master gain group.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.GetTimePosition">
            <summary>
             Return playback time position.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.GetFrequency">
            <summary>
             Return frequency.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.GetGain">
            <summary>
             Return gain.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.GetAttenuation">
            <summary>
             Return attenuation.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.GetPanning">
            <summary>
             Return stereo panning.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.GetAutoRemoveMode">
            <summary>
             Return automatic removal mode on sound playback completion.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.IsPlaying">
            <summary>
             Return whether is playing.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.Update(System.Single)">
            <summary>
             Update the sound source. Perform subclass specific operations. Called by Audio.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.UpdateMasterGain">
            <summary>
             Update the effective master gain. Called internally and by Audio when the master gain changes.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.SetPositionAttr(System.Int32)">
            <summary>
             Set sound position attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.SetPlayingAttr(System.Boolean)">
            <summary>
             Set sound playing attribute
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource.GetPositionAttr">
            <summary>
             Return sound position attribute.
            </summary>
        </member>
        <member name="T:AtomicEngine.SoundSource3D">
            <summary>
             %Sound source component with three-dimensional position.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.Update(System.Single)">
            <summary>
             Update sound source.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.SetDistanceAttenuation(System.Single,System.Single,System.Single)">
            <summary>
             Set attenuation parameters.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.SetAngleAttenuation(System.Single,System.Single)">
            <summary>
             Set angle attenuation parameters.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.SetNearDistance(System.Single)">
            <summary>
             Set near distance. Inside this range sound will not be attenuated.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.SetFarDistance(System.Single)">
            <summary>
             Set far distance. Outside this range sound will be completely attenuated.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.SetInnerAngle(System.Single)">
            <summary>
             Set inner angle in degrees. Inside this angle sound will not be attenuated.By default 360, meaning direction never has an effect.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.SetOuterAngle(System.Single)">
            <summary>
             Set outer angle in degrees. Outside this angle sound will be completely attenuated. By default 360, meaning direction never has an effect.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.SetRolloffFactor(System.Single)">
            <summary>
             Set rolloff power factor, defines attenuation function shape.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.CalculateAttenuation">
            <summary>
             Calculate attenuation and panning based on current position and listener position.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.GetNearDistance">
            <summary>
             Return near distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.GetFarDistance">
            <summary>
             Return far distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.GetInnerAngle">
            <summary>
             Return inner angle in degrees.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.GetOuterAngle">
            <summary>
             Return outer angle in degrees.
            </summary>
        </member>
        <member name="M:AtomicEngine.SoundSource3D.RollAngleoffFactor">
            <summary>
             Return rolloff power factor.
            </summary>
        </member>
        <member name="T:AtomicEngine.Context">
            <summary>
             Urho3D execution context. Provides access to subsystems, object factories and attributes, and event receivers.
            </summary>
        </member>
        <member name="M:AtomicEngine.Context.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Context.CreateObject(AtomicEngine.StringHash)">
            <summary>
             Create an object by type hash. Return pointer to it or null if no factory found.
            </summary>
        </member>
        <member name="M:AtomicEngine.Context.RegisterSubsystem(AtomicEngine.AObject)">
            <summary>
             Register a subsystem.
            </summary>
        </member>
        <member name="M:AtomicEngine.Context.RemoveSubsystem(AtomicEngine.StringHash)">
            <summary>
             Remove a subsystem.
            </summary>
        </member>
        <member name="M:AtomicEngine.Context.CopyBaseAttributes(AtomicEngine.StringHash,AtomicEngine.StringHash)">
            <summary>
             Copy base class attributes to derived class.
            </summary>
        </member>
        <member name="M:AtomicEngine.Context.GetSubsystem(AtomicEngine.StringHash)">
            <summary>
             Return subsystem by type.
            </summary>
        </member>
        <member name="M:AtomicEngine.Context.GetEventSender">
            <summary>
             Return active event sender. Null outside event handling.
            </summary>
        </member>
        <member name="M:AtomicEngine.Context.GetEditorContext">
            <summary>
             Get whether an Editor Context
            </summary>
        </member>
        <member name="M:AtomicEngine.Context.SetEditorContext(System.Boolean)">
            <summary>
             Get whether an Editor Context
            </summary>
        </member>
        <member name="T:AtomicEngine.Time">
            <summary>
             %Time and frame counter subsystem.
            </summary>
        </member>
        <member name="M:AtomicEngine.Time.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Time.BeginFrame(System.Single)">
            <summary>
             Begin new frame, with (last) frame duration in seconds and send frame start event.
            </summary>
        </member>
        <member name="M:AtomicEngine.Time.EndFrame">
            <summary>
             End frame. Increment total time and send frame end event.
            </summary>
        </member>
        <member name="M:AtomicEngine.Time.SetTimerPeriod(System.UInt32)">
            <summary>
             Set the low-resolution timer period in milliseconds. 0 resets to the default period.
            </summary>
        </member>
        <member name="M:AtomicEngine.Time.GetFrameNumber">
            <summary>
             Return frame number, starting from 1 once BeginFrame() is called for the first time.
            </summary>
        </member>
        <member name="M:AtomicEngine.Time.GetTimeStep">
            <summary>
             Return current frame timestep as seconds.
            </summary>
        </member>
        <member name="M:AtomicEngine.Time.GetTimerPeriod">
            <summary>
             Return current low-resolution timer period in milliseconds.
            </summary>
        </member>
        <member name="M:AtomicEngine.Time.GetElapsedTime">
            <summary>
             Return elapsed time from program start as seconds.
            </summary>
        </member>
        <member name="M:AtomicEngine.Time.GetSystemTime">
            <summary>
             Get system time as milliseconds.
            </summary>
        </member>
        <member name="M:AtomicEngine.Time.GetTimeSinceEpoch">
            <summary>
             Get system time as seconds since 1.1.1970.
            </summary>
        </member>
        <member name="M:AtomicEngine.Time.GetTimeStamp">
            <summary>
             Get a date/time stamp as a string.
            </summary>
        </member>
        <member name="M:AtomicEngine.Time.Sleep(System.UInt32)">
            <summary>
             Sleep for a number of milliseconds.
            </summary>
        </member>
        <member name="M:AtomicEngine.AtomicBuildInfo.GetGitSHA">
            <summary>
             Get the Git SHA of the build
            </summary>
        </member>
        <member name="M:AtomicEngine.AtomicBuildInfo.GetBuildDate">
            <summary>
             Get the Date of the build
            </summary>
        </member>
        <member name="M:AtomicEngine.AtomicBuildInfo.GetBuildTime">
            <summary>
             Get the Time of the build
            </summary>
        </member>
        <member name="M:AtomicEngine.AtomicBuildInfo.GetBuildName">
            <summary>
             Get the build release name
            </summary>
        </member>
        <member name="M:AtomicEngine.AtomicBuildInfo.GetBuildString">
            <summary>
             Get the build string in form (BuildName): BuildDate BuildTime Git:SHA
            </summary>
        </member>
        <member name="M:AtomicEngine.AtomicBuildInfo.GetDevBuild">
            <summary>
             Get whether this is binary or source tree development build
            </summary>
        </member>
        <member name="M:AtomicEngine.AtomicBuildInfo.GetDistBuild">
            <summary>
             Get whether this is a distibution/installer binary build
            </summary>
        </member>
        <member name="M:AtomicEngine.AtomicBuildInfo.GetBuildVendor">
            <summary>
             Get vendor string
            </summary>
        </member>
        <member name="T:AtomicEngine.Engine">
            <summary>
             Urho3D engine. Creates the other subsystems.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.RunFrame">
            <summary>
             Run one frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.SetMinFps(System.Int32)">
            <summary>
             Set minimum frames per second. If FPS goes lower than this, time will appear to slow down.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.SetMaxFps(System.Int32)">
            <summary>
             Set maximum frames per second. The engine will sleep if FPS is higher than this.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.SetMaxInactiveFps(System.Int32)">
            <summary>
             Set maximum frames per second when the application does not have input focus.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.SetTimeStepSmoothing(System.Int32)">
            <summary>
             Set how many frames to average for timestep smoothing. Default is 2. 1 disables smoothing.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.SetPauseMinimized(System.Boolean)">
            <summary>
             Set whether to pause update events and audio when minimized.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.SetAutoExit(System.Boolean)">
            <summary>
             Set whether to exit automatically on exit request (window close button.)
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.SetNextTimeStep(System.Single)">
            <summary>
             Override timestep of the next frame. Should be called in between RunFrame() calls.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.Exit">
            <summary>
             Close the graphics window and set the exit flag. No-op on iOS, as an iOS application can not legally exit.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.DumpProfiler">
            <summary>
             Dump profiling information to the log.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.DumpResources(System.Boolean)">
            <summary>
             Dump information of all resources to the log.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.DumpMemory">
            <summary>
             Dump information of all memory allocations to the log. Supported in MSVC debug mode only.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.GetNextTimeStep">
            <summary>
             Get timestep of the next frame. Updated by ApplyFrameLimit().
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.GetMinFps">
            <summary>
             Return the minimum frames per second.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.GetMaxFps">
            <summary>
             Return the maximum frames per second.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.GetMaxInactiveFps">
            <summary>
             Return the maximum frames per second when the application does not have input focus.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.GetTimeStepSmoothing">
            <summary>
             Return how many frames to average for timestep smoothing.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.GetPauseMinimized">
            <summary>
             Return whether to pause update events and audio when minimized.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.GetAutoExit">
            <summary>
             Return whether to exit automatically on exit request.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.IsInitialized">
            <summary>
             Return whether engine has been initialized.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.IsExiting">
            <summary>
             Return whether exit has been requested.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.IsHeadless">
            <summary>
             Return whether the engine has been created in headless mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.Update">
            <summary>
             Send frame update events.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.Render">
            <summary>
             Render after frame update.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.ApplyFrameLimit">
            <summary>
             Get the timestep for the next frame and sleep for frame limiting if necessary.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.SetPaused(System.Boolean)">
            <summary>
             Set whether the engine is paused.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.SetRunNextPausedFrame(System.Boolean)">
            <summary>
             Set whether to run the next frame even if paused (for stepping frame by frame)
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.IsPaused">
            <summary>
             Return whether the engine is paused.
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.GetRunNextPausedFrame">
            <summary>
             Return whether to run the next frame even if paused (for stepping frame by frame)
            </summary>
        </member>
        <member name="M:AtomicEngine.Engine.GetFps">
            <summary>
             Return the engine's current framerate (updated at 1/2 second intervals)
            </summary>
        </member>
        <member name="M:AtomicEngine.ProcSky.GetUpdateGeometryType">
            <summary>
             Return whether a geometry update is necessary, and if it can happen in a worker thread.
            </summary>
        </member>
        <member name="T:AtomicEngine.Animation">
            <summary>
             Skeletal animation resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.Save(AtomicEngine.Serializer)">
            <summary>
             Save resource. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.SetAnimationName(System.String)">
            <summary>
             Set animation name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.SetLength(System.Single)">
            <summary>
             Set animation length.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.RemoveTrack(System.String)">
            <summary>
             Remove a track by name. Return true if was found and removed successfully. This is unsafe if the animation is currently used in playback.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.RemoveAllTracks">
            <summary>
             Remove all tracks. This is unsafe if the animation is currently used in playback.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.RemoveTrigger(System.UInt32)">
            <summary>
             Remove a trigger point by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.RemoveAllTriggers">
            <summary>
             Remove all trigger points.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.SetNumTriggers(System.UInt32)">
            <summary>
             Resize trigger point vector.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.Clone(System.String)">
            <summary>
             Clone the animation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.GetAnimationName">
            <summary>
             Return animation name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.GetAnimationNameHash">
            <summary>
             Return animation name hash.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.GetLength">
            <summary>
             Return animation length.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.GetNumTracks">
            <summary>
             Return number of animation tracks.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animation.GetNumTriggers">
            <summary>
             Return number of animation trigger points.
            </summary>
        </member>
        <member name="T:AtomicEngine.AnimationController">
            <summary>
             %Component that drives an AnimatedModel's animations.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.Update(System.Single)">
            <summary>
             Update the animations. Is called from HandleScenePostUpdate().
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.Play(System.String,System.Byte,System.Boolean,System.Single)">
            <summary>
             Play an animation and set full target weight. Name must be the full resource name. Return true on success.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.PlayExclusive(System.String,System.Byte,System.Boolean,System.Single)">
            <summary>
             Play an animation, set full target weight and fade out all other animations on the same layer. Name must be the full resource name. Return true on success.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.Stop(System.String,System.Single)">
            <summary>
             Stop an animation. Zero fadetime is instant. Return true on success.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.StopLayer(System.Byte,System.Single)">
            <summary>
             Stop all animations on a specific layer. Zero fadetime is instant.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.StopAll(System.Single)">
            <summary>
             Stop all animations. Zero fadetime is instant.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.Fade(System.String,System.Single,System.Single)">
            <summary>
             Fade animation to target weight. Return true on success.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.FadeOthers(System.String,System.Single,System.Single)">
            <summary>
             Fade other animations on the same layer to target weight. Return true on success.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.SetLayer(System.String,System.Byte)">
            <summary>
             Set animation blending layer priority. Return true on success.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.SetStartBone(System.String,System.String)">
            <summary>
             Set animation start bone. Return true on success.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.SetTime(System.String,System.Single)">
            <summary>
             Set animation time position. Return true on success.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.SetWeight(System.String,System.Single)">
            <summary>
             Set animation weight. Return true on success.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.SetLooped(System.String,System.Boolean)">
            <summary>
             Set animation looping. Return true on success.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.SetSpeed(System.String,System.Single)">
            <summary>
             Set animation speed. Return true on success.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.SetAutoFade(System.String,System.Single)">
            <summary>
             Set animation autofade at end (non-looped animations only.) Zero time disables. Return true on success.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.SetRemoveOnCompletion(System.String,System.Boolean)">
            <summary>
             Set whether an animation auto-removes on completion.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.SetBlendMode(System.String,AtomicEngine.AnimationBlendMode)">
            <summary>
             Set animation blending mode. Return true on success.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.IsPlaying(System.String)">
            <summary>
             Return whether an animation is active. Note that non-looping animations that are being clamped at the end also return true.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.IsFadingIn(System.String)">
            <summary>
             Return whether an animation is fading in.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.IsFadingOut(System.String)">
            <summary>
             Return whether an animation is fading out.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.IsAtEnd(System.String)">
            <summary>
             Return whether an animation is at its end. Will return false if the animation is not active at all.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.GetLayer(System.String)">
            <summary>
             Return animation blending layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.GetStartBoneName(System.String)">
            <summary>
             Return animation start bone name, or empty string if no such animation.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.GetTime(System.String)">
            <summary>
             Return animation time position.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.GetWeight(System.String)">
            <summary>
             Return animation weight.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.IsLooped(System.String)">
            <summary>
             Return animation looping.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.GetBlendMode(System.String)">
            <summary>
             Return animation blending mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.GetLength(System.String)">
            <summary>
             Return animation length.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.GetSpeed(System.String)">
            <summary>
             Return animation speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.GetFadeTarget(System.String)">
            <summary>
             Return animation fade target weight.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.GetFadeTime(System.String)">
            <summary>
             Return animation fade time.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.GetAutoFade(System.String)">
            <summary>
             Return animation autofade time.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.GetRemoveOnCompletion(System.String)">
            <summary>
             Return whether animation auto-removes on completion, or false if no such animation.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.GetAnimationState(System.String)">
            <summary>
             Find an animation state by animation name.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.SetAnimationsAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Set animation control structures attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.SetNodeAnimationStatesAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Set node animation states attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.GetAnimationsAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Return animation control structures attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationController.GetNodeAnimationStatesAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Return node animation states attribute.
            </summary>
        </member>
        <member name="T:AtomicEngine.AnimationState">
            <summary>
             %Animation instance.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.#ctor(System.IntPtr)">
            <summary>
             Construct with animated model and animation pointers.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.#ctor(AtomicEngine.Node,AtomicEngine.Animation)">
            <summary>
             Construct with root scene node and animation pointers.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.SetLooped(System.Boolean)">
            <summary>
             Set looping enabled/disabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.SetWeight(System.Single)">
            <summary>
             Set blending weight.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.SetBlendMode(AtomicEngine.AnimationBlendMode)">
            <summary>
             Set blending mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.SetTime(System.Single)">
            <summary>
             Set time position. Does not fire animation triggers.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.SetBoneWeight(System.UInt32,System.Single,System.Boolean)">
            <summary>
             Set per-bone blending weight by track index. Default is 1.0 (full), is multiplied  with the state's blending weight when applying the animation. Optionally recurses to child bones.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.SetBoneWeight(System.String,System.Single,System.Boolean)">
            <summary>
             Set per-bone blending weight by name.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.AddWeight(System.Single)">
            <summary>
             Modify blending weight.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.AddTime(System.Single)">
            <summary>
             Modify time position. %Animation triggers will be fired.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.SetLayer(System.Byte)">
            <summary>
             Set blending layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.GetAnimation">
            <summary>
             Return animation.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.GetModel">
            <summary>
             Return animated model this state belongs to (model mode.)
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.GetNode">
            <summary>
             Return root scene node this state controls (node hierarchy mode.)
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.GetBoneWeight(System.UInt32)">
            <summary>
             Return per-bone blending weight by track index.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.GetBoneWeight(System.String)">
            <summary>
             Return per-bone blending weight by name.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.GetTrackIndex(AtomicEngine.Node)">
            <summary>
             Return track index with matching bone node, or M_MAX_UNSIGNED if not found.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.GetTrackIndex(System.String)">
            <summary>
             Return track index by bone name, or M_MAX_UNSIGNED if not found.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.IsEnabled">
            <summary>
             Return whether weight is nonzero.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.IsLooped">
            <summary>
             Return whether looped.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.GetWeight">
            <summary>
             Return blending weight.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.GetBlendMode">
            <summary>
             Return blending mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.GetTime">
            <summary>
             Return time position.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.GetLength">
            <summary>
             Return animation length.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.GetLayer">
            <summary>
             Return blending layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.AnimationState.Apply">
            <summary>
             Apply the animation at the current time position.
            </summary>
        </member>
        <member name="T:AtomicEngine.Billboard">
            <summary>
             One billboard in the billboard set.
            </summary>
        </member>
        <member name="T:AtomicEngine.BillboardSet">
            <summary>
             %Billboard component.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.GetUpdateGeometryType">
            <summary>
             Return whether a geometry update is necessary, and if it can happen in a worker thread.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.SetMaterial(AtomicEngine.Material)">
            <summary>
             Set material.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.SetNumBillboards(System.UInt32)">
            <summary>
             Set number of billboards.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.SetRelative(System.Boolean)">
            <summary>
             Set whether billboards are relative to the scene node. Default true.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.SetScaled(System.Boolean)">
            <summary>
             Set whether scene node scale affects billboards' size. Default true.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.SetSorted(System.Boolean)">
            <summary>
             Set whether billboards are sorted by distance. Default false.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.SetFixedScreenSize(System.Boolean)">
            <summary>
             Set whether billboards have fixed size on screen (measured in pixels) regardless of distance to camera. Default false.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.SetFaceCameraMode(AtomicEngine.FaceCameraMode)">
            <summary>
             Set how the billboards should rotate in relation to the camera. Default is to follow camera rotation on all axes (FC_ROTATE_XYZ.)
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.SetMinAngle(System.Single)">
            <summary>
             Set minimal angle between billboard normal and look-at direction.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.SetAnimationLodBias(System.Single)">
            <summary>
             Set animation LOD bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.Commit">
            <summary>
             Mark for bounding box and vertex buffer update. Call after modifying the billboards.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.GetMaterial">
            <summary>
             Return material.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.GetNumBillboards">
            <summary>
             Return number of billboards.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.GetBillboards">
            <summary>
             Return all billboards.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.GetBillboard(System.UInt32)">
            <summary>
             Return billboard by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.IsRelative">
            <summary>
             Return whether billboards are relative to the scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.IsScaled">
            <summary>
             Return whether scene node scale affects billboards' size.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.IsSorted">
            <summary>
             Return whether billboards are sorted.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.IsFixedScreenSize">
            <summary>
             Return whether billboards are fixed screen size.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.GetFaceCameraMode">
            <summary>
             Return how the billboards rotate in relation to the camera.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.GetMinAngle">
            <summary>
             Return minimal angle between billboard normal and look-at direction.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.GetAnimationLodBias">
            <summary>
             Return animation LOD bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.SetBillboardsAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Set billboards attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.BillboardSet.GetBillboardsAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Return billboards attribute.
            </summary>
        </member>
        <member name="T:AtomicEngine.CustomGeometry">
            <summary>
             Custom geometry component.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.GetNumOccluderTriangles">
            <summary>
             Return number of occlusion geometry triangles.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.Clear">
            <summary>
             Clear all geometries.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.SetNumGeometries(System.UInt32)">
            <summary>
             Set number of geometries.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.SetDynamic(System.Boolean)">
            <summary>
             Set vertex buffer dynamic mode. A dynamic buffer should be faster to update frequently. Effective at the next Commit() call.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.BeginGeometry(System.UInt32,AtomicEngine.PrimitiveType)">
            <summary>
             Begin defining a geometry. Clears existing vertices in that index.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.DefineVertex(AtomicEngine.Vector3)">
            <summary>
             Define a vertex position. This begins a new vertex.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.DefineNormal(AtomicEngine.Vector3)">
            <summary>
             Define a vertex normal.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.DefineColor(AtomicEngine.Color)">
            <summary>
             Define a vertex color.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.DefineTexCoord(AtomicEngine.Vector2)">
            <summary>
             Define a vertex UV coordinate.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.DefineTangent(AtomicEngine.Vector4)">
            <summary>
             Define a vertex tangent.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.DefineGeometry(System.UInt32,AtomicEngine.PrimitiveType,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Set the primitive type, number of vertices and elements in a geometry, after which the vertices can be edited with GetVertex(). An alternative to BeginGeometry() / DefineVertex().
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.Commit">
            <summary>
             Update vertex buffer and calculate the bounding box. Call after finishing defining geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.SetMaterial(AtomicEngine.Material)">
            <summary>
             Set material on all geometries.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.SetMaterial(System.UInt32,AtomicEngine.Material)">
            <summary>
             Set material on one geometry. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.GetNumGeometries">
            <summary>
             Return number of geometries.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.GetNumVertices(System.UInt32)">
            <summary>
             Return number of vertices in a geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.IsDynamic">
            <summary>
             Return whether vertex buffer dynamic mode is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.CustomGeometry.GetMaterial(System.UInt32)">
            <summary>
             Return material by geometry index.
            </summary>
        </member>
        <member name="T:AtomicEngine.DebugRenderer">
            <summary>
             Debug geometry rendering component. Should be added only to the root scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.SetView(AtomicEngine.Camera)">
            <summary>
             Set the camera viewpoint. Call before rendering, or before adding geometry if you want to use culling.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.AddLine(AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.Color,System.Boolean)">
            <summary>
             Add a line.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.AddLine(AtomicEngine.Vector3,AtomicEngine.Vector3,System.UInt32,System.Boolean)">
            <summary>
             Add a line with color already converted to unsigned.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.AddTriangle(AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.Color,System.Boolean)">
            <summary>
             Add a triangle.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.AddTriangle(AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.Vector3,System.UInt32,System.Boolean)">
            <summary>
             Add a triangle with color already converted to unsigned.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.AddNode(AtomicEngine.Node,System.Single,System.Boolean)">
            <summary>
             Add a scene node represented as its coordinate axes.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.AddBoundingBox(AtomicEngine.BoundingBox,AtomicEngine.Color,System.Boolean)">
            <summary>
             Add a bounding box.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.AddFrustum(AtomicEngine.Frustum,AtomicEngine.Color,System.Boolean)">
            <summary>
             Add a frustum.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.AddCylinder(AtomicEngine.Vector3,System.Single,System.Single,AtomicEngine.Color,System.Boolean)">
            <summary>
             Add a cylinder
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.AddCircle(AtomicEngine.Vector3,AtomicEngine.Vector3,System.Single,AtomicEngine.Color,System.Int32,System.Boolean)">
            <summary>
             Add a circle.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.AddCross(AtomicEngine.Vector3,System.Single,AtomicEngine.Color,System.Boolean)">
            <summary>
             Add a cross.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.AddQuad(AtomicEngine.Vector3,System.Single,System.Single,AtomicEngine.Color,System.Boolean)">
            <summary>
             Add a quad on the XZ plane.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.Render">
            <summary>
             Update vertex buffer and render all debug lines. The viewport and rendertarget should be set before.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.GetFrustum">
            <summary>
             Return the view frustum.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.IsInside(AtomicEngine.BoundingBox)">
            <summary>
             Check whether a bounding box is inside the view frustum.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.HasContent">
            <summary>
             Return whether has something to render.
            </summary>
        </member>
        <member name="M:AtomicEngine.DebugRenderer.CreateGrid(AtomicEngine.Color,System.Boolean,AtomicEngine.Vector3)">
            <summary>
             Creates a grid on all axis
            </summary>
        </member>
        <member name="T:AtomicEngine.DecalSet">
            <summary>
             %Decal renderer component.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.ApplyAttributes">
            <summary>
             Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.GetUpdateGeometryType">
            <summary>
             Return whether a geometry update is necessary, and if it can happen in a worker thread.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.SetMaterial(AtomicEngine.Material)">
            <summary>
             Set material. The material should use a small negative depth bias to avoid Z-fighting.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.SetMaxVertices(System.UInt32)">
            <summary>
             Set maximum number of decal vertices.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.SetMaxIndices(System.UInt32)">
            <summary>
             Set maximum number of decal vertex indices.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.AddDecal(AtomicEngine.Drawable,AtomicEngine.Vector3,AtomicEngine.Quaternion,System.Single,System.Single,System.Single,AtomicEngine.Vector2,AtomicEngine.Vector2,System.Single,System.Single,System.UInt32)">
            <summary>
             Add a decal at world coordinates, using a target drawable's geometry for reference. If the decal needs to move with the target, the decal component should be created to the target's node. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.RemoveDecals(System.UInt32)">
            <summary>
             Remove n oldest decals.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.RemoveAllDecals">
            <summary>
             Remove all decals.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.GetMaterial">
            <summary>
             Return material.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.GetNumDecals">
            <summary>
             Return number of decals.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.GetNumVertices">
            <summary>
             Retur number of vertices in the decals.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.GetNumIndices">
            <summary>
             Retur number of vertex indices in the decals.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.GetMaxVertices">
            <summary>
             Return maximum number of decal vertices.
            </summary>
        </member>
        <member name="M:AtomicEngine.DecalSet.GetMaxIndices">
            <summary>
             Return maximum number of decal vertex indices.
            </summary>
        </member>
        <member name="T:AtomicEngine.Drawable">
            <summary>
             Base class for visible components.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetUpdateGeometryType">
            <summary>
             Return whether a geometry update is necessary, and if it can happen in a worker thread.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetNumOccluderTriangles">
            <summary>
             Return number of occlusion geometry triangles.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetDrawDistance(System.Single)">
            <summary>
             Set draw distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetShadowDistance(System.Single)">
            <summary>
             Set shadow draw distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetLodBias(System.Single)">
            <summary>
             Set LOD bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetViewMask(System.UInt32)">
            <summary>
             Set view mask. Is and'ed with camera's view mask to see if the object should be rendered.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetLightMask(System.UInt32)">
            <summary>
             Set light mask. Is and'ed with light's and zone's light mask to see if the object should be lit.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetShadowMask(System.UInt32)">
            <summary>
             Set shadow mask. Is and'ed with light's light mask and zone's shadow mask to see if the object should be rendered to a shadow map.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetZoneMask(System.UInt32)">
            <summary>
             Set zone mask. Is and'ed with zone's zone mask to see if the object should belong to the zone.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetMaxLights(System.UInt32)">
            <summary>
             Set maximum number of per-pixel lights. Default 0 is unlimited.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetCastShadows(System.Boolean)">
            <summary>
             Set shadowcaster flag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetOccluder(System.Boolean)">
            <summary>
             Set occlusion flag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetOccludee(System.Boolean)">
            <summary>
             Set occludee flag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.MarkForUpdate">
            <summary>
             Mark for update and octree reinsertion. Update is automatically queued when the drawable's scene node moves or changes scale.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetBoundingBox">
            <summary>
             Return local space bounding box. May not be applicable or properly updated on all drawables.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetWorldBoundingBox">
            <summary>
             Return world-space bounding box.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetDrawableFlags">
            <summary>
             Return drawable flags.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetDrawDistance">
            <summary>
             Return draw distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetShadowDistance">
            <summary>
             Return shadow draw distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetLodBias">
            <summary>
             Return LOD bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetViewMask">
            <summary>
             Return view mask.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetLightMask">
            <summary>
             Return light mask.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetShadowMask">
            <summary>
             Return shadow mask.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetZoneMask">
            <summary>
             Return zone mask.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetMaxLights">
            <summary>
             Return maximum number of per-pixel lights.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetCastShadows">
            <summary>
             Return shadowcaster flag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.IsOccluder">
            <summary>
             Return occluder flag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.IsOccludee">
            <summary>
             Return occludee flag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.IsInView">
            <summary>
             Return whether is in view this frame from any viewport camera. Excludes shadow map cameras.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.IsInView(AtomicEngine.Camera)">
            <summary>
             Return whether is in view of a specific camera this frame. Pass in a null camera to allow any camera, including shadow map cameras.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetZone(AtomicEngine.Zone,System.Boolean)">
            <summary>
             Set new zone. Zone assignment may optionally be temporary, meaning it needs to be re-evaluated on the next frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetSortValue(System.Single)">
            <summary>
             Set sorting value.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetMinMaxZ(System.Single,System.Single)">
            <summary>
             Set view-space depth bounds.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.MarkInView(System.UInt32)">
            <summary>
             Mark in view without specifying a camera. Used for shadow casters.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.LimitLights">
            <summary>
             Sort and limit per-pixel lights to maximum allowed. Convert extra lights into vertex lights.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.LimitVertexLights(System.Boolean)">
            <summary>
             Sort and limit per-vertex lights to maximum allowed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.SetBasePass(System.UInt32)">
            <summary>
             Set base pass flag for a batch.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetZone">
            <summary>
             Return current zone.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.IsZoneDirty">
            <summary>
             Return whether current zone is inconclusive or dirty due to the drawable moving.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetDistance">
            <summary>
             Return distance from camera.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetLodDistance">
            <summary>
             Return LOD scaled distance from camera.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetSortValue">
            <summary>
             Return sorting value.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.HasBasePass(System.UInt32)">
            <summary>
             Return whether has a base pass.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetLights">
            <summary>
             Return per-pixel lights.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetVertexLights">
            <summary>
             Return per-vertex lights.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetFirstLight">
            <summary>
             Return the first added per-pixel light.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetMinZ">
            <summary>
             Return the minimum view-space depth.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.GetMaxZ">
            <summary>
             Return the maximum view-space depth.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.AddLight(AtomicEngine.Light)">
            <summary>
             Add a per-pixel light affecting the object this frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Drawable.AddVertexLight(AtomicEngine.Light)">
            <summary>
             Add a per-vertex light affecting the object this frame.
            </summary>
        </member>
        <member name="T:AtomicEngine.Model">
            <summary>
             3D model resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.EndLoad">
            <summary>
             Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.Save(AtomicEngine.Serializer)">
            <summary>
             Save resource. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.SetBoundingBox(AtomicEngine.BoundingBox)">
            <summary>
             Set local-space bounding box.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.SetNumGeometries(System.UInt32)">
            <summary>
             Set number of geometries.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.SetNumGeometryLodLevels(System.UInt32,System.UInt32)">
            <summary>
             Set number of LOD levels in a geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.SetGeometryCenter(System.UInt32,AtomicEngine.Vector3)">
            <summary>
             Set geometry center.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.Clone(System.String)">
            <summary>
             Clone the model. The geometry data is deep-copied and can be modified in the clone without affecting the original.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.GetBoundingBox">
            <summary>
             Return bounding box.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.GetVertexBuffers">
            <summary>
             Return vertex buffers.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.GetNumGeometries">
            <summary>
             Return number of geometries.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.GetNumGeometryLodLevels(System.UInt32)">
            <summary>
             Return number of LOD levels in geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.GetGeometryCenter(System.UInt32)">
            <summary>
             Return geometry center by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.GetNumMorphs">
            <summary>
             Return number of vertex morphs.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.GetMorphRangeStart(System.UInt32)">
            <summary>
             Return vertex buffer morph range start.
            </summary>
        </member>
        <member name="M:AtomicEngine.Model.GetMorphRangeCount(System.UInt32)">
            <summary>
             Return vertex buffer morph range vertex count.
            </summary>
        </member>
        <member name="T:AtomicEngine.ParticleEffect">
            <summary>
             %Particle effect definition.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.EndLoad">
            <summary>
             Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.Save(AtomicEngine.Serializer)">
            <summary>
             Save resource. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMaterial(AtomicEngine.Material)">
            <summary>
             Set material.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetNumParticles(System.UInt32)">
            <summary>
             Set maximum number of particles.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetUpdateInvisible(System.Boolean)">
            <summary>
             Set whether to update when particles are not visible.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetRelative(System.Boolean)">
            <summary>
             Set whether billboards are relative to the scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetScaled(System.Boolean)">
            <summary>
             Set whether scene node scale affects billboards' size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetSorted(System.Boolean)">
            <summary>
             Set whether billboards are sorted by distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetFixedScreenSize(System.Boolean)">
            <summary>
             Set whether billboards have fixed size on screen (measured in pixels) regardless of distance to camera.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetAnimationLodBias(System.Single)">
            <summary>
             Set animation LOD bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetEmitterType(AtomicEngine.EmitterType)">
            <summary>
             Set emitter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetEmitterSize(AtomicEngine.Vector3)">
            <summary>
             Set emitter size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMinDirection(AtomicEngine.Vector3)">
            <summary>
             Set negative direction limit.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMaxDirection(AtomicEngine.Vector3)">
            <summary>
             Set positive direction limit.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetConstantForce(AtomicEngine.Vector3)">
            <summary>
             Set constant force acting on particles.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetDampingForce(System.Single)">
            <summary>
             Set particle velocity damping force.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetActiveTime(System.Single)">
            <summary>
             Set emission active period length (0 = infinite.)
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetInactiveTime(System.Single)">
            <summary>
             Set emission inactive period length (0 = infinite.)
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMinEmissionRate(System.Single)">
            <summary>
             Set minimum emission rate.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMaxEmissionRate(System.Single)">
            <summary>
             Set maximum emission rate.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMinParticleSize(AtomicEngine.Vector2)">
            <summary>
             Set particle minimum size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMaxParticleSize(AtomicEngine.Vector2)">
            <summary>
             Set particle maximum size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMinTimeToLive(System.Single)">
            <summary>
             Set particle minimum time to live.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMaxTimeToLive(System.Single)">
            <summary>
             Set particle maximum time to live.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMinVelocity(System.Single)">
            <summary>
             Set particle minimum velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMaxVelocity(System.Single)">
            <summary>
             Set particle maximum velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMinRotation(System.Single)">
            <summary>
             Set particle minimum rotation.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMaxRotation(System.Single)">
            <summary>
             Set particle maximum rotation.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMinRotationSpeed(System.Single)">
            <summary>
             Set particle minimum rotation speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetMaxRotationSpeed(System.Single)">
            <summary>
             Set particle maximum rotation speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetSizeAdd(System.Single)">
            <summary>
             Set particle size additive modifier.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetSizeMul(System.Single)">
            <summary>
             Set particle size multiplicative modifier.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetFaceCameraMode(AtomicEngine.FaceCameraMode)">
            <summary>
             Set how the particles should rotate in relation to the camera. Default is to follow camera rotation on all axes (FC_ROTATE_XYZ.)
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.AddColorTime(AtomicEngine.Color,System.Single)">
            <summary>
             Add a color frame sorted in the correct position based on time.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.RemoveColorFrame(System.UInt32)">
            <summary>
             Remove color frame at index
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetNumColorFrames(System.UInt32)">
            <summary>
             Set number of color frames.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SortColorFrames">
            <summary>
             Sort the list of color frames based on time.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.AddTextureTime(AtomicEngine.Rect,System.Single)">
            <summary>
             Add a texture frame sorted in the correct position based on time.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.RemoveTextureFrame(System.UInt32)">
            <summary>
             Remove texture frame at index
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SetNumTextureFrames(System.UInt32)">
            <summary>
             Set number of texture frames.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.SortTextureFrames">
            <summary>
             Sort the list of texture frames based on time.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.Clone(System.String)">
            <summary>
             Clone the particle effect.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMaterial">
            <summary>
             Return material.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetNumParticles">
            <summary>
             Return maximum number of particles.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetUpdateInvisible">
            <summary>
             Return whether to update when particles are not visible.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.IsRelative">
            <summary>
             Return whether billboards are relative to the scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.IsScaled">
            <summary>
             Return whether scene node scale affects billboards' size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.IsSorted">
            <summary>
             Return whether billboards are sorted.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.IsFixedScreenSize">
            <summary>
             Return whether billboards are fixed screen size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetAnimationLodBias">
            <summary>
             Return animation Lod bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetEmitterType">
            <summary>
             Return emitter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetEmitterSize">
            <summary>
             Return emitter size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMinDirection">
            <summary>
             Return negative direction limit.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMaxDirection">
            <summary>
             Return positive direction limit.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetConstantForce">
            <summary>
             Return constant force acting on particles.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetDampingForce">
            <summary>
             Return particle velocity damping force.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetActiveTime">
            <summary>
             Return emission active period length (0 = infinite.)
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetInactiveTime">
            <summary>
             Return emission inactive period length (0 = infinite.)
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMinEmissionRate">
            <summary>
             Return minimum emission rate.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMaxEmissionRate">
            <summary>
             Return maximum emission rate.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMinParticleSize">
            <summary>
             Return particle minimum size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMaxParticleSize">
            <summary>
             Return particle maximum size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMinTimeToLive">
            <summary>
             Return particle minimum time to live.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMaxTimeToLive">
            <summary>
             Return particle maximum time to live.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMinVelocity">
            <summary>
             Return particle minimum velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMaxVelocity">
            <summary>
             Return particle maximum velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMinRotation">
            <summary>
             Return particle minimum rotation.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMaxRotation">
            <summary>
             Return particle maximum rotation.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMinRotationSpeed">
            <summary>
             Return particle minimum rotation speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetMaxRotationSpeed">
            <summary>
             Return particle maximum rotation speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetSizeAdd">
            <summary>
             Return particle size additive modifier.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetSizeMul">
            <summary>
             Return particle size multiplicative modifier.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetNumColorFrames">
            <summary>
             Return number of color animation frames.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetNumTextureFrames">
            <summary>
             Return number of texture animation frames.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetFaceCameraMode">
            <summary>
             Return how the particles rotate in relation to the camera.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetRandomDirection">
            <summary>
             Return random direction.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetRandomSize">
            <summary>
             Return random size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetRandomVelocity">
            <summary>
             Return random velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetRandomTimeToLive">
            <summary>
             Return random timetolive.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetRandomRotationSpeed">
            <summary>
             Return random rotationspeed.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEffect.GetRandomRotation">
            <summary>
             Return random rotation.
            </summary>
        </member>
        <member name="T:AtomicEngine.ParticleEmitter">
            <summary>
             %Particle emitter component.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.SetEffect(AtomicEngine.ParticleEffect)">
            <summary>
             Set particle effect.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.SetNumParticles(System.UInt32)">
            <summary>
             Set maximum number of particles.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.SetEmitting(System.Boolean)">
            <summary>
             Set whether should be emitting. If the state was changed, also resets the emission period timer.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.SetSerializeParticles(System.Boolean)">
            <summary>
             Set whether particles should be serialized. Default true, set false to reduce scene file size.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.SetAutoRemoveMode(AtomicEngine.AutoRemoveMode)">
            <summary>
            / Set to remove either the emitter component or its owner node from the scene automatically on particle effect completion. Disabled by default.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.ResetEmissionTimer">
            <summary>
             Reset the emission period timer.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.RemoveAllParticles">
            <summary>
             Remove all current particles.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.Reset">
            <summary>
             Reset the particle emitter completely. Removes current particles, sets emitting state on, and resets the emission timer.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.ApplyEffect">
            <summary>
             Apply not continuously updated values such as the material, the number of particles and sorting mode from the particle effect. Call this if you change the effect programmatically.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.GetEffect">
            <summary>
             Return particle effect.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.GetNumParticles">
            <summary>
             Return maximum number of particles.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.IsEmitting">
            <summary>
             Return whether is currently emitting.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.GetSerializeParticles">
            <summary>
             Return whether particles are to be serialized.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.GetAutoRemoveMode">
            <summary>
             Return automatic removal mode on particle effect completion.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.SetParticlesAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Set particles attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.GetParticlesAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Return particles attribute. Returns particle amount only if particles are not to be serialized.
            </summary>
        </member>
        <member name="M:AtomicEngine.ParticleEmitter.GetParticleBillboardsAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Return billboards attribute. Returns billboard amount only if particles are not to be serialized.
            </summary>
        </member>
        <member name="T:AtomicEngine.Renderer">
            <summary>
             High-level rendering subsystem. Manages drawing of 3D views.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetNumViewports(System.UInt32)">
            <summary>
             Set number of backbuffer viewports to render.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetViewport(System.UInt32,AtomicEngine.Viewport)">
            <summary>
             Set a backbuffer viewport.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetDefaultRenderPath(AtomicEngine.RenderPath)">
            <summary>
             Set default renderpath.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetDefaultRenderPath(AtomicEngine.XMLFile)">
            <summary>
             Set default renderpath from an XML file.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetDefaultTechnique(AtomicEngine.Technique)">
            <summary>
             Set default non-textured material technique.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetHDRRendering(System.Boolean)">
            <summary>
             Set HDR rendering on/off.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetSpecularLighting(System.Boolean)">
            <summary>
             Set specular lighting on/off.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetTextureAnisotropy(System.Int32)">
            <summary>
             Set default texture max anisotropy level.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetTextureFilterMode(AtomicEngine.TextureFilterMode)">
            <summary>
             Set default texture filtering.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetTextureQuality(System.Int32)">
            <summary>
             Set texture quality level. See the QUALITY constants in GraphicsDefs.h.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetMaterialQuality(System.Int32)">
            <summary>
             Set material quality level. See the QUALITY constants in GraphicsDefs.h.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetDrawShadows(System.Boolean)">
            <summary>
             Set shadows on/off.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetShadowMapSize(System.Int32)">
            <summary>
             Set shadow map resolution.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetShadowQuality(AtomicEngine.ShadowQuality)">
            <summary>
             Set shadow quality mode. See the SHADOWQUALITY enum in GraphicsDefs.h.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetShadowSoftness(System.Single)">
            <summary>
             Set shadow softness, only works when SHADOWQUALITY_BLUR_VSM is used.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetVSMShadowParameters(System.Single,System.Single)">
            <summary>
             Set shadow parameters when VSM is used, they help to reduce light bleeding. LightBleeding must be in [0, 1[
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetReuseShadowMaps(System.Boolean)">
            <summary>
             Set reuse of shadow maps. Default is true. If disabled, also transparent geometry can be shadowed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetMaxShadowMaps(System.Int32)">
            <summary>
             Set maximum number of shadow maps created for one resolution. Only has effect if reuse of shadow maps is disabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetDynamicInstancing(System.Boolean)">
            <summary>
             Set dynamic instancing on/off. When on (default), drawables using the same static-type geometry and material will be automatically combined to an instanced draw call.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetNumExtraInstancingBufferElements(System.Int32)">
            <summary>
             Set number of extra instancing buffer elements. Default is 0. Extra 4-vectors are available through TEXCOORD7 and further.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetMinInstances(System.Int32)">
            <summary>
             Set minimum number of instances required in a batch group to render as instanced.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetMaxSortedInstances(System.Int32)">
            <summary>
             Set maximum number of sorted instances per batch group. If exceeded, instances are rendered unsorted.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetMaxOccluderTriangles(System.Int32)">
            <summary>
             Set maximum number of occluder triangles.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetOcclusionBufferSize(System.Int32)">
            <summary>
             Set occluder buffer width.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetOccluderSizeThreshold(System.Single)">
            <summary>
             Set required screen size (1.0 = full screen) for occluders.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetThreadedOcclusion(System.Boolean)">
            <summary>
             Set whether to thread occluder rendering. Default false.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetMobileShadowBiasMul(System.Single)">
            <summary>
             Set shadow depth bias multiplier for mobile platforms to counteract possible worse shadow map precision. Default 1.0 (no effect.)
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetMobileShadowBiasAdd(System.Single)">
            <summary>
             Set shadow depth bias addition for mobile platforms to counteract possible worse shadow map precision. Default 0.0 (no effect.)
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetMobileNormalOffsetMul(System.Single)">
            <summary>
             Set shadow normal offset multiplier for mobile platforms to counteract possible worse shadow map precision. Default 1.0 (no effect.)
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.ReloadShaders">
            <summary>
             Force reload of shaders.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.ApplyShadowMapFilter(AtomicEngine.View,AtomicEngine.Texture2D,System.Single)">
            <summary>
             Apply post processing filter to the shadow map. Called by View.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetNumViewports">
            <summary>
             Return number of backbuffer viewports.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetViewport(System.UInt32)">
            <summary>
             Return backbuffer viewport by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetDefaultRenderPath">
            <summary>
             Return default renderpath.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetDefaultTechnique">
            <summary>
             Return default non-textured material technique.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetHDRRendering">
            <summary>
             Return whether HDR rendering is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetSpecularLighting">
            <summary>
             Return whether specular lighting is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetDrawShadows">
            <summary>
             Return whether drawing shadows is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetTextureAnisotropy">
            <summary>
             Return default texture max. anisotropy level.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetTextureFilterMode">
            <summary>
             Return default texture filtering mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetTextureQuality">
            <summary>
             Return texture quality level.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetMaterialQuality">
            <summary>
             Return material quality level.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetShadowMapSize">
            <summary>
             Return shadow map resolution.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetShadowQuality">
            <summary>
             Return shadow quality.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetShadowSoftness">
            <summary>
             Return shadow softness.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetVSMShadowParameters">
            <summary>
             Return VSM shadow parameters
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetReuseShadowMaps">
            <summary>
             Return whether shadow maps are reused.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetMaxShadowMaps">
            <summary>
             Return maximum number of shadow maps per resolution.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetDynamicInstancing">
            <summary>
             Return whether dynamic instancing is in use.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetNumExtraInstancingBufferElements">
            <summary>
             Return number of extra instancing buffer elements.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetMinInstances">
            <summary>
             Return minimum number of instances required in a batch group to render as instanced.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetMaxSortedInstances">
            <summary>
             Return maximum number of sorted instances per batch group.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetMaxOccluderTriangles">
            <summary>
             Return maximum number of occluder triangles.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetOcclusionBufferSize">
            <summary>
             Return occlusion buffer width.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetOccluderSizeThreshold">
            <summary>
             Return occluder screen size threshold.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetThreadedOcclusion">
            <summary>
             Return whether occlusion rendering is threaded.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetMobileShadowBiasMul">
            <summary>
             Return shadow depth bias multiplier for mobile platforms.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetMobileShadowBiasAdd">
            <summary>
             Return shadow depth bias addition for mobile platforms.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetMobileNormalOffsetMul">
            <summary>
             Return shadow normal offset multiplier for mobile platforms.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetNumViews">
            <summary>
             Return number of views rendered.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetNumPrimitives">
            <summary>
             Return number of primitives rendered.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetNumBatches">
            <summary>
             Return number of batches rendered.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetNumGeometries(System.Boolean)">
            <summary>
             Return number of geometries rendered.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetNumLights(System.Boolean)">
            <summary>
             Return number of lights rendered.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetNumShadowMaps(System.Boolean)">
            <summary>
             Return number of shadow maps rendered.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetNumOccluders(System.Boolean)">
            <summary>
             Return number of occluders rendered.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetDefaultZone">
            <summary>
             Return the default zone.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetDefaultMaterial">
            <summary>
             Return the default material.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetDefaultLightRamp">
            <summary>
             Return the default range attenuation texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetDefaultLightSpot">
            <summary>
             Return the default spotlight attenuation texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetFaceSelectCubeMap">
            <summary>
             Return the shadowed pointlight face selection cube map.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetIndirectionCubeMap">
            <summary>
             Return the shadowed pointlight indirection cube map.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetInstancingBuffer">
            <summary>
             Return the instancing vertex buffer
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.Update(System.Single)">
            <summary>
             Update for rendering. Called by HandleRenderUpdate().
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.Render">
            <summary>
             Render. Called by Engine.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.DrawDebugGeometry(System.Boolean)">
            <summary>
             Add debug geometry to the debug renderer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.QueueRenderSurface(AtomicEngine.RenderSurface)">
            <summary>
             Queue a render surface's viewports for rendering. Called by the surface, or by View.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.QueueViewport(AtomicEngine.RenderSurface,AtomicEngine.Viewport)">
            <summary>
             Queue a viewport for rendering. Null surface means backbuffer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetShadowMap(AtomicEngine.Light,AtomicEngine.Camera,System.UInt32,System.UInt32)">
            <summary>
             Allocate a shadow map. If shadow map reuse is disabled, a different map is returned each time.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetScreenBuffer(System.Int32,System.Int32,System.UInt32,System.Boolean,System.Boolean,System.Boolean,System.UInt32)">
            <summary>
             Allocate a rendertarget or depth-stencil texture for deferred rendering or postprocessing. Should only be called during actual rendering, not before.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetDepthStencil(System.Int32,System.Int32)">
            <summary>
             Allocate a depth-stencil surface that does not need to be readable. Should only be called during actual rendering, not before.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetShadowCamera">
            <summary>
             Allocate a temporary shadow camera and a scene node for it. Is thread-safe.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.StorePreparedView(AtomicEngine.View,AtomicEngine.Camera)">
            <summary>
             Mark a view as prepared by the specified culling camera.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetPreparedView(AtomicEngine.Camera)">
            <summary>
             Return a prepared view if exists for the specified camera. Used to avoid duplicate view preparation CPU work.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SetCullMode(AtomicEngine.CullMode,AtomicEngine.Camera)">
            <summary>
             Set cull mode while taking possible projection flipping into account.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.ResizeInstancingBuffer(System.UInt32)">
            <summary>
             Ensure sufficient size of the instancing vertex buffer. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.SaveScreenBufferAllocations">
            <summary>
             Save the screen buffer allocation status. Called by View.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.RestoreScreenBufferAllocations">
            <summary>
             Restore the screen buffer allocation status. Called by View.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.OptimizeLightByScissor(AtomicEngine.Light,AtomicEngine.Camera)">
            <summary>
             Optimize a light by scissor rectangle.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.OptimizeLightByStencil(AtomicEngine.Light,AtomicEngine.Camera)">
            <summary>
             Optimize a light by marking it to the stencil buffer and setting a stencil test.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetLightScissor(AtomicEngine.Light,AtomicEngine.Camera)">
            <summary>
             Return a scissor rectangle for a light.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.GetActualView(AtomicEngine.View)">
            <summary>
             Return a view or its source view if it uses one. Used internally for render statistics.
            </summary>
        </member>
        <member name="M:AtomicEngine.Renderer.ReloadTextures">
            <summary>
             Reload textures.
            </summary>
        </member>
        <member name="T:AtomicEngine.RenderSurface">
            <summary>
             %Color or depth-stencil surface that can be rendered into.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.#ctor(System.IntPtr)">
            <summary>
             Construct with parent texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.SetNumViewports(System.UInt32)">
            <summary>
             Set number of viewports.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.SetViewport(System.UInt32,AtomicEngine.Viewport)">
            <summary>
             Set viewport.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.SetUpdateMode(AtomicEngine.RenderSurfaceUpdateMode)">
            <summary>
             Set viewport update mode. Default is to update when visible.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.SetLinkedRenderTarget(AtomicEngine.RenderSurface)">
            <summary>
             Set linked color rendertarget.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.SetLinkedDepthStencil(AtomicEngine.RenderSurface)">
            <summary>
             Set linked depth-stencil surface.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.QueueUpdate">
            <summary>
             Queue manual update of the viewport(s).
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.Release">
            <summary>
             Release surface.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.OnDeviceLost">
            <summary>
             Mark the GPU resource destroyed on graphics context destruction. Only used on OpenGL.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.CreateRenderBuffer(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
             Create renderbuffer that cannot be sampled as a texture. Only used on OpenGL.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.GetWidth">
            <summary>
             Return width.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.GetHeight">
            <summary>
             Return height.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.GetUsage">
            <summary>
             Return usage.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.GetNumViewports">
            <summary>
             Return number of viewports.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.GetViewport(System.UInt32)">
            <summary>
             Return viewport by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.GetUpdateMode">
            <summary>
             Return viewport update mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.GetLinkedRenderTarget">
            <summary>
             Return linked color rendertarget.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.GetLinkedDepthStencil">
            <summary>
             Return linked depth-stencil surface.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.IsUpdateQueued">
            <summary>
             Return whether manual update queued. Called internally.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.ResetUpdateQueued">
            <summary>
             Reset update queued flag. Called internally.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.GetParentTexture">
            <summary>
             Return parent texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.GetTarget">
            <summary>
             Return surface's OpenGL target.
            </summary>
        </member>
        <member name="M:AtomicEngine.RenderSurface.GetRenderBuffer">
            <summary>
             Return OpenGL renderbuffer if created.
            </summary>
        </member>
        <member name="T:AtomicEngine.RibbonTrail">
            <summary>
             Drawable component that creates a tail.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.GetUpdateGeometryType">
            <summary>
             Return whether a geometry update is necessary, and if it can happen in a worker thread.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.SetMaterial(AtomicEngine.Material)">
            <summary>
             Set material.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.SetVertexDistance(System.Single)">
            <summary>
             Set distance between points.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.SetWidth(System.Single)">
            <summary>
             Set width of the tail. Only works for face camera trail type.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.SetStartColor(AtomicEngine.Color)">
            <summary>
             Set vertex blended color for start of trail.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.SetEndColor(AtomicEngine.Color)">
            <summary>
             Set vertex blended scale for end of trail.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.SetStartScale(System.Single)">
            <summary>
             Set vertex blended color for start of trail.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.SetEndScale(System.Single)">
            <summary>
             Set vertex blended scale for end of trail.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.SetTrailType(AtomicEngine.TrailType)">
            <summary>
             Set how the trail behave.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.SetSorted(System.Boolean)">
            <summary>
             Set whether tails are sorted by distance. Default false.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.SetLifetime(System.Single)">
            <summary>
             Set tail time to live.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.SetEmitting(System.Boolean)">
            <summary>
             Set whether trail should be emitting.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.SetUpdateInvisible(System.Boolean)">
            <summary>
             Set whether to update when trail emiiter are not visible.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.SetTailColumn(System.UInt32)">
            <summary>
             Set number of column for every tails. Can be useful for fixing distortion at high angle.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.SetAnimationLodBias(System.Single)">
            <summary>
             Set animation LOD bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.Commit">
            <summary>
             Mark for bounding box and vertex buffer update. Call after modifying the trails.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.GetMaterial">
            <summary>
             Return material.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.GetVertexDistance">
            <summary>
             Get distance between points.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.GetWidth">
            <summary>
             Get width of the trail.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.GetStartColor">
            <summary>
             Get vertex blended color for start of trail.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.GetEndColor">
            <summary>
             Get vertex blended color for end of trail.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.GetStartScale">
            <summary>
             Get vertex blended scale for start of trail.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.GetEndScale">
            <summary>
             Get vertex blended scale for end of trail.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.IsSorted">
            <summary>
             Return whether tails are sorted.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.GetLifetime">
            <summary>
             Return tail time to live.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.GetAnimationLodBias">
            <summary>
             Return animation LOD bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.GetTrailType">
            <summary>
             Return how the trail behave.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.GetTailColumn">
            <summary>
             Get number of column for tails.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.IsEmitting">
            <summary>
             Return whether is currently emitting.
            </summary>
        </member>
        <member name="M:AtomicEngine.RibbonTrail.GetUpdateInvisible">
            <summary>
             Return whether to update when trail emitter are not visible.
            </summary>
        </member>
        <member name="T:AtomicEngine.Shader">
            <summary>
             %Shader resource consisting of several shader variations.
            </summary>
        </member>
        <member name="M:AtomicEngine.Shader.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Shader.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Shader.EndLoad">
            <summary>
             Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Shader.GetVariation(AtomicEngine.ShaderType,System.String)">
            <summary>
             Return a variation with defines. Separate multiple defines with spaces.
            </summary>
        </member>
        <member name="M:AtomicEngine.Shader.GetSourceCode(AtomicEngine.ShaderType)">
            <summary>
             Return either vertex or pixel shader source code.
            </summary>
        </member>
        <member name="M:AtomicEngine.Shader.GetTimeStamp">
            <summary>
             Return the latest timestamp of the shader code and its includes.
            </summary>
        </member>
        <member name="T:AtomicEngine.ShaderPrecache">
            <summary>
             Utility class for collecting used shader combinations during runtime for precaching.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderPrecache.#ctor(System.IntPtr)">
            <summary>
             Construct and begin collecting shader combinations. Load existing combinations from XML if the file exists.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderPrecache.StoreShaders(AtomicEngine.ShaderVariation,AtomicEngine.ShaderVariation)">
            <summary>
             Collect a shader combination. Called by Graphics when shaders have been set.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderPrecache.LoadShaders(AtomicEngine.Graphics,AtomicEngine.Deserializer)">
            <summary>
             Load shaders from an XML file.
            </summary>
        </member>
        <member name="T:AtomicEngine.ShaderVariation">
            <summary>
             Vertex or pixel shader on the GPU.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.OnDeviceLost">
            <summary>
             Mark the GPU resource destroyed on graphics context destruction.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.Release">
            <summary>
             Release the shader.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.Create">
            <summary>
             Compile the shader. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.SetName(System.String)">
            <summary>
             Set name.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.SetDefines(System.String)">
            <summary>
             Set defines.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.GetOwner">
            <summary>
             Return the owner resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.GetShaderType">
            <summary>
             Return shader type.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.GetName">
            <summary>
             Return shader name.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.GetFullName">
            <summary>
             Return full shader name.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.HasParameter(AtomicEngine.StringHash)">
            <summary>
             Return whether uses a parameter. Not applicable on OpenGL, where this information is contained in ShaderProgram instead.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.HasTextureUnit(AtomicEngine.TextureUnit)">
            <summary>
             Return whether uses a texture unit (only for pixel shaders.) Not applicable on OpenGL, where this information is contained in ShaderProgram instead.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.GetElementHash">
            <summary>
             Return vertex element hash.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.GetDefines">
            <summary>
             Return defines.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.GetCompilerOutput">
            <summary>
             Return compile error/warning string.
            </summary>
        </member>
        <member name="M:AtomicEngine.ShaderVariation.GetDefinesClipPlane">
            <summary>
             Return defines with the CLIPPLANE define appended. Used internally on Direct3D11 only, will be empty on other APIs.
            </summary>
        </member>
        <member name="T:AtomicEngine.Skybox">
            <summary>
             Static model component with fixed position in relation to the camera.
            </summary>
        </member>
        <member name="M:AtomicEngine.Skybox.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="T:AtomicEngine.StaticModel">
            <summary>
             Static model component.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.GetNumOccluderTriangles">
            <summary>
             Return number of occlusion geometry triangles.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.SetModel(AtomicEngine.Model)">
            <summary>
             Set model.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.SetMaterial(AtomicEngine.Material)">
            <summary>
             Set material on all geometries.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.SetMaterial(System.UInt32,AtomicEngine.Material)">
            <summary>
             Set material on one geometry. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.SetOcclusionLodLevel(System.UInt32)">
            <summary>
             Set occlusion LOD level. By default (M_MAX_UNSIGNED) same as visible.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.ApplyMaterialList(System.String)">
            <summary>
             Apply default materials from a material list file. If filename is empty (default), the model's resource name with extension .txt will be used.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.GetModel">
            <summary>
             Return model.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.GetNumGeometries">
            <summary>
             Return number of geometries.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.GetMaterial(System.UInt32)">
            <summary>
             Return material by geometry index.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.GetOcclusionLodLevel">
            <summary>
             Return occlusion LOD level.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.IsInside(AtomicEngine.Vector3)">
            <summary>
             Determines if the given world space point is within the model geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.IsInsideLocal(AtomicEngine.Vector3)">
            <summary>
             Determines if the given local space point is within the model geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.GetGeometryVisible(System.String)">
            <summary>
             Get whether a named submesh is visible
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.ShowGeometry(System.String)">
            <summary>
             Show a named submesh
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.HideGeometry(System.String)">
            <summary>
             Hide a named submesh
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModel.GetGeometryHidden">
            <summary>
             Returns true if any geometry is hidden in the model
            </summary>
        </member>
        <member name="T:AtomicEngine.StaticModelGroup">
            <summary>
             Renders several object instances while culling and receiving light as one unit. Can be used as a CPU-side optimization, but note that also regular StaticModels will use instanced rendering if possible.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModelGroup.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModelGroup.ApplyAttributes">
            <summary>
             Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModelGroup.GetNumOccluderTriangles">
            <summary>
             Return number of occlusion geometry triangles.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModelGroup.AddInstanceNode(AtomicEngine.Node)">
            <summary>
             Add an instance scene node. It does not need any drawable components of its own.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModelGroup.RemoveInstanceNode(AtomicEngine.Node)">
            <summary>
             Remove an instance scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModelGroup.RemoveAllInstanceNodes">
            <summary>
             Remove all instance scene nodes.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModelGroup.GetNumInstanceNodes">
            <summary>
             Return number of instance nodes.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModelGroup.GetInstanceNode(System.UInt32)">
            <summary>
             Return instance node by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModelGroup.SetNodeIDsAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Set node IDs attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.StaticModelGroup.GetNodeIDsAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Return node IDs attribute.
            </summary>
        </member>
        <member name="T:AtomicEngine.Pass">
            <summary>
             %Material rendering pass, which defines shaders and render state.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.SetBlendMode(AtomicEngine.BlendMode)">
            <summary>
             Set blend mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.SetCullMode(AtomicEngine.CullMode)">
            <summary>
             Set culling mode override. By default culling mode is read from the material instead. Set the illegal culling mode MAX_CULLMODES to disable override again.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.SetDepthTestMode(AtomicEngine.CompareMode)">
            <summary>
             Set depth compare mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.SetLightingMode(AtomicEngine.PassLightingMode)">
            <summary>
             Set pass lighting mode, affects what shader variations will be attempted to be loaded.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.SetDepthWrite(System.Boolean)">
            <summary>
             Set depth write on/off.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.SetAlphaToCoverage(System.Boolean)">
            <summary>
             Set alpha-to-coverage on/off.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.SetIsDesktop(System.Boolean)">
            <summary>
             Set whether requires desktop level hardware.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.SetVertexShader(System.String)">
            <summary>
             Set vertex shader name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.SetPixelShader(System.String)">
            <summary>
             Set pixel shader name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.SetVertexShaderDefines(System.String)">
            <summary>
             Set vertex shader defines. Separate multiple defines with spaces.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.SetPixelShaderDefines(System.String)">
            <summary>
             Set pixel shader defines. Separate multiple defines with spaces.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.SetVertexShaderDefineExcludes(System.String)">
            <summary>
             Set vertex shader define excludes. Use to mark defines that the shader code will not recognize, to prevent compiling redundant shader variations.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.SetPixelShaderDefineExcludes(System.String)">
            <summary>
             Set pixel shader define excludes. Use to mark defines that the shader code will not recognize, to prevent compiling redundant shader variations.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.ReleaseShaders">
            <summary>
             Reset shader pointers.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.MarkShadersLoaded(System.UInt32)">
            <summary>
             Mark shaders loaded this frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetName">
            <summary>
             Return pass name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetIndex">
            <summary>
             Return pass index. This is used for optimal render-time pass queries that avoid map lookups.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetBlendMode">
            <summary>
             Return blend mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetCullMode">
            <summary>
             Return culling mode override. If pass is not overriding culling mode (default), the illegal mode MAX_CULLMODES is returned.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetDepthTestMode">
            <summary>
             Return depth compare mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetLightingMode">
            <summary>
             Return pass lighting mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetShadersLoadedFrameNumber">
            <summary>
             Return last shaders loaded frame number.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetDepthWrite">
            <summary>
             Return depth write mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetAlphaToCoverage">
            <summary>
             Return alpha-to-coverage mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetVertexShader">
            <summary>
             Return vertex shader name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetPixelShader">
            <summary>
             Return pixel shader name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetVertexShaderDefines">
            <summary>
             Return vertex shader defines.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetPixelShaderDefines">
            <summary>
             Return pixel shader defines.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetVertexShaderDefineExcludes">
            <summary>
             Return vertex shader define excludes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetPixelShaderDefineExcludes">
            <summary>
             Return pixel shader define excludes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetVertexShaders">
            <summary>
             Return vertex shaders.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetPixelShaders">
            <summary>
             Return pixel shaders.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetEffectiveVertexShaderDefines">
            <summary>
             Return the effective vertex shader defines, accounting for excludes. Called internally by Renderer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Pass.GetEffectivePixelShaderDefines">
            <summary>
             Return the effective pixel shader defines, accounting for excludes. Called internally by Renderer.
            </summary>
        </member>
        <member name="T:AtomicEngine.Technique">
            <summary>
             %Material technique. Consists of several passes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.SetIsDesktop(System.Boolean)">
            <summary>
             Set whether requires desktop level hardware.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.CreatePass(System.String)">
            <summary>
             Create a new pass.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.RemovePass(System.String)">
            <summary>
             Remove a pass.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.ReleaseShaders">
            <summary>
             Reset shader pointers in all passes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.Clone(System.String)">
            <summary>
             Clone the technique. Passes will be deep copied to allow independent modification.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.IsSupported">
            <summary>
             Return whether technique is supported by the current hardware.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.HasPass(System.UInt32)">
            <summary>
             Return whether has a pass.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.HasPass(System.String)">
            <summary>
             Return whether has a pass by name. This overload should not be called in time-critical rendering loops; use a pre-acquired pass index instead.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.GetPass(System.UInt32)">
            <summary>
             Return a pass, or null if not found.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.GetPass(System.String)">
            <summary>
             Return a pass by name, or null if not found. This overload should not be called in time-critical rendering loops; use a pre-acquired pass index instead.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.GetSupportedPass(System.UInt32)">
            <summary>
             Return a pass that is supported for rendering, or null if not found.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.GetSupportedPass(System.String)">
            <summary>
             Return a supported pass by name. This overload should not be called in time-critical rendering loops; use a pre-acquired pass index instead.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.GetNumPasses">
            <summary>
             Return number of passes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.GetPasses">
            <summary>
             Return all passes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.CloneWithDefines(System.String,System.String)">
            <summary>
             Return a clone with added shader compilation defines. Called internally by Material.
            </summary>
        </member>
        <member name="M:AtomicEngine.Technique.GetPassIndex(System.String)">
            <summary>
             Return a pass type index by name. Allocate new if not used yet.
            </summary>
        </member>
        <member name="T:AtomicEngine.Terrain">
            <summary>
             Heightmap terrain component.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.ApplyAttributes">
            <summary>
             Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetPatchSize(System.Int32)">
            <summary>
             Set patch quads per side. Must be a power of two.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetSpacing(AtomicEngine.Vector3)">
            <summary>
             Set vertex (XZ) and height (Y) spacing.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetMaxLodLevels(System.UInt32)">
            <summary>
             Set maximum number of LOD levels for terrain patches. This can be between 1-4.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetOcclusionLodLevel(System.UInt32)">
            <summary>
             Set LOD level used for terrain patch occlusion. By default (M_MAX_UNSIGNED) the coarsest. Since the LOD level used needs to be fixed, using finer LOD levels may result in false positive occlusion in cases where the actual rendered geometry is coarser, so use with caution.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetSmoothing(System.Boolean)">
            <summary>
             Set smoothing of heightmap.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetHeightMap(AtomicEngine.Image)">
            <summary>
             Set heightmap image. Dimensions should be a power of two + 1. Uses 8-bit grayscale, or optionally red as MSB and green as LSB for 16-bit accuracy. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetMaterial(AtomicEngine.Material)">
            <summary>
             Set material.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetNorthNeighbor(AtomicEngine.Terrain)">
            <summary>
             Set north (positive Z) neighbor terrain for seamless LOD changes across terrains.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetSouthNeighbor(AtomicEngine.Terrain)">
            <summary>
             Set south (negative Z) neighbor terrain for seamless LOD changes across terrains.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetWestNeighbor(AtomicEngine.Terrain)">
            <summary>
             Set west (negative X) neighbor terrain for seamless LOD changes across terrains.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetEastNeighbor(AtomicEngine.Terrain)">
            <summary>
             Set east (positive X) neighbor terrain for seamless LOD changes across terrains.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetNeighbors(AtomicEngine.Terrain,AtomicEngine.Terrain,AtomicEngine.Terrain,AtomicEngine.Terrain)">
            <summary>
             Set all neighbor terrains at once.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetDrawDistance(System.Single)">
            <summary>
             Set draw distance for patches.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetShadowDistance(System.Single)">
            <summary>
             Set shadow draw distance for patches.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetLodBias(System.Single)">
            <summary>
             Set LOD bias for patches. Affects which terrain LOD to display.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetViewMask(System.UInt32)">
            <summary>
             Set view mask for patches. Is and'ed with camera's view mask to see if the object should be rendered.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetLightMask(System.UInt32)">
            <summary>
             Set light mask for patches. Is and'ed with light's and zone's light mask to see if the object should be lit.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetShadowMask(System.UInt32)">
            <summary>
             Set shadow mask for patches. Is and'ed with light's light mask and zone's shadow mask to see if the object should be rendered to a shadow map.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetZoneMask(System.UInt32)">
            <summary>
             Set zone mask for patches. Is and'ed with zone's zone mask to see if the object should belong to the zone.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetMaxLights(System.UInt32)">
            <summary>
             Set maximum number of per-pixel lights for patches. Default 0 is unlimited.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetCastShadows(System.Boolean)">
            <summary>
             Set shadowcaster flag for patches.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetOccluder(System.Boolean)">
            <summary>
             Set occlusion flag for patches. Occlusion uses the coarsest LOD by default.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetOccludee(System.Boolean)">
            <summary>
             Set occludee flag for patches.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.ApplyHeightMap">
            <summary>
             Apply changes from the heightmap image.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetPatchSize">
            <summary>
             Return patch quads per side.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetSpacing">
            <summary>
             Return vertex and height spacing.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetNumVertices">
            <summary>
             Return heightmap size in vertices.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetNumPatches">
            <summary>
             Return heightmap size in patches.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetMaxLodLevels">
            <summary>
             Return maximum number of LOD levels for terrain patches. This can be between 1-4.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetOcclusionLodLevel">
            <summary>
             Return LOD level used for occlusion.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetSmoothing">
            <summary>
             Return whether smoothing is in use.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetHeightMap">
            <summary>
             Return heightmap image.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetMaterial">
            <summary>
             Return material.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetPatch(System.UInt32)">
            <summary>
             Return patch by index.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetPatch(System.Int32,System.Int32)">
            <summary>
             Return patch by patch coordinates.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetNeighborPatch(System.Int32,System.Int32)">
            <summary>
             Return patch by patch coordinates including neighbor terrains.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetHeight(AtomicEngine.Vector3)">
            <summary>
             Return height at world coordinates.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetNormal(AtomicEngine.Vector3)">
            <summary>
             Return normal at world coordinates.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.WorldToHeightMap(AtomicEngine.Vector3)">
            <summary>
             Convert world position to heightmap pixel position. Note that the internal height data representation is reversed vertically, but in the heightmap image north is at the top.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetNorthNeighbor">
            <summary>
             Return north neighbor terrain.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetSouthNeighbor">
            <summary>
             Return south neighbor terrain.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetWestNeighbor">
            <summary>
             Return west neighbor terrain.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetEastNeighbor">
            <summary>
             Return east neighbor terrain.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetDrawDistance">
            <summary>
             Return draw distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetShadowDistance">
            <summary>
             Return shadow draw distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetLodBias">
            <summary>
             Return LOD bias.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetViewMask">
            <summary>
             Return view mask.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetLightMask">
            <summary>
             Return light mask.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetShadowMask">
            <summary>
             Return shadow mask.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetZoneMask">
            <summary>
             Return zone mask.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetMaxLights">
            <summary>
             Return maximum number of per-pixel lights.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.IsVisible">
            <summary>
             Return visible flag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.GetCastShadows">
            <summary>
             Return shadowcaster flag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.IsOccluder">
            <summary>
             Return occluder flag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.IsOccludee">
            <summary>
             Return occludee flag.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.CreatePatchGeometry(AtomicEngine.TerrainPatch)">
            <summary>
             Regenerate patch geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.UpdatePatchLod(AtomicEngine.TerrainPatch)">
            <summary>
             Update patch based on LOD and neighbor LOD.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetPatchSizeAttr(System.Int32)">
            <summary>
             Set patch size attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetMaxLodLevelsAttr(System.UInt32)">
            <summary>
             Set max LOD levels attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.Terrain.SetOcclusionLodLevelAttr(System.UInt32)">
            <summary>
             Set occlusion LOD level attribute.
            </summary>
        </member>
        <member name="T:AtomicEngine.TerrainPatch">
            <summary>
             Individually rendered part of a heightmap terrain.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.GetUpdateGeometryType">
            <summary>
             Return whether a geometry update is necessary, and if it can happen in a worker thread.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.GetNumOccluderTriangles">
            <summary>
             Return number of occlusion geometry triangles.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.SetOwner(AtomicEngine.Terrain)">
            <summary>
             Set owner terrain.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.SetNeighbors(AtomicEngine.TerrainPatch,AtomicEngine.TerrainPatch,AtomicEngine.TerrainPatch,AtomicEngine.TerrainPatch)">
            <summary>
             Set neighbor patches.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.SetMaterial(AtomicEngine.Material)">
            <summary>
             Set material.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.SetBoundingBox(AtomicEngine.BoundingBox)">
            <summary>
             Set local-space bounding box.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.SetCoordinates(AtomicEngine.IntVector2)">
            <summary>
             Set patch coordinates.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.ResetLod">
            <summary>
             Reset to LOD level 0.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.GetVertexBuffer">
            <summary>
             Return vertex buffer.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.GetOwner">
            <summary>
             Return owner terrain.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.GetNorthPatch">
            <summary>
             Return north neighbor patch.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.GetSouthPatch">
            <summary>
             Return south neighbor patch.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.GetWestPatch">
            <summary>
             Return west neighbor patch.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.GetEastPatch">
            <summary>
             Return east neighbor patch.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.GetCoordinates">
            <summary>
             Return patch coordinates.
            </summary>
        </member>
        <member name="M:AtomicEngine.TerrainPatch.GetLodLevel">
            <summary>
             Return current LOD level.
            </summary>
        </member>
        <member name="T:AtomicEngine.Texture">
            <summary>
             Base class for texture resources.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.SetNumLevels(System.UInt32)">
            <summary>
             Set number of requested mip levels. Needs to be called before setting size.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.SetFilterMode(AtomicEngine.TextureFilterMode)">
            <summary>
             Set filtering mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.SetAddressMode(AtomicEngine.TextureCoordinate,AtomicEngine.TextureAddressMode)">
            <summary>
             Set addressing mode by texture coordinate.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.SetAnisotropy(System.UInt32)">
            <summary>
             Set texture max. anisotropy level. No effect if not using anisotropic filtering. Value 0 (default) uses the default setting from Renderer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.SetShadowCompare(System.Boolean)">
            <summary>
             Set shadow compare mode. Not used on Direct3D9.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.SetBorderColor(AtomicEngine.Color)">
            <summary>
             Set border color for border addressing mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.SetSRGB(System.Boolean)">
            <summary>
             Set sRGB sampling and writing mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.SetBackupTexture(AtomicEngine.Texture)">
            <summary>
             Set backup texture to use when rendering to this texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.SetMipsToSkip(System.Int32,System.Int32)">
            <summary>
             Set mip levels to skip on a quality setting when loading. Ensures higher quality levels do not skip more.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetFormat">
            <summary>
             Return API-specific texture format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.IsCompressed">
            <summary>
             Return whether the texture format is compressed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetLevels">
            <summary>
             Return number of mip levels.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetWidth">
            <summary>
             Return width.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetHeight">
            <summary>
             Return height.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetDepth">
            <summary>
             Return height.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetFilterMode">
            <summary>
             Return filtering mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetAddressMode(AtomicEngine.TextureCoordinate)">
            <summary>
             Return addressing mode by texture coordinate.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetAnisotropy">
            <summary>
             Return texture max. anisotropy level. Value 0 means to use the default value from Renderer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetShadowCompare">
            <summary>
             Return whether shadow compare is enabled. Not used on Direct3D9.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetBorderColor">
            <summary>
             Return border color.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetSRGB">
            <summary>
             Return whether is using sRGB sampling and writing.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetBackupTexture">
            <summary>
             Return backup texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetMipsToSkip(System.Int32)">
            <summary>
             Return mip levels to skip on a quality setting when loading.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetLevelWidth(System.UInt32)">
            <summary>
             Return mip level width, or 0 if level does not exist.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetLevelHeight(System.UInt32)">
            <summary>
             Return mip level width, or 0 if level does not exist.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetLevelDepth(System.UInt32)">
            <summary>
             Return mip level depth, or 0 if level does not exist.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetUsage">
            <summary>
             Return texture usage type.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetDataSize(System.Int32,System.Int32)">
            <summary>
             Return data size in bytes for a rectangular region.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetDataSize(System.Int32,System.Int32,System.Int32)">
            <summary>
             Return data size in bytes for a volume region.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetRowDataSize(System.Int32)">
            <summary>
             Return data size in bytes for a pixel or block row.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetComponents">
            <summary>
             Return number of image components required to receive pixel data from GetData(), or 0 for compressed images.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetParametersDirty">
            <summary>
             Return whether the parameters are dirty.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.SetParameters(AtomicEngine.XMLFile)">
            <summary>
             Set additional parameters from an XML file.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.SetParametersDirty">
            <summary>
             Mark parameters dirty. Called by Graphics.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.UpdateParameters">
            <summary>
             Update dirty parameters to the texture object. Called by Graphics when assigning the texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetTarget">
            <summary>
             Return texture's target. Only used on OpenGL.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetSRGBFormat(System.UInt32)">
            <summary>
             Convert format to sRGB. Not used on Direct3D9.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.CheckMaxLevels(System.Int32,System.Int32,System.UInt32)">
            <summary>
             Check maximum allowed mip levels for a specific texture size.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.CheckMaxLevels(System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
             Check maximum allowed mip levels for a specific 3D texture size.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetSRVFormat(System.UInt32)">
            <summary>
             Return the shader resource view format corresponding to a texture format. Handles conversion of typeless depth texture formats. Only used on Direct3D11.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetDSVFormat(System.UInt32)">
            <summary>
             Return the depth-stencil view format corresponding to a texture format. Handles conversion of typeless depth texture formats. Only used on Direct3D11.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetExternalFormat(System.UInt32)">
            <summary>
             Return the non-internal texture format corresponding to an OpenGL internal format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture.GetDataType(System.UInt32)">
            <summary>
             Return the data type corresponding to an OpenGL internal format.
            </summary>
        </member>
        <member name="T:AtomicEngine.Texture2D">
            <summary>
             2D texture resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture2D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture2D.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture2D.EndLoad">
            <summary>
             Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture2D.OnDeviceLost">
            <summary>
             Mark the GPU resource destroyed on context destruction.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture2D.OnDeviceReset">
            <summary>
             Recreate the GPU resource and restore data if applicable.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture2D.Release">
            <summary>
             Release the texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture2D.SetSize(System.Int32,System.Int32,System.UInt32,AtomicEngine.TextureUsage)">
            <summary>
             Set size, format and usage. Zero size will follow application window size. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture2D.SetData(AtomicEngine.Image,System.Boolean)">
            <summary>
             Set data from an image. Return true if successful. Optionally make a single channel image alpha-only.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture2D.GetRenderSurface">
            <summary>
             Return render surface.
            </summary>
        </member>
        <member name="T:AtomicEngine.Texture3D">
            <summary>
             3D texture resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture3D.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture3D.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture3D.EndLoad">
            <summary>
             Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture3D.OnDeviceLost">
            <summary>
             Mark the GPU resource destroyed on context destruction.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture3D.OnDeviceReset">
            <summary>
             Recreate the GPU resource and restore data if applicable.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture3D.Release">
            <summary>
             Release the texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture3D.SetSize(System.Int32,System.Int32,System.Int32,System.UInt32,AtomicEngine.TextureUsage)">
            <summary>
             Set size, format and usage. Zero size will follow application window size. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Texture3D.SetData(AtomicEngine.Image,System.Boolean)">
            <summary>
             Set data from an image. Return true if successful. Optionally make a single channel image alpha-only.
            </summary>
        </member>
        <member name="T:AtomicEngine.TextureCube">
            <summary>
             Cube texture resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.TextureCube.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.TextureCube.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.TextureCube.EndLoad">
            <summary>
             Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.TextureCube.OnDeviceLost">
            <summary>
             Mark the GPU resource destroyed on context destruction.
            </summary>
        </member>
        <member name="M:AtomicEngine.TextureCube.OnDeviceReset">
            <summary>
             Recreate the GPU resource and restore data if applicable.
            </summary>
        </member>
        <member name="M:AtomicEngine.TextureCube.Release">
            <summary>
             Release the texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.TextureCube.SetSize(System.Int32,System.UInt32,AtomicEngine.TextureUsage)">
            <summary>
             Set size, format and usage. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.TextureCube.SetData(AtomicEngine.CubeMapFace,AtomicEngine.Deserializer)">
            <summary>
             Set data of one face from a stream. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.TextureCube.SetData(AtomicEngine.CubeMapFace,AtomicEngine.Image,System.Boolean)">
            <summary>
             Set data of one face from an image. Return true if successful. Optionally make a single channel image alpha-only.
            </summary>
        </member>
        <member name="M:AtomicEngine.TextureCube.GetRenderSurface(AtomicEngine.CubeMapFace)">
            <summary>
             Return render surface for one face.
            </summary>
        </member>
        <member name="T:AtomicEngine.View">
            <summary>
             Internal structure for 3D rendering work. Created for each backbuffer and texture viewport, but not for shadow cameras.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.Define(AtomicEngine.RenderSurface,AtomicEngine.Viewport)">
            <summary>
             Define with rendertarget and viewport. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.Render">
            <summary>
             Render batches.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetGraphics">
            <summary>
             Return graphics subsystem.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetRenderer">
            <summary>
             Return renderer subsystem.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetScene">
            <summary>
             Return scene.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetOctree">
            <summary>
             Return octree.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetCamera">
            <summary>
             Return viewport camera.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetCullCamera">
            <summary>
             Return culling camera. Normally same as the viewport camera.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetRenderTarget">
            <summary>
             Return the rendertarget. 0 if using the backbuffer.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetDrawDebug">
            <summary>
             Return whether should draw debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetViewRect">
            <summary>
             Return view rectangle.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetViewSize">
            <summary>
             Return view dimensions.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetGeometries">
            <summary>
             Return geometry objects.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetOccluders">
            <summary>
             Return occluder objects.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetLights">
            <summary>
             Return lights.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetNumActiveOccluders">
            <summary>
             Return number of occluders that were actually rendered. Occluders may be rejected if running out of triangles or if behind other occluders.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.GetSourceView">
            <summary>
             Return the source view that was already prepared. Used when viewports specify the same culling camera.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.SetGlobalShaderParameters">
            <summary>
             Set global (per-frame) shader parameters. Called by Batch and internally by View.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.SetCameraShaderParameters(AtomicEngine.Camera)">
            <summary>
             Set camera-specific shader parameters. Called by Batch and internally by View.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.SetGBufferShaderParameters(AtomicEngine.IntVector2,AtomicEngine.IntRect)">
            <summary>
             Set G-buffer offset and inverse size shader parameters. Called by Batch and internally by View.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.DrawFullscreenQuad(System.Boolean)">
            <summary>
             Draw a fullscreen quad. Shaders and renderstates must have been set beforehand. Quad will be drawn to the middle of depth range, similarly to deferred directional lights.
            </summary>
        </member>
        <member name="M:AtomicEngine.View.FindNamedTexture(System.String,System.Boolean,System.Boolean)">
            <summary>
             Get a named texture from the rendertarget list or from the resource cache, to be either used as a rendertarget or texture binding.
            </summary>
        </member>
        <member name="T:AtomicEngine.Zone">
            <summary>
             %Component that describes global rendering properties.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.SetBoundingBox(AtomicEngine.BoundingBox)">
            <summary>
             Set local-space bounding box. Will be used as an oriented bounding box to test whether objects or the camera are inside.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.SetAmbientColor(AtomicEngine.Color)">
            <summary>
             Set ambient color
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.SetFogColor(AtomicEngine.Color)">
            <summary>
             Set fog color.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.SetFogStart(System.Single)">
            <summary>
             Set fog start distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.SetFogEnd(System.Single)">
            <summary>
             Set fog end distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.SetFogHeight(System.Single)">
            <summary>
             Set fog height distance relative to the scene node's world position. Effective only in height fog mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.SetFogHeightScale(System.Single)">
            <summary>
             Set fog height scale. Effective only in height fog mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.SetPriority(System.Int32)">
            <summary>
             Set zone priority. If an object or camera is inside several zones, the one with highest priority is used.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.SetHeightFog(System.Boolean)">
            <summary>
             Set height fog mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.SetOverride(System.Boolean)">
            <summary>
             Set override mode. If camera is inside an override zone, that zone will be used for all rendered objects instead of their own zone.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.SetAmbientGradient(System.Boolean)">
            <summary>
             Set ambient gradient mode. In gradient mode ambient color is interpolated from neighbor zones.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.SetZoneTexture(AtomicEngine.Texture)">
            <summary>
             Set zone texture. This will be bound to the zone texture unit when rendering objects inside the zone. Note that the default shaders do not use it.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.GetAmbientColor">
            <summary>
             Return zone's own ambient color, disregarding gradient mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.GetAmbientStartColor">
            <summary>
             Return ambient start color. Not safe to call from worker threads due to possible octree query.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.GetAmbientEndColor">
            <summary>
             Return ambient end color. Not safe to call from worker threads due to possible octree query.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.GetFogColor">
            <summary>
             Return fog color.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.GetFogStart">
            <summary>
             Return fog start distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.GetFogEnd">
            <summary>
             Return fog end distance.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.GetFogHeight">
            <summary>
             Return fog height distance relative to the scene node's world position.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.GetFogHeightScale">
            <summary>
             Return fog height scale.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.GetPriority">
            <summary>
             Return zone priority.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.GetHeightFog">
            <summary>
             Return whether height fog mode is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.GetOverride">
            <summary>
             Return whether override mode is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.GetAmbientGradient">
            <summary>
             Return whether ambient gradient mode is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.GetZoneTexture">
            <summary>
             Return zone texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.Zone.IsInside(AtomicEngine.Vector3)">
            <summary>
             Check whether a point is inside.
            </summary>
        </member>
        <member name="M:AtomicEngine.JoystickState.#ctor(System.IntPtr)">
            <summary>
             Construct with defaults.
            </summary>
        </member>
        <member name="M:AtomicEngine.JoystickState.Initialize(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
             Initialize the number of buttons, axes and hats and set them to neutral state.
            </summary>
        </member>
        <member name="M:AtomicEngine.JoystickState.Reset">
            <summary>
             Reset button, axis and hat states to neutral.
            </summary>
        </member>
        <member name="M:AtomicEngine.JoystickState.IsController">
            <summary>
             Return whether is a game controller. Game controllers will use standardized axis and button mappings.
            </summary>
        </member>
        <member name="M:AtomicEngine.JoystickState.GetNumButtons">
            <summary>
             Return number of buttons.
            </summary>
        </member>
        <member name="M:AtomicEngine.JoystickState.GetNumAxes">
            <summary>
             Return number of axes.
            </summary>
        </member>
        <member name="M:AtomicEngine.JoystickState.GetNumHats">
            <summary>
             Return number of hats.
            </summary>
        </member>
        <member name="M:AtomicEngine.JoystickState.GetButtonDown(System.UInt32)">
            <summary>
             Check if a button is held down.
            </summary>
        </member>
        <member name="M:AtomicEngine.JoystickState.GetButtonPress(System.UInt32)">
            <summary>
             Check if a button has been pressed on this frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.JoystickState.GetAxisPosition(System.UInt32)">
            <summary>
             Return axis position.
            </summary>
        </member>
        <member name="M:AtomicEngine.JoystickState.GetHatPosition(System.UInt32)">
            <summary>
             Return hat position.
            </summary>
        </member>
        <member name="M:AtomicEngine.JoystickState.StartRumble">
            <summary>
             Haptic aka Rumble support
            </summary>
        </member>
        <member name="T:AtomicEngine.Input">
            <summary>
             %Input subsystem. Converts operating system window messages to input state and events.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.Update">
            <summary>
             Poll for window messages. Called by HandleBeginFrame().
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.SetToggleFullscreen(System.Boolean)">
            <summary>
             Set whether ALT-ENTER fullscreen toggle is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.SetMouseVisible(System.Boolean,System.Boolean)">
            <summary>
             Set whether the operating system mouse cursor is visible. When not visible (default), is kept centered to prevent leaving the window. Mouse visibility event can be suppressed-- this also recalls any unsuppressed SetMouseVisible which can be returned by ResetMouseVisible().
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.ResetMouseVisible">
            <summary>
             Reset last mouse visibility that was not suppressed in SetMouseVisible.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.SetMouseGrabbed(System.Boolean,System.Boolean)">
            <summary>
             Set whether the mouse is currently being grabbed by an operation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.ResetMouseGrabbed">
            <summary>
             Reset the mouse grabbed to the last unsuppressed SetMouseGrabbed call
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.Input.SetMouseMode(AtomicEngine.MouseMode,System.Boolean)" -->
        <member name="M:AtomicEngine.Input.ResetMouseMode">
            <summary>
             Reset the last mouse mode that wasn't suppressed in SetMouseMode
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.SetScreenKeyboardVisible(System.Boolean)">
            <summary>
             Show or hide on-screen keyboard on platforms that support it. When shown, keypresses from it are delivered as key events.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.SetTouchEmulation(System.Boolean)">
            <summary>
             Set touch emulation by mouse. Only available on desktop platforms. When enabled, actual mouse events are no longer sent and the mouse cursor is forced visible.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.RecordGesture">
            <summary>
             Begin recording a touch gesture. Return true if successful. The E_GESTURERECORDED event (which contains the ID for the new gesture) will be sent when recording finishes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.SaveGestures(AtomicEngine.Serializer)">
            <summary>
             Save all in-memory touch gestures. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.SaveGesture(AtomicEngine.Serializer,System.UInt32)">
            <summary>
             Save a specific in-memory touch gesture to a file. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.LoadGestures(AtomicEngine.Deserializer)">
            <summary>
             Load touch gestures from a file. Return number of loaded gestures, or 0 on failure.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.RemoveGesture(System.UInt32)">
            <summary>
             Remove an in-memory gesture by ID. Return true if was found.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.RemoveAllGestures">
            <summary>
             Remove all in-memory gestures.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.SetMousePosition(AtomicEngine.IntVector2)">
            <summary>
             Set the mouse cursor position.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.CenterMousePosition">
            <summary>
             Center the mouse position.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetKeyFromName(System.String)">
            <summary>
             Return keycode from key name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetKeyFromScancode(System.Int32)">
            <summary>
             Return keycode from scancode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetKeyName(System.Int32)">
            <summary>
             Return name of key from keycode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetScancodeFromKey(System.Int32)">
            <summary>
             Return scancode from keycode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetScancodeFromName(System.String)">
            <summary>
             Return scancode from key name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetScancodeName(System.Int32)">
            <summary>
             Return name of key from scancode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetKeyDown(System.Int32)">
            <summary>
             Check if a key is held down.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetKeyPress(System.Int32)">
            <summary>
             Check if a key has been pressed on this frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetScancodeDown(System.Int32)">
            <summary>
             Check if a key is held down by scancode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetScancodePress(System.Int32)">
            <summary>
             Check if a key has been pressed on this frame by scancode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetMouseButtonDown(System.Int32)">
            <summary>
             Check if a mouse button is held down.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetMouseButtonPress(System.Int32)">
            <summary>
             Check if a mouse button has been pressed on this frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetQualifierDown(System.Int32)">
            <summary>
             Check if a qualifier key is held down.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetQualifierPress(System.Int32)">
            <summary>
             Check if a qualifier key has been pressed on this frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetQualifiers">
            <summary>
             Return the currently held down qualifiers.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetMousePosition">
            <summary>
             Return mouse position within window. Should only be used with a visible mouse cursor.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetMouseMove">
            <summary>
             Return mouse movement since last frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetMouseMoveX">
            <summary>
             Return horizontal mouse movement since last frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetMouseMoveY">
            <summary>
             Return vertical mouse movement since last frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetMouseMoveWheel">
            <summary>
             Return mouse wheel movement since last frame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetNumTouches">
            <summary>
             Return number of active finger touches.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetNumJoysticks">
            <summary>
             Return number of connected joysticks.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetJoystickByIndex(System.UInt32)">
            <summary>
             Return joystick state by index, or null if does not exist. 0 = first connected joystick.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetJoystickByName(System.String)">
            <summary>
             Return joystick state by name, or null if does not exist.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetToggleFullscreen">
            <summary>
             Return whether fullscreen toggle is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetScreenKeyboardSupport">
            <summary>
             Return whether on-screen keyboard is supported.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.IsScreenKeyboardVisible">
            <summary>
             Return whether on-screen keyboard is being shown.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetTouchEmulation">
            <summary>
             Return whether touch emulation is enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.IsMouseVisible">
            <summary>
             Return whether the operating system mouse cursor is visible.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.IsMouseGrabbed">
            <summary>
             Return whether the mouse is currently being grabbed by an operation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.IsMouseLocked">
            <summary>
             Return whether the mouse is locked to the window
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.GetMouseMode">
            <summary>
             Return the mouse mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.HasFocus">
            <summary>
             Return whether application window has input focus.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.IsMinimized">
            <summary>
             Return whether application window is minimized.
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.BindButton(AtomicEngine.UIButton,System.Int32)">
            <summary>
             Binds UIButton element to the given button
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.JoystickRumble(System.UInt32,System.Single,System.UInt32)">
            <summary>
             return if rumble is supported on game controller
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.JoystickSimulateMouseMove(System.Int32,System.Int32)">
            <summary>
             produce rumble
            </summary>
        </member>
        <member name="M:AtomicEngine.Input.JoystickSimulateMouseButton(System.Int32)">
            <summary>
             moves the on screen cursor
            </summary>
        </member>
        <member name="T:AtomicEngine.BufferQueue">
            <summary>
             %Act as a continuous byte buffer which can be appened indefinatly.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.Seek(System.UInt32)">
            <summary>
             Seek operation is not supported for a BufferQueue.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.Clear">
            <summary>
             Remove all buffered data.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.GetName">
            <summary>
             Return name of the stream.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.GetChecksum">
            <summary>
             Return a checksum if applicable.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.IsEof">
            <summary>
             Return whether the end of stream has been reached.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.GetPosition">
            <summary>
             Return current position.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.GetSize">
            <summary>
             Return size.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadInt64">
            <summary>
             Read a 64-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadInt">
            <summary>
             Read a 32-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadShort">
            <summary>
             Read a 16-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadByte">
            <summary>
             Read an 8-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadUInt64">
            <summary>
             Read a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadUInt">
            <summary>
             Read a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadUShort">
            <summary>
             Read a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadUByte">
            <summary>
             Read an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadBool">
            <summary>
             Read a bool.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadFloat">
            <summary>
             Read a float.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadDouble">
            <summary>
             Read a double.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadIntRect">
            <summary>
             Read an IntRect.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadIntVector2">
            <summary>
             Read an IntVector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadRect">
            <summary>
             Read a Rect.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadVector2">
            <summary>
             Read a Vector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadVector3">
            <summary>
             Read a Vector3.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadPackedVector3(System.Single)">
            <summary>
             Read a Vector3 packed into 3 x 16 bits with the specified maximum absolute range.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadVector4">
            <summary>
             Read a Vector4.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadQuaternion">
            <summary>
             Read a quaternion.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadPackedQuaternion">
            <summary>
             Read a quaternion with each component packed in 16 bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadColor">
            <summary>
             Read a color.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadBoundingBox">
            <summary>
             Read a bounding box.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadString">
            <summary>
             Read a null-terminated string.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadFileID">
            <summary>
             Read a four-letter file ID.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadStringHash">
            <summary>
             Read a 32-bit StringHash.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadVariantVector(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Read a variant vector.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadVLE">
            <summary>
             Read a variable-length encoded unsigned integer, which can use 29 bits maximum.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadNetID">
            <summary>
             Read a 24-bit network object ID.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.ReadLine">
            <summary>
             Read a text line.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteInt64(System.Int64)">
            <summary>
             Write a 64-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteInt(System.Int32)">
            <summary>
             Write a 32-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteShort(System.Int16)">
            <summary>
             Write a 16-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteByte(System.Char)">
            <summary>
             Write an 8-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteUInt64(System.Int64)">
            <summary>
             Write a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteUInt(System.UInt32)">
            <summary>
             Write a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteUShort(System.UInt16)">
            <summary>
             Write a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteUByte(System.Byte)">
            <summary>
             Write an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteBool(System.Boolean)">
            <summary>
             Write a bool.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteFloat(System.Single)">
            <summary>
             Write a float.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteDouble(System.Single)">
            <summary>
             Write a double.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteIntRect(AtomicEngine.IntRect)">
            <summary>
             Write an IntRect.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteIntVector2(AtomicEngine.IntVector2)">
            <summary>
             Write an IntVector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteRect(AtomicEngine.Rect)">
            <summary>
             Write a Rect.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteVector2(AtomicEngine.Vector2)">
            <summary>
             Write a Vector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteVector3(AtomicEngine.Vector3)">
            <summary>
             Write a Vector3.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WritePackedVector3(AtomicEngine.Vector3,System.Single)">
            <summary>
             Write a Vector3 packed into 3 x 16 bits with the specified maximum absolute range.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteVector4(AtomicEngine.Vector4)">
            <summary>
             Write a Vector4.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteQuaternion(AtomicEngine.Quaternion)">
            <summary>
             Write a quaternion.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WritePackedQuaternion(AtomicEngine.Quaternion)">
            <summary>
             Write a quaternion with each component packed in 16 bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteColor(AtomicEngine.Color)">
            <summary>
             Write a color.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteBoundingBox(AtomicEngine.BoundingBox)">
            <summary>
             Write a bounding box.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteString(System.String)">
            <summary>
             Write a null-terminated string.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteFileID(System.String)">
            <summary>
             Write a four-letter file ID. If the string is not long enough, spaces will be appended.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteStringHash(AtomicEngine.StringHash)">
            <summary>
             Write a 32-bit StringHash.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteVariantVector(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Write a variant vector.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteVLE(System.UInt32)">
            <summary>
             Write a variable-length encoded unsigned integer, which can use 29 bits maximum.
            </summary>
        </member>
        <member name="M:AtomicEngine.BufferQueue.WriteNetID(System.UInt32)">
            <summary>
             Write a 24-bit network object ID.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.BufferQueue.WriteLine(System.String)" -->
        <member name="T:AtomicEngine.FileSystem">
            <summary>
             Subsystem for file and directory operations and access control.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.SetCurrentDir(System.String)">
            <summary>
             Set the current working directory.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.CreateDir(System.String)">
            <summary>
             Create a directory.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.SetExecuteConsoleCommands(System.Boolean)">
            <summary>
             Set whether to execute engine console commands as OS-specific system command.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.SystemCommand(System.String,System.Boolean)">
            <summary>
             Run a program using the command interpreter, block until it exits and return the exit code. Will fail if any allowed paths are defined.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.SystemCommandAsync(System.String)">
            <summary>
             Run a program using the command interpreter asynchronously. Return a request ID or M_MAX_UNSIGNED if failed. The exit code will be posted together with the request ID in an AsyncExecFinished event. Will fail if any allowed paths are defined.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.SystemOpen(System.String,System.String)">
            <summary>
             Open a file in an external program, with mode such as "edit" optionally specified. Will fail if any allowed paths are defined.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.Copy(System.String,System.String)">
            <summary>
             Copy a file. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.Rename(System.String,System.String)">
            <summary>
             Rename a file. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.Delete(System.String)">
            <summary>
             Delete a file. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.RegisterPath(System.String)">
            <summary>
             Register a path as allowed to access. If no paths are registered, all are allowed. Registering allowed paths is considered securing the Urho3D execution environment: running programs and opening files externally through the system will fail afterward.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.SetLastModifiedTime(System.String,System.UInt32)">
            <summary>
             Set a file's last modified time as seconds since 1.1.1970. Return true on success.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.GetCurrentDir">
            <summary>
             Return the absolute current working directory.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.GetExecuteConsoleCommands">
            <summary>
             Return whether is executing engine console commands as OS-specific system command.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.HasRegisteredPaths">
            <summary>
             Return whether paths have been registered.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.CheckAccess(System.String)">
            <summary>
             Check if a path is allowed to be accessed. If no paths are registered, all are allowed.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.GetLastModifiedTime(System.String)">
            <summary>
             Returns the file's last modified time as seconds since 1.1.1970, or 0 if can not be accessed.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.FileExists(System.String)">
            <summary>
             Check if a file exists.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.DirExists(System.String)">
            <summary>
             Check if a directory exists.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.GetProgramDir">
            <summary>
             Return the program's directory. If it does not contain the Urho3D default CoreData and Data directories, and the current working directory does, return the working directory instead.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.GetUserDocumentsDir">
            <summary>
             Return the user documents directory.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.GetAppPreferencesDir(System.String,System.String)">
            <summary>
             Return the application preferences directory.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileSystem.Exists(System.String)">
            <summary>
             Check if a file or directory exists at the specified path
            </summary>
        </member>
        <member name="T:AtomicEngine.FileWatcher">
            <summary>
             Watches a directory and its subdirectories for files being modified.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileWatcher.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileWatcher.ThreadFunction">
            <summary>
             Directory watching loop.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileWatcher.StartWatching(System.String,System.Boolean)">
            <summary>
             Start watching a directory. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileWatcher.StopWatching">
            <summary>
             Stop watching the directory.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileWatcher.SetDelay(System.Single)">
            <summary>
             Set the delay in seconds before file changes are notified. This (hopefully) avoids notifying when a file save is still in progress. Default 1 second.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileWatcher.AddChange(System.String)">
            <summary>
             Add a file change into the changes queue.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileWatcher.GetPath">
            <summary>
             Return the path being watched, or empty if not watching.
            </summary>
        </member>
        <member name="M:AtomicEngine.FileWatcher.GetDelay">
            <summary>
             Return the delay in seconds for notifying file changes.
            </summary>
        </member>
        <member name="T:AtomicEngine.PackageFile">
            <summary>
             Stores files of a directory tree sequentially for convenient access.
            </summary>
        </member>
        <member name="M:AtomicEngine.PackageFile.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.PackageFile.#ctor(System.String,System.UInt32)">
            <summary>
             Construct and open.
            </summary>
        </member>
        <member name="M:AtomicEngine.PackageFile.Open(System.String,System.UInt32)">
            <summary>
             Open the package file. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.PackageFile.Exists(System.String)">
            <summary>
             Check if a file exists within the package file. This will be case-insensitive on Windows and case-sensitive on other platforms.
            </summary>
        </member>
        <member name="M:AtomicEngine.PackageFile.GetName">
            <summary>
             Return the package file name.
            </summary>
        </member>
        <member name="M:AtomicEngine.PackageFile.GetNameHash">
            <summary>
             Return hash of the package file name.
            </summary>
        </member>
        <member name="M:AtomicEngine.PackageFile.GetNumFiles">
            <summary>
             Return number of files.
            </summary>
        </member>
        <member name="M:AtomicEngine.PackageFile.GetTotalSize">
            <summary>
             Return total size of the package file.
            </summary>
        </member>
        <member name="M:AtomicEngine.PackageFile.GetTotalDataSize">
            <summary>
             Return total data size from all the file entries in the package file.
            </summary>
        </member>
        <member name="M:AtomicEngine.PackageFile.GetChecksum">
            <summary>
             Return checksum of the package file contents.
            </summary>
        </member>
        <member name="M:AtomicEngine.PackageFile.IsCompressed">
            <summary>
             Return whether the files are compressed.
            </summary>
        </member>
        <member name="M:AtomicEngine.PackageFile.GetEntryName(System.UInt32)">
            <summary>
             Return a file name in the package at the specified index
            </summary>
        </member>
        <member name="T:AtomicEngine.JSComponent">
            <summary>
             JavaScript component
            </summary>
        </member>
        <member name="M:AtomicEngine.JSComponent.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.JSComponent.MatchScriptName(System.String)">
            <summary>
             Match script name
            </summary>
        </member>
        <member name="M:AtomicEngine.JSComponent.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change. Changes update event subscription.
            </summary>
        </member>
        <member name="M:AtomicEngine.JSComponent.SetUpdateEventMask(System.Byte)">
            <summary>
             Set what update events should be subscribed to. Use this for optimization: by default all are in use. Note that this is not an attribute and is not saved or network-serialized, therefore it should always be called eg. in the subclass constructor.
            </summary>
        </member>
        <member name="M:AtomicEngine.JSComponent.GetUpdateEventMask">
            <summary>
             Return what update events are subscribed to.
            </summary>
        </member>
        <member name="M:AtomicEngine.JSComponent.IsDelayedStartCalled">
            <summary>
             Return whether the DelayedStart() function has been called.
            </summary>
        </member>
        <member name="M:AtomicEngine.JSComponent.SetComponentFile(AtomicEngine.JSComponentFile)">
            <summary>
             Set script attribute.
            </summary>
        </member>
        <member name="T:AtomicEngine.JSComponentFile">
            <summary>
             Script document resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.JSComponentFile.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.JSComponentFile.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.JSComponentFile.Save(AtomicEngine.Serializer)">
            <summary>
             Save resource
            </summary>
        </member>
        <member name="M:AtomicEngine.JSComponentFile.GetTypeScriptClass">
            <summary>
             Returns true is this component file containes a TypeScript class
            </summary>
        </member>
        <member name="M:AtomicEngine.JSEventHelper.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="T:AtomicEngine.ScriptObject">
            <summary>
             Object (which is abstract) and use the event system, etc
            </summary>
        </member>
        <member name="M:AtomicEngine.ScriptObject.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="T:AtomicEngine.Metrics">
            <summary>
             Metrics subsystem
            </summary>
        </member>
        <member name="M:AtomicEngine.Metrics.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="T:AtomicEngine.CrowdAgent">
            <summary>
             Crowd agent component, requires a CrowdManager component in the scene. When not set explicitly, agent's radius and height are defaulted to navigation mesh's agent radius and height, respectively.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.ApplyAttributes">
            <summary>
             Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.DrawDebugGeometry(System.Boolean)">
            <summary>
             Draw debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Draw debug feelers.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.SetTargetPosition(AtomicEngine.Vector3)">
            <summary>
             Submit a new target position request for this agent.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.SetTargetVelocity(AtomicEngine.Vector3)">
            <summary>
             Submit a new target velocity request for this agent.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.ResetTarget">
            <summary>
             Reset any target request for the specified agent. Note that the agent will continue to move into the current direction; set a zero target velocity to actually stop.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.SetUpdateNodePosition(System.Boolean)">
            <summary>
             Update the node position. When set to false, the node position should be updated by other means (e.g. using Physics) in response to the E_CROWD_AGENT_REPOSITION event.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.SetMaxAccel(System.Single)">
            <summary>
             Set the agent's max acceleration.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.SetMaxSpeed(System.Single)">
            <summary>
             Set the agent's max velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.SetRadius(System.Single)">
            <summary>
             Set the agent's radius.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.SetHeight(System.Single)">
            <summary>
             Set the agent's height.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.SetQueryFilterType(System.UInt32)">
            <summary>
             Set the agent's query filter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.SetObstacleAvoidanceType(System.UInt32)">
            <summary>
             Set the agent's obstacle avoidance type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.SetNavigationQuality(AtomicEngine.NavigationQuality)">
            <summary>
             Set the agent's navigation quality.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.SetNavigationPushiness(AtomicEngine.NavigationPushiness)">
            <summary>
             Set the agent's navigation pushiness.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetPosition">
            <summary>
             Return the agent's position.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetDesiredVelocity">
            <summary>
             Return the agent's desired velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetActualVelocity">
            <summary>
             Return the agent's actual velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetTargetPosition">
            <summary>
             Return the agent's requested target position.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetTargetVelocity">
            <summary>
             Return the agent's requested target velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetRequestedTargetType">
            <summary>
             Return the agent's requested target type, if any.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetAgentState">
            <summary>
             Return the agent's  state.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetTargetState">
            <summary>
             Return the agent's target state.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetUpdateNodePosition">
            <summary>
             Return true when the node's position should be updated by the CrowdManager.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetAgentCrowdId">
            <summary>
             Return the agent id.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetMaxAccel">
            <summary>
             Get the agent's max acceleration.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetMaxSpeed">
            <summary>
             Get the agent's max velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetRadius">
            <summary>
             Get the agent's radius.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetHeight">
            <summary>
             Get the agent's height.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetQueryFilterType">
            <summary>
             Get the agent's query filter type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetObstacleAvoidanceType">
            <summary>
             Get the agent's obstacle avoidance type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetNavigationQuality">
            <summary>
             Get the agent's navigation quality.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.GetNavigationPushiness">
            <summary>
             Get the agent's navigation pushiness.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.HasRequestedTarget">
            <summary>
             Return true when the agent has a target.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.HasArrived">
            <summary>
             Return true when the agent has arrived at its target.
            </summary>
        </member>
        <member name="M:AtomicEngine.CrowdAgent.IsInCrowd">
            <summary>
             Return true when the agent is in crowd (being managed by a crowd manager).
            </summary>
        </member>
        <member name="M:AtomicEngine.DynamicNavigationMesh.#ctor(System.IntPtr)">
            <summary>
             Constructor.
            </summary>
        </member>
        <member name="M:AtomicEngine.DynamicNavigationMesh.Build">
            <summary>
             Build/rebuild the entire navigation mesh.
            </summary>
        </member>
        <member name="M:AtomicEngine.DynamicNavigationMesh.Build(AtomicEngine.BoundingBox)">
            <summary>
             Build/rebuild a portion of the navigation mesh.
            </summary>
        </member>
        <member name="M:AtomicEngine.DynamicNavigationMesh.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.DynamicNavigationMesh.DrawDebugGeometry(System.Boolean)">
            <summary>
             Add debug geometry to the debug renderer.
            </summary>
        </member>
        <member name="M:AtomicEngine.DynamicNavigationMesh.SetMaxObstacles(System.UInt32)">
            <summary>
             Set the maximum number of obstacles allowed.
            </summary>
        </member>
        <member name="M:AtomicEngine.DynamicNavigationMesh.SetMaxLayers(System.UInt32)">
            <summary>
             Set the maximum number of layers that navigation construction can create.
            </summary>
        </member>
        <member name="M:AtomicEngine.DynamicNavigationMesh.GetMaxObstacles">
            <summary>
             Return the maximum number of obstacles allowed.
            </summary>
        </member>
        <member name="M:AtomicEngine.DynamicNavigationMesh.GetMaxLayers">
            <summary>
             Return the maximum number of layers permitted to build.
            </summary>
        </member>
        <member name="M:AtomicEngine.DynamicNavigationMesh.SetDrawObstacles(System.Boolean)">
            <summary>
             Draw debug geometry for Obstacles.
            </summary>
        </member>
        <member name="M:AtomicEngine.DynamicNavigationMesh.GetDrawObstacles">
            <summary>
             Return whether to draw Obstacles.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavArea.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavArea.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Render debug geometry for the bounds.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavArea.GetAreaID">
            <summary>
             Get the area id for this volume.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavArea.SetAreaID(System.UInt32)">
            <summary>
             Set the area id for this volume.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavArea.GetBoundingBox">
            <summary>
             Get the bounding box of this navigation area, in local space.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavArea.SetBoundingBox(AtomicEngine.BoundingBox)">
            <summary>
             Set the bounding box of this area, in local space.
            </summary>
        </member>
        <member name="M:AtomicEngine.NavArea.GetWorldBoundingBox">
            <summary>
             Get the bounds of this navigation area in world space.
            </summary>
        </member>
        <member name="T:AtomicEngine.Navigable">
            <summary>
             Component which tags geometry for inclusion in the navigation mesh. Optionally auto-includes geometry from child nodes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Navigable.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Navigable.SetRecursive(System.Boolean)">
            <summary>
             Set whether geometry is automatically collected from child nodes. Default true.
            </summary>
        </member>
        <member name="M:AtomicEngine.Navigable.IsRecursive">
            <summary>
             Return whether geometry is automatically collected from child nodes.
            </summary>
        </member>
        <member name="T:AtomicEngine.Obstacle">
            <summary>
             Obstacle for dynamic navigation mesh.
            </summary>
        </member>
        <member name="M:AtomicEngine.Obstacle.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Obstacle.OnSetEnabled">
            <summary>
             Update the owning mesh when enabled status has changed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Obstacle.GetHeight">
            <summary>
             Get the height of this obstacle.
            </summary>
        </member>
        <member name="M:AtomicEngine.Obstacle.SetHeight(System.Single)">
            <summary>
             Set the height of this obstacle.
            </summary>
        </member>
        <member name="M:AtomicEngine.Obstacle.GetRadius">
            <summary>
             Get the blocking radius of this obstacle.
            </summary>
        </member>
        <member name="M:AtomicEngine.Obstacle.SetRadius(System.Single)">
            <summary>
             Set the blocking radius of this obstacle.
            </summary>
        </member>
        <member name="M:AtomicEngine.Obstacle.GetObstacleID">
            <summary>
             Get the internal obstacle ID.
            </summary>
        </member>
        <member name="M:AtomicEngine.Obstacle.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Render debug information.
            </summary>
        </member>
        <member name="M:AtomicEngine.Obstacle.DrawDebugGeometry(System.Boolean)">
            <summary>
             Simplified rendering of debug information for script usage.
            </summary>
        </member>
        <member name="T:AtomicEngine.OffMeshConnection">
            <summary>
             A link between otherwise unconnected regions of the navigation mesh.
            </summary>
        </member>
        <member name="M:AtomicEngine.OffMeshConnection.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.OffMeshConnection.ApplyAttributes">
            <summary>
             Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.OffMeshConnection.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.OffMeshConnection.SetEndPoint(AtomicEngine.Node)">
            <summary>
             Set endpoint node.
            </summary>
        </member>
        <member name="M:AtomicEngine.OffMeshConnection.SetRadius(System.Single)">
            <summary>
             Set radius.
            </summary>
        </member>
        <member name="M:AtomicEngine.OffMeshConnection.SetBidirectional(System.Boolean)">
            <summary>
             Set bidirectional flag. Default true.
            </summary>
        </member>
        <member name="M:AtomicEngine.OffMeshConnection.SetMask(System.UInt32)">
            <summary>
             Set a user assigned mask
            </summary>
        </member>
        <member name="M:AtomicEngine.OffMeshConnection.SetAreaID(System.UInt32)">
            <summary>
             Sets the assigned area Id for the connection
            </summary>
        </member>
        <member name="M:AtomicEngine.OffMeshConnection.GetEndPoint">
            <summary>
             Return endpoint node.
            </summary>
        </member>
        <member name="M:AtomicEngine.OffMeshConnection.GetRadius">
            <summary>
             Return radius.
            </summary>
        </member>
        <member name="M:AtomicEngine.OffMeshConnection.IsBidirectional">
            <summary>
             Return whether is bidirectional.
            </summary>
        </member>
        <member name="M:AtomicEngine.OffMeshConnection.GetMask">
            <summary>
             Return the user assigned mask
            </summary>
        </member>
        <member name="M:AtomicEngine.OffMeshConnection.GetAreaID">
            <summary>
             Return the user assigned area ID
            </summary>
        </member>
        <member name="T:AtomicEngine.Connection">
            <summary>
             %Connection to a remote network host.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.SendRemoteEvent(AtomicEngine.StringHash,System.Boolean)">
            <summary>
             Send a remote event.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.SendRemoteEvent(AtomicEngine.Node,AtomicEngine.StringHash,System.Boolean)">
            <summary>
             Send a remote event with the specified node as sender.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.SetScene(AtomicEngine.Scene)">
            <summary>
             Assign scene. On the server, this will cause the client to load it.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.SetPosition(AtomicEngine.Vector3)">
            <summary>
             Set the observer position for interest management, to be sent to the server.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.SetRotation(AtomicEngine.Quaternion)">
            <summary>
             Set the observer rotation for interest management, to be sent to the server. Note: not used by the NetworkPriority component.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.SetConnectPending(System.Boolean)">
            <summary>
             Set the connection pending status. Called by Network.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.SetLogStatistics(System.Boolean)">
            <summary>
             Set whether to log data in/out statistics.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.Disconnect(System.Int32)">
            <summary>
             Disconnect. If wait time is non-zero, will block while waiting for disconnect to finish.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.SendServerUpdate">
            <summary>
             Send scene update messages. Called by Network.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.SendClientUpdate">
            <summary>
             Send latest controls from the client. Called by Network.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.SendRemoteEvents">
            <summary>
             Send queued remote events. Called by Network.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.SendPackages">
            <summary>
             Send package files to client. Called by network.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.ProcessPendingLatestData">
            <summary>
             Process pending latest data for nodes and components.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetScene">
            <summary>
             Return the scene used by this connection.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetTimeStamp">
            <summary>
             Return the controls timestamp, sent from client to server along each control update.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetPosition">
            <summary>
             Return the observer position sent by the client for interest management.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetRotation">
            <summary>
             Return the observer rotation sent by the client for interest management.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.IsClient">
            <summary>
             Return whether is a client connection.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.IsConnected">
            <summary>
             Return whether is fully connected.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.IsConnectPending">
            <summary>
             Return whether connection is pending.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.IsSceneLoaded">
            <summary>
             Return whether the scene is loaded and ready to receive server updates.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetLogStatistics">
            <summary>
             Return whether to log data in/out statistics.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetAddress">
            <summary>
             Return remote address.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetPort">
            <summary>
             Return remote port.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetRoundTripTime">
            <summary>
             Return the connection's round trip time in milliseconds.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetLastHeardTime">
            <summary>
             Return the time since last received data from the remote host in milliseconds.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetBytesInPerSec">
            <summary>
             Return bytes received per second.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetBytesOutPerSec">
            <summary>
             Return bytes sent per second.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetPacketsInPerSec">
            <summary>
             Return packets received per second.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetPacketsOutPerSec">
            <summary>
             Return packets sent per second.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.ToString">
            <summary>
             Return an address:port string.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetNumDownloads">
            <summary>
             Return number of package downloads remaining.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetDownloadName">
            <summary>
             Return name of current package download, or empty if no downloads.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.GetDownloadProgress">
            <summary>
             Return progress of current package download, or 1.0 if no downloads.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.SendPackageToClient(AtomicEngine.PackageFile)">
            <summary>
             Trigger client connection to download a package file from the server. Can be used to download additional resource packages when client is already joined in a scene. The package must have been added as a requirement to the scene the client is joined in, or else the eventual download will fail.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.ConfigureNetworkSimulator(System.Int32,System.Single)">
            <summary>
             Set network simulation parameters. Called by Network.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.SetControlButtons(System.UInt32,System.Boolean)">
            <summary>
             Expose control methods for current controls
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.IsControlButtonDown(System.UInt32)">
            <summary>
             Check if a button is held down.
            </summary>
        </member>
        <member name="M:AtomicEngine.Connection.SendStringMessage(System.String)">
            <summary>
             Send a message.
            </summary>
        </member>
        <member name="T:AtomicEngine.HttpRequest">
            <summary>
             An HTTP connection with response data stream.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ThreadFunction">
            <summary>
             Process the connection in the worker thread until closed.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.Seek(System.UInt32)">
            <summary>
             Set position from the beginning of the stream. Not supported.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.IsEof">
            <summary>
             Return whether all response data has been read.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.GetURL">
            <summary>
             Return URL used in the request.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.GetVerb">
            <summary>
             Return verb used in the request. Default GET if empty verb specified on construction.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.GetError">
            <summary>
             Return error. Only non-empty in the error state.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.GetState">
            <summary>
             Return connection state.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.GetAvailableSize">
            <summary>
             Return amount of bytes in the read buffer.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.IsOpen">
            <summary>
             Return whether connection is in the open state.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.GetName">
            <summary>
             Return name of the stream.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.GetChecksum">
            <summary>
             Return a checksum if applicable.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.GetPosition">
            <summary>
             Return current position.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.GetSize">
            <summary>
             Return size.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadInt64">
            <summary>
             Read a 64-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadInt">
            <summary>
             Read a 32-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadShort">
            <summary>
             Read a 16-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadByte">
            <summary>
             Read an 8-bit integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadUInt64">
            <summary>
             Read a 64-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadUInt">
            <summary>
             Read a 32-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadUShort">
            <summary>
             Read a 16-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadUByte">
            <summary>
             Read an 8-bit unsigned integer.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadBool">
            <summary>
             Read a bool.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadFloat">
            <summary>
             Read a float.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadDouble">
            <summary>
             Read a double.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadIntRect">
            <summary>
             Read an IntRect.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadIntVector2">
            <summary>
             Read an IntVector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadRect">
            <summary>
             Read a Rect.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadVector2">
            <summary>
             Read a Vector2.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadVector3">
            <summary>
             Read a Vector3.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadPackedVector3(System.Single)">
            <summary>
             Read a Vector3 packed into 3 x 16 bits with the specified maximum absolute range.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadVector4">
            <summary>
             Read a Vector4.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadQuaternion">
            <summary>
             Read a quaternion.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadPackedQuaternion">
            <summary>
             Read a quaternion with each component packed in 16 bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadColor">
            <summary>
             Read a color.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadBoundingBox">
            <summary>
             Read a bounding box.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadString">
            <summary>
             Read a null-terminated string.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadFileID">
            <summary>
             Read a four-letter file ID.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadStringHash">
            <summary>
             Read a 32-bit StringHash.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadVariantVector(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Read a variant vector.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadVLE">
            <summary>
             Read a variable-length encoded unsigned integer, which can use 29 bits maximum.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadNetID">
            <summary>
             Read a 24-bit network object ID.
            </summary>
        </member>
        <member name="M:AtomicEngine.HttpRequest.ReadLine">
            <summary>
             Read a text line.
            </summary>
        </member>
        <member name="T:AtomicEngine.MasterServerClient">
            <summary>
             Client for master server, see Script/AtomicMasterServer for example master server implementation
            </summary>
        </member>
        <member name="M:AtomicEngine.MasterServerClient.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.MasterServerClient.StartServerAndRegisterWithMaster(System.UInt16,System.String,System.UInt16,System.String)">
            <summary>
             Convenience method to start server and register it with the master server
            </summary>
        </member>
        <member name="T:AtomicEngine.Network">
            <summary>
             %Network subsystem. Manages client-server communications using the UDP protocol.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.Connect(System.String,System.UInt16,AtomicEngine.Scene)">
            <summary>
             Connect to a server using UDP protocol. Return true if connection process successfully started.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.Disconnect(System.Int32)">
            <summary>
             Disconnect the connection to the server. If wait time is non-zero, will block while waiting for disconnect to finish.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.StartServer(System.UInt16)">
            <summary>
             Start a server on a port using UDP protocol. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.StopServer">
            <summary>
             Stop the server.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.BroadcastRemoteEvent(AtomicEngine.StringHash,System.Boolean)">
            <summary>
             Broadcast a remote event to all client connections.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.BroadcastRemoteEvent(AtomicEngine.Scene,AtomicEngine.StringHash,System.Boolean)">
            <summary>
             Broadcast a remote event to all client connections in a specific scene.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.BroadcastRemoteEvent(AtomicEngine.Node,AtomicEngine.StringHash,System.Boolean)">
            <summary>
             Broadcast a remote event with the specified node as a sender. Is sent to all client connections in the node's scene.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.SetUpdateFps(System.Int32)">
            <summary>
             Set network update FPS.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.SetSimulatedLatency(System.Int32)">
            <summary>
             Set simulated latency in milliseconds. This adds a fixed delay before sending each packet.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.SetSimulatedPacketLoss(System.Single)">
            <summary>
             Set simulated packet loss probability between 0.0 - 1.0.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.RegisterRemoteEvent(AtomicEngine.StringHash)">
            <summary>
             Register a remote event as allowed to be received. There is also a fixed blacklist of events that can not be allowed in any case, such as ConsoleCommand.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.UnregisterRemoteEvent(AtomicEngine.StringHash)">
            <summary>
             Unregister a remote event as allowed to received.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.UnregisterAllRemoteEvents">
            <summary>
             Unregister all remote events.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.SetPackageCacheDir(System.String)">
            <summary>
             Set the package download cache directory.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.SendPackageToClients(AtomicEngine.Scene,AtomicEngine.PackageFile)">
            <summary>
             Trigger all client connections in the specified scene to download a package file from the server. Can be used to download additional resource packages when clients are already joined in the scene. The package must have been added as a requirement to the scene, or else the eventual download will fail.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.GetUpdateFps">
            <summary>
             Return network update FPS.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.GetSimulatedLatency">
            <summary>
             Return simulated latency in milliseconds.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.GetSimulatedPacketLoss">
            <summary>
             Return simulated packet loss probability.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.GetServerConnection">
            <summary>
             Return the connection to the server. Null if not connected.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.GetClientConnections">
            <summary>
             Return all client connections.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.IsServerRunning">
            <summary>
             Return whether the server is running.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.CheckRemoteEvent(AtomicEngine.StringHash)">
            <summary>
             Return whether a remote event is allowed to be received.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.GetPackageCacheDir">
            <summary>
             Return the package download cache directory.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.Update(System.Single)">
            <summary>
             Process incoming messages from connections. Called by HandleBeginFrame.
            </summary>
        </member>
        <member name="M:AtomicEngine.Network.PostUpdate(System.Single)">
            <summary>
             Send outgoing messages after frame logic. Called by HandleRenderUpdate.
            </summary>
        </member>
        <member name="T:AtomicEngine.NetworkPriority">
            <summary>
             %Network interest management settings component.
            </summary>
        </member>
        <member name="M:AtomicEngine.NetworkPriority.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.NetworkPriority.SetBasePriority(System.Single)">
            <summary>
             Set base priority. Default 100 (send updates at full frequency.)
            </summary>
        </member>
        <member name="M:AtomicEngine.NetworkPriority.SetDistanceFactor(System.Single)">
            <summary>
             Set priority reduction distance factor. Default 0 (no effect.)
            </summary>
        </member>
        <member name="M:AtomicEngine.NetworkPriority.SetMinPriority(System.Single)">
            <summary>
             Set minimum priority. Default 0 (no updates when far away enough.)
            </summary>
        </member>
        <member name="M:AtomicEngine.NetworkPriority.SetAlwaysUpdateOwner(System.Boolean)">
            <summary>
             Set whether updates to owner should be sent always at full rate. Default true.
            </summary>
        </member>
        <member name="M:AtomicEngine.NetworkPriority.GetBasePriority">
            <summary>
             Return base priority.
            </summary>
        </member>
        <member name="M:AtomicEngine.NetworkPriority.GetDistanceFactor">
            <summary>
             Return priority reduction distance factor.
            </summary>
        </member>
        <member name="M:AtomicEngine.NetworkPriority.GetMinPriority">
            <summary>
             Return minimum priority.
            </summary>
        </member>
        <member name="M:AtomicEngine.NetworkPriority.GetAlwaysUpdateOwner">
            <summary>
             Return whether updates to owner should be sent always at full rate.
            </summary>
        </member>
        <member name="T:AtomicEngine.CollisionShape">
            <summary>
             Physics collision shape component.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.ApplyAttributes">
            <summary>
             Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetBox(AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Set as a box.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetSphere(System.Single,AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Set as a sphere.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetStaticPlane(AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Set as a static plane.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetCylinder(System.Single,System.Single,AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Set as a cylinder.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetCapsule(System.Single,System.Single,AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Set as a capsule.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetCone(System.Single,System.Single,AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Set as a cone.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetTriangleMesh(AtomicEngine.Model,System.UInt32,AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Set as a triangle mesh from Model. If you update a model's geometry and want to reapply the shape, call physicsWorld->RemoveCachedGeometry(model) first.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetCustomTriangleMesh(AtomicEngine.CustomGeometry,AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Set as a triangle mesh from CustomGeometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetConvexHull(AtomicEngine.Model,System.UInt32,AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Set as a convex hull from Model.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetCustomConvexHull(AtomicEngine.CustomGeometry,AtomicEngine.Vector3,AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Set as a convex hull from CustomGeometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetTerrain(System.UInt32)">
            <summary>
             Set as a terrain. Only works if the same scene node contains a Terrain component.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetShapeType(AtomicEngine.ShapeType)">
            <summary>
             Set shape type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetSize(AtomicEngine.Vector3)">
            <summary>
             Set shape size.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetPosition(AtomicEngine.Vector3)">
            <summary>
             Set offset position.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetRotation(AtomicEngine.Quaternion)">
            <summary>
             Set offset rotation.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetTransform(AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Set offset transform.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetMargin(System.Single)">
            <summary>
             Set collision margin.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetModel(AtomicEngine.Model)">
            <summary>
             Set triangle mesh / convex hull model.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.SetLodLevel(System.UInt32)">
            <summary>
             Set model LOD level.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.GetPhysicsWorld">
            <summary>
             Return physics world.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.GetShapeType">
            <summary>
             Return shape type.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.GetSize">
            <summary>
             Return shape size.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.GetPosition">
            <summary>
             Return offset position.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.GetRotation">
            <summary>
             Return offset rotation.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.GetMargin">
            <summary>
             Return collision margin.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.GetModel">
            <summary>
             Return triangle mesh / convex hull model.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.GetLodLevel">
            <summary>
             Return model LOD level.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.GetWorldBoundingBox">
            <summary>
             Return world-space bounding box.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.NotifyRigidBody(System.Boolean)">
            <summary>
             Update the new collision shape to the RigidBody.
            </summary>
        </member>
        <member name="M:AtomicEngine.CollisionShape.ReleaseShape">
            <summary>
             Release the collision shape.
            </summary>
        </member>
        <member name="T:AtomicEngine.Constraint">
            <summary>
             Physics constraint component. Connects two rigid bodies together, or one rigid body to a static point.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.ApplyAttributes">
            <summary>
             Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetDependencyNodes(AtomicEngine.Vector{AtomicEngine.Node})">
            <summary>
             Return the depended on nodes to order network updates.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.SetConstraintType(AtomicEngine.ConstraintType)">
            <summary>
             Set constraint type and recreate the constraint.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.SetOtherBody(AtomicEngine.RigidBody)">
            <summary>
             Set other body to connect to. Set to null to connect to the static world.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.SetPosition(AtomicEngine.Vector3)">
            <summary>
             Set constraint position relative to own body.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.SetRotation(AtomicEngine.Quaternion)">
            <summary>
             Set constraint rotation relative to own body.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.SetAxis(AtomicEngine.Vector3)">
            <summary>
             Set constraint rotation relative to own body by specifying the axis.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.SetOtherPosition(AtomicEngine.Vector3)">
            <summary>
             Set constraint position relative to the other body. If connected to the static world, is a world space position.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.SetOtherRotation(AtomicEngine.Quaternion)">
            <summary>
             Set constraint rotation relative to the other body. If connected to the static world, is a world space rotation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.SetOtherAxis(AtomicEngine.Vector3)">
            <summary>
             Set constraint rotation relative to the other body by specifying the axis.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.SetWorldPosition(AtomicEngine.Vector3)">
            <summary>
             Set constraint world space position. Resets both own and other body relative position, ie. zeroes the constraint error.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.SetHighLimit(AtomicEngine.Vector2)">
            <summary>
             Set high limit. Interpretation is constraint type specific.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.SetLowLimit(AtomicEngine.Vector2)">
            <summary>
             Set low limit. Interpretation is constraint type specific.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.SetERP(System.Single)">
            <summary>
             Set constraint error reduction parameter. Zero = leave to default.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.SetCFM(System.Single)">
            <summary>
             Set constraint force mixing parameter. Zero = leave to default.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.SetDisableCollision(System.Boolean)">
            <summary>
             Set whether to disable collisions between connected bodies.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetPhysicsWorld">
            <summary>
             Return physics world.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetConstraintType">
            <summary>
             Return constraint type.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetOwnBody">
            <summary>
             Return rigid body in own scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetOtherBody">
            <summary>
             Return the other rigid body. May be null if connected to the static world.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetPosition">
            <summary>
             Return constraint position relative to own body.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetRotation">
            <summary>
             Return constraint rotation relative to own body.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetOtherPosition">
            <summary>
             Return constraint position relative to other body.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetOtherRotation">
            <summary>
             Return constraint rotation relative to other body.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetWorldPosition">
            <summary>
             Return constraint world position, calculated from own body.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetHighLimit">
            <summary>
             Return high limit.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetLowLimit">
            <summary>
             Return low limit.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetERP">
            <summary>
             Return constraint error reduction parameter.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetCFM">
            <summary>
             Return constraint force mixing parameter.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.GetDisableCollision">
            <summary>
             Return whether collisions between connected bodies are disabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.ReleaseConstraint">
            <summary>
             Release the constraint.
            </summary>
        </member>
        <member name="M:AtomicEngine.Constraint.ApplyFrames">
            <summary>
             Apply constraint frames.
            </summary>
        </member>
        <member name="T:AtomicEngine.RigidBody">
            <summary>
             Physics rigid body component.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.ApplyAttributes">
            <summary>
             Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.OnSetEnabled">
            <summary>
             Handle enabled/disabled state change.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Visualize the component as debug geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetMass(System.Single)">
            <summary>
             Set mass. Zero mass makes the body static.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetPosition(AtomicEngine.Vector3)">
            <summary>
             Set rigid body position in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetRotation(AtomicEngine.Quaternion)">
            <summary>
             Set rigid body rotation in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetTransform(AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Set rigid body position and rotation in world space as an atomic operation.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetLinearVelocity(AtomicEngine.Vector3)">
            <summary>
             Set linear velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetLinearFactor(AtomicEngine.Vector3)">
            <summary>
             Set linear degrees of freedom. Use 1 to enable an axis or 0 to disable. Default is all axes enabled (1, 1, 1).
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetLinearRestThreshold(System.Single)">
            <summary>
             Set linear velocity deactivation threshold.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetLinearDamping(System.Single)">
            <summary>
             Set linear velocity damping factor.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetAngularVelocity(AtomicEngine.Vector3)">
            <summary>
             Set angular velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetAngularFactor(AtomicEngine.Vector3)">
            <summary>
             Set angular degrees of freedom. Use 1 to enable an axis or 0 to disable. Default is all axes enabled (1, 1, 1).
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetAngularRestThreshold(System.Single)">
            <summary>
             Set angular velocity deactivation threshold.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetAngularDamping(System.Single)">
            <summary>
             Set angular velocity damping factor.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetFriction(System.Single)">
            <summary>
             Set friction coefficient.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetAnisotropicFriction(AtomicEngine.Vector3)">
            <summary>
             Set anisotropic friction.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetRollingFriction(System.Single)">
            <summary>
             Set rolling friction coefficient.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetRestitution(System.Single)">
            <summary>
             Set restitution coefficient.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetContactProcessingThreshold(System.Single)">
            <summary>
             Set contact processing threshold.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetCcdRadius(System.Single)">
            <summary>
             Set continuous collision detection swept sphere radius.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetCcdMotionThreshold(System.Single)">
            <summary>
             Set continuous collision detection motion-per-simulation-step threshold. 0 disables, which is the default.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetUseGravity(System.Boolean)">
            <summary>
             Set whether gravity is applied to rigid body.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetGravityOverride(AtomicEngine.Vector3)">
            <summary>
             Set gravity override. If zero, uses physics world's gravity.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetKinematic(System.Boolean)">
            <summary>
             Set rigid body kinematic mode. In kinematic mode forces are not applied to the rigid body.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetTrigger(System.Boolean)">
            <summary>
             Set rigid body trigger mode. In trigger mode collisions are reported but do not apply forces.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetCollisionLayer(System.UInt32)">
            <summary>
             Set collision layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetCollisionMask(System.UInt32)">
            <summary>
             Set collision mask.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetCollisionLayerAndMask(System.UInt32,System.UInt32)">
            <summary>
             Set collision group and mask.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.SetCollisionEventMode(AtomicEngine.CollisionEventMode)">
            <summary>
             Set collision event signaling mode. Default is to signal when rigid bodies are active.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.ApplyForce(AtomicEngine.Vector3)">
            <summary>
             Apply force to center of mass.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.ApplyForce(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
             Apply force at local position.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.ApplyTorque(AtomicEngine.Vector3)">
            <summary>
             Apply torque.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.ApplyImpulse(AtomicEngine.Vector3)">
            <summary>
             Apply impulse to center of mass.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.ApplyImpulse(AtomicEngine.Vector3,AtomicEngine.Vector3)">
            <summary>
             Apply impulse at local position.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.ApplyTorqueImpulse(AtomicEngine.Vector3)">
            <summary>
             Apply torque impulse.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.ResetForces">
            <summary>
             Reset accumulated forces.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.Activate">
            <summary>
             Activate rigid body if it was resting.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.ReAddBodyToWorld">
            <summary>
             Readd rigid body to the physics world to clean up internal state like stale contacts.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.DisableMassUpdate">
            <summary>
             Disable mass update. Call this to optimize performance when adding or editing multiple collision shapes in the same node.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.EnableMassUpdate">
            <summary>
             Re-enable mass update and recalculate the mass/inertia by calling UpdateMass(). Call when collision shape changes are finished.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetPhysicsWorld">
            <summary>
             Return physics world.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetMass">
            <summary>
             Return mass.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetPosition">
            <summary>
             Return rigid body position in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetRotation">
            <summary>
             Return rigid body rotation in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetLinearVelocity">
            <summary>
             Return linear velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetLinearFactor">
            <summary>
             Return linear degrees of freedom.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetVelocityAtPoint(AtomicEngine.Vector3)">
            <summary>
             Return linear velocity at local point.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetLinearRestThreshold">
            <summary>
             Return linear velocity deactivation threshold.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetLinearDamping">
            <summary>
             Return linear velocity damping factor.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetAngularVelocity">
            <summary>
             Return angular velocity.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetAngularFactor">
            <summary>
             Return angular degrees of freedom.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetAngularRestThreshold">
            <summary>
             Return angular velocity deactivation threshold.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetAngularDamping">
            <summary>
             Return angular velocity damping factor.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetFriction">
            <summary>
             Return friction coefficient.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetAnisotropicFriction">
            <summary>
             Return anisotropic friction.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetRollingFriction">
            <summary>
             Return rolling friction coefficient.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetRestitution">
            <summary>
             Return restitution coefficient.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetContactProcessingThreshold">
            <summary>
             Return contact processing threshold.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetCcdRadius">
            <summary>
             Return continuous collision detection swept sphere radius.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetCcdMotionThreshold">
            <summary>
             Return continuous collision detection motion-per-simulation-step threshold.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetUseGravity">
            <summary>
             Return whether rigid body uses gravity.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetGravityOverride">
            <summary>
             Return gravity override. If zero (default), uses the physics world's gravity.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetCenterOfMass">
            <summary>
             Return center of mass offset.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.IsKinematic">
            <summary>
             Return kinematic mode flag.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.IsTrigger">
            <summary>
             Return whether this RigidBody is acting as a trigger.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.IsActive">
            <summary>
             Return whether rigid body is active (not sleeping.)
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetCollisionLayer">
            <summary>
             Return collision layer.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetCollisionMask">
            <summary>
             Return collision mask.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetCollisionEventMode">
            <summary>
             Return collision event signaling mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.GetCollidingBodies(AtomicEngine.Vector{AtomicEngine.RigidBody})">
            <summary>
             Return colliding rigid bodies from the last simulation step. Only returns collisions that were sent as events (depends on collision event mode) and excludes e.g. static-static collisions.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.ApplyWorldTransform(AtomicEngine.Vector3,AtomicEngine.Quaternion)">
            <summary>
             Apply new world transform after a simulation step. Called internally.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.UpdateMass">
            <summary>
             Update mass and inertia to the Bullet rigid body.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.UpdateGravity">
            <summary>
             Update gravity parameters to the Bullet rigid body.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.AddConstraint(AtomicEngine.Constraint)">
            <summary>
             Add a constraint that refers to this rigid body.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.RemoveConstraint(AtomicEngine.Constraint)">
            <summary>
             Remove a constraint that refers to this rigid body.
            </summary>
        </member>
        <member name="M:AtomicEngine.RigidBody.ReleaseBody">
            <summary>
             Remove the rigid body.
            </summary>
        </member>
        <member name="T:AtomicEngine.Image">
            <summary>
             %Image resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.#ctor(System.IntPtr)">
            <summary>
             Construct empty.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.Save(AtomicEngine.Serializer)">
            <summary>
             Save the image to a stream. Regardless of original format, the image is saved as png. Compressed image data is not supported. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.SetSize(System.Int32,System.Int32,System.UInt32)">
            <summary>
             Set 2D size and number of color components. Old image data will be destroyed and new data is undefined. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.SetSize(System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
             Set 3D size and number of color components. Old image data will be destroyed and new data is undefined. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.SetPixel(System.Int32,System.Int32,AtomicEngine.Color)">
            <summary>
             Set a 2D pixel.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.SetPixel(System.Int32,System.Int32,System.Int32,AtomicEngine.Color)">
            <summary>
             Set a 3D pixel.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.SetPixelInt(System.Int32,System.Int32,System.UInt32)">
            <summary>
             Set a 2D pixel with an integer color. R component is in the 8 lowest bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.SetPixelInt(System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
             Set a 3D pixel with an integer color. R component is in the 8 lowest bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.LoadColorLUT(AtomicEngine.Deserializer)">
            <summary>
             Load as color LUT. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.FlipHorizontal">
            <summary>
             Flip image horizontally. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.FlipVertical">
            <summary>
             Flip image vertically. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.Resize(System.Int32,System.Int32)">
            <summary>
             Resize image by bilinear resampling. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.Clear(AtomicEngine.Color)">
            <summary>
             Clear the image with a color.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.ClearInt(System.UInt32)">
            <summary>
             Clear the image with an integer color. R component is in the 8 lowest bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.SaveBMP(System.String)">
            <summary>
             Save in BMP format. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.SavePNG(System.String)">
            <summary>
             Save in PNG format. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.SaveTGA(System.String)">
            <summary>
             Save in TGA format. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.SaveJPG(System.String,System.Int32)">
            <summary>
             Save in JPG format with compression quality. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.IsCubemap">
            <summary>
             Whether this texture is detected as a cubemap, only relevant for DDS.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.IsArray">
            <summary>
             Whether this texture has been detected as a volume, only relevant for DDS.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.IsSRGB">
            <summary>
             Whether this texture is in sRGB, only relevant for DDS.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetPixel(System.Int32,System.Int32)">
            <summary>
             Return a 2D pixel color.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetPixel(System.Int32,System.Int32,System.Int32)">
            <summary>
             Return a 3D pixel color.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetPixelInt(System.Int32,System.Int32)">
            <summary>
             Return a 2D pixel integer color. R component is in the 8 lowest bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetPixelInt(System.Int32,System.Int32,System.Int32)">
            <summary>
             Return a 3D pixel integer color. R component is in the 8 lowest bits.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetPixelBilinear(System.Single,System.Single)">
            <summary>
             Return a bilinearly sampled 2D pixel color. X and Y have the range 0-1.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetPixelTrilinear(System.Single,System.Single,System.Single)">
            <summary>
             Return a trilinearly sampled 3D pixel color. X, Y and Z have the range 0-1.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetWidth">
            <summary>
             Return width.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetHeight">
            <summary>
             Return height.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetDepth">
            <summary>
             Return depth.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetComponents">
            <summary>
             Return number of color components.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.IsCompressed">
            <summary>
             Return whether is compressed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetCompressedFormat">
            <summary>
             Return compressed format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetNumCompressedLevels">
            <summary>
             Return number of compressed mip levels. Returns 0 if the image is has not been loaded from a source file containing multiple mip levels.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetNextLevel">
            <summary>
             Return next mip level by bilinear filtering. Note that if the image is already 1x1x1, will keep returning an image of that size.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetNextSibling">
            <summary>
             Return the next sibling image of an array or cubemap.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.ConvertToRGBA">
            <summary>
             Return image converted to 4-component (RGBA) to circumvent modern rendering API's not supporting e.g. the luminance-alpha format.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetSubimage(AtomicEngine.IntRect)">
            <summary>
             Return subimage from the image by the defined rect or null if failed. 3D images are not supported. You must free the subimage yourself.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.PrecalculateLevels">
            <summary>
             Precalculate the mip levels. Used by asynchronous texture loading.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.HasAlphaChannel">
            <summary>
             Whether this texture has an alpha channel
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.SetSubimage(AtomicEngine.Image,AtomicEngine.IntRect)">
            <summary>
             Copy contents of the image into the defined rect, scaling if necessary. This image should already be large enough to include the rect. Compressed and 3D images are not supported.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.CleanupLevels">
            <summary>
             Clean up the mip levels.
            </summary>
        </member>
        <member name="M:AtomicEngine.Image.GetLevels(AtomicEngine.Vector{AtomicEngine.Image})">
            <summary>
             Get all stored mip levels starting from this.
            </summary>
        </member>
        <member name="T:AtomicEngine.JSONFile">
            <summary>
             JSON document resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.JSONFile.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.JSONFile.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.JSONFile.Save(AtomicEngine.Serializer)">
            <summary>
             Save resource with default indentation (one tab). Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.JSONFile.Save(AtomicEngine.Serializer,System.String)">
            <summary>
             Save resource with user-defined indentation, only the first character (if any) of the string is used and the length of the string defines the character count. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.JSONFile.FromString(System.String)">
            <summary>
             Deserialize from a string. Return true if successful.
            </summary>
        </member>
        <member name="T:AtomicEngine.PListFile">
            <summary>
             Property list (plist).
            </summary>
        </member>
        <member name="M:AtomicEngine.PListFile.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.PListFile.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="T:AtomicEngine.Resource">
            <summary>
             Base class for resources.
            </summary>
        </member>
        <member name="M:AtomicEngine.Resource.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AtomicEngine.Resource.Load(AtomicEngine.Deserializer)" -->
        <member name="M:AtomicEngine.Resource.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Resource.EndLoad">
            <summary>
             Finish resource loading. Always called from the main thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Resource.Save(AtomicEngine.Serializer)">
            <summary>
             Save resource. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Resource.SetName(System.String)">
            <summary>
             Set name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Resource.SetMemoryUse(System.UInt32)">
            <summary>
             Set memory use in bytes, possibly approximate.
            </summary>
        </member>
        <member name="M:AtomicEngine.Resource.ResetUseTimer">
            <summary>
             Reset last used timer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Resource.SetAsyncLoadState(AtomicEngine.AsyncLoadState)">
            <summary>
             Set the asynchronous loading state. Called by ResourceCache. Resources in the middle of asynchronous loading are not normally returned to user.
            </summary>
        </member>
        <member name="M:AtomicEngine.Resource.GetName">
            <summary>
             Return name.
            </summary>
        </member>
        <member name="M:AtomicEngine.Resource.GetNameHash">
            <summary>
             Return name hash.
            </summary>
        </member>
        <member name="M:AtomicEngine.Resource.GetMemoryUse">
            <summary>
             Return memory use in bytes, possibly approximate.
            </summary>
        </member>
        <member name="M:AtomicEngine.Resource.GetUseTimer">
            <summary>
             Return time since last use in milliseconds. If referred to elsewhere than in the resource cache, returns always zero.
            </summary>
        </member>
        <member name="M:AtomicEngine.Resource.GetAsyncLoadState">
            <summary>
             Return the asynchronous loading state.
            </summary>
        </member>
        <member name="T:AtomicEngine.XMLFile">
            <summary>
             XML document resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.XMLFile.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.XMLFile.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.XMLFile.Save(AtomicEngine.Serializer)">
            <summary>
             Save resource with default indentation (one tab). Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.XMLFile.Save(AtomicEngine.Serializer,System.String)">
            <summary>
             Save resource with user-defined indentation. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.XMLFile.FromString(System.String)">
            <summary>
             Deserialize from a string. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.XMLFile.ToString(System.String)">
            <summary>
             Serialize the XML content to a string.
            </summary>
        </member>
        <member name="M:AtomicEngine.XMLFile.Patch(AtomicEngine.XMLFile)">
            <summary>
             Patch the XMLFile with another XMLFile. Based on RFC 5261.
            </summary>
        </member>
        <member name="T:AtomicEngine.Animatable">
            <summary>
             Base class for animatable object, an animatable object can be set animation on it's attributes, or can be set an object animation to it.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.SetAnimationEnabled(System.Boolean)">
            <summary>
             Set automatic update of animation, default true.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.SetAnimationTime(System.Single)">
            <summary>
             Set time position of all attribute animations or an object animation manually. Automatic update should be disabled in this case.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.SetObjectAnimation(AtomicEngine.ObjectAnimation)">
            <summary>
             Set object animation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.SetAttributeAnimation(System.String,AtomicEngine.ValueAnimation,AtomicEngine.WrapMode,System.Single)">
            <summary>
             Set attribute animation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.SetAttributeAnimationWrapMode(System.String,AtomicEngine.WrapMode)">
            <summary>
             Set attribute animation wrap mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.SetAttributeAnimationSpeed(System.String,System.Single)">
            <summary>
             Set attribute animation speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.SetAttributeAnimationTime(System.String,System.Single)">
            <summary>
             Set attribute animation time position manually. Automatic update should be disabled in this case.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.RemoveObjectAnimation">
            <summary>
             Remove object animation. Same as calling SetObjectAnimation with a null pointer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.RemoveAttributeAnimation(System.String)">
            <summary>
             Remove attribute animation. Same as calling SetAttributeAnimation with a null pointer.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.GetAnimationEnabled">
            <summary>
             Return animation enabled.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.GetObjectAnimation">
            <summary>
             Return object animation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.GetAttributeAnimation(System.String)">
            <summary>
             Return attribute animation.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.GetAttributeAnimationWrapMode(System.String)">
            <summary>
             Return attribute animation wrap mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.GetAttributeAnimationSpeed(System.String)">
            <summary>
             Return attribute animation speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Animatable.GetAttributeAnimationTime(System.String)">
            <summary>
             Return attribute animation time position.
            </summary>
        </member>
        <member name="T:AtomicEngine.ObjectAnimation">
            <summary>
             Object animation class, an object animation include one or more attribute animations and theirs wrap mode and speed for an Animatable object.
            </summary>
        </member>
        <member name="M:AtomicEngine.ObjectAnimation.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ObjectAnimation.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.ObjectAnimation.Save(AtomicEngine.Serializer)">
            <summary>
             Save resource. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.ObjectAnimation.AddAttributeAnimation(System.String,AtomicEngine.ValueAnimation,AtomicEngine.WrapMode,System.Single)">
            <summary>
             Add attribute animation, attribute name can in following format: "attribute" or "#0/#1/attribute" or ""#0/#1/@component#1/attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.ObjectAnimation.RemoveAttributeAnimation(System.String)">
            <summary>
             Remove attribute animation, attribute name can in following format: "attribute" or "#0/#1/attribute" or ""#0/#1/@component#1/attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.ObjectAnimation.RemoveAttributeAnimation(AtomicEngine.ValueAnimation)">
            <summary>
             Remove attribute animation.
            </summary>
        </member>
        <member name="M:AtomicEngine.ObjectAnimation.GetAttributeAnimation(System.String)">
            <summary>
             Return attribute animation by name.
            </summary>
        </member>
        <member name="M:AtomicEngine.ObjectAnimation.GetAttributeAnimationWrapMode(System.String)">
            <summary>
             Return attribute animation wrap mode by name.
            </summary>
        </member>
        <member name="M:AtomicEngine.ObjectAnimation.GetAttributeAnimationSpeed(System.String)">
            <summary>
             Return attribute animation speed by name.
            </summary>
        </member>
        <member name="M:AtomicEngine.ObjectAnimation.GetAttributeAnimationInfo(System.String)">
            <summary>
             Return attribute animation info by name.
            </summary>
        </member>
        <member name="M:AtomicEngine.PrefabComponent.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="T:AtomicEngine.Serializable">
            <summary>
             Base class for objects with automatic serialization through attributes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.Load(AtomicEngine.Deserializer,System.Boolean)">
            <summary>
             Load from binary data. When setInstanceDefault is set to true, after setting the attribute value, store the value as instance's default value. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.Save(AtomicEngine.Serializer)">
            <summary>
             Save as binary data. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.ApplyAttributes">
            <summary>
             Apply attribute changes that can not be applied immediately. Called after scene load or a network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.SaveDefaultAttributes">
            <summary>
             Return whether should save default-valued attributes into XML. Default false.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.MarkNetworkUpdate">
            <summary>
             Mark for attribute check on the next network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.ResetToDefault">
            <summary>
             Reset all editable attributes to their default values.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.RemoveInstanceDefault">
            <summary>
             Remove instance's default values if they are set previously.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.SetTemporary(System.Boolean)">
            <summary>
             Set temporary flag. Temporary objects will not be saved.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.SetInterceptNetworkUpdate(System.String,System.Boolean)">
            <summary>
             Enable interception of an attribute from network updates. Intercepted attributes are sent as events instead of applying directly. This can be used to implement client side prediction.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.AllocateNetworkState">
            <summary>
             Allocate network attribute state.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.WriteInitialDeltaUpdate(AtomicEngine.Serializer,System.Byte)">
            <summary>
             Write initial delta network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.WriteLatestDataUpdate(AtomicEngine.Serializer,System.Byte)">
            <summary>
             Write a latest data network update.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.ReadDeltaUpdate(AtomicEngine.Deserializer)">
            <summary>
             Read and apply a network delta update. Return true if attributes were changed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.ReadLatestDataUpdate(AtomicEngine.Deserializer)">
            <summary>
             Read and apply a network latest data update. Return true if attributes were changed.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.GetNumAttributes">
            <summary>
             Return number of attributes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.GetNumNetworkAttributes">
            <summary>
             Return number of network replication attributes.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.IsTemporary">
            <summary>
             Return whether is temporary.
            </summary>
        </member>
        <member name="M:AtomicEngine.Serializable.GetInterceptNetworkUpdate(System.String)">
            <summary>
             Return whether an attribute's network updates are being intercepted.
            </summary>
        </member>
        <member name="T:AtomicEngine.SmoothedTransform">
            <summary>
             Transform smoothing component for network updates.
            </summary>
        </member>
        <member name="M:AtomicEngine.SmoothedTransform.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.SmoothedTransform.Update(System.Single,System.Single)">
            <summary>
             Update smoothing.
            </summary>
        </member>
        <member name="M:AtomicEngine.SmoothedTransform.SetTargetPosition(AtomicEngine.Vector3)">
            <summary>
             Set target position in parent space.
            </summary>
        </member>
        <member name="M:AtomicEngine.SmoothedTransform.SetTargetRotation(AtomicEngine.Quaternion)">
            <summary>
             Set target rotation in parent space.
            </summary>
        </member>
        <member name="M:AtomicEngine.SmoothedTransform.SetTargetWorldPosition(AtomicEngine.Vector3)">
            <summary>
             Set target position in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.SmoothedTransform.SetTargetWorldRotation(AtomicEngine.Quaternion)">
            <summary>
             Set target rotation in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.SmoothedTransform.GetTargetPosition">
            <summary>
             Return target position in parent space.
            </summary>
        </member>
        <member name="M:AtomicEngine.SmoothedTransform.GetTargetRotation">
            <summary>
             Return target rotation in parent space.
            </summary>
        </member>
        <member name="M:AtomicEngine.SmoothedTransform.GetTargetWorldPosition">
            <summary>
             Return target position in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.SmoothedTransform.GetTargetWorldRotation">
            <summary>
             Return target rotation in world space.
            </summary>
        </member>
        <member name="M:AtomicEngine.SmoothedTransform.IsInProgress">
            <summary>
             Return whether smoothing is in progress.
            </summary>
        </member>
        <member name="T:AtomicEngine.SplinePath">
            <summary>
             Spline for creating smooth movement based on Speed along a set of Control Points modified by the Interpolation Mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.#ctor(System.IntPtr)">
            <summary>
             Construct an Empty SplinePath.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.ApplyAttributes">
            <summary>
             Apply Attributes to the SplinePath.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.DrawDebugGeometry(AtomicEngine.DebugRenderer,System.Boolean)">
            <summary>
             Draw the Debug Geometry.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.AddControlPoint(AtomicEngine.Node,System.UInt32)">
            <summary>
             Add a Node to the SplinePath as a Control Point.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.RemoveControlPoint(AtomicEngine.Node)">
            <summary>
             Remove a Node Control Point from the SplinePath.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.ClearControlPoints">
            <summary>
             Clear the Control Points from the SplinePath.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.SetInterpolationMode(AtomicEngine.InterpolationMode)">
            <summary>
             Set the Interpolation Mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.SetSpeed(System.Single)">
            <summary>
             Set the movement Speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.SetPosition(System.Single)">
            <summary>
             Set the controlled Node's position on the SplinePath.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.SetControlledNode(AtomicEngine.Node)">
            <summary>
             Set the Node to be moved along the SplinePath.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.GetInterpolationMode">
            <summary>
             Get the Interpolation Mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.GetSpeed">
            <summary>
             Get the movement Speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.GetLength">
            <summary>
             Get the length of SplinePath;
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.GetPosition">
            <summary>
             Get the parent Node's last position on the spline.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.GetControlledNode">
            <summary>
             Get the controlled Node.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.GetPoint(System.Single)">
            <summary>
             Get a point on the SplinePath from 0.f to 1.f where 0 is the start and 1 is the end.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.Move(System.Single)">
            <summary>
             Move the controlled Node to the next position along the SplinePath based off the Speed value.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.Reset">
            <summary>
             Reset movement along the path.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.IsFinished">
            <summary>
             Returns whether the movement along the SplinePath is complete.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.SetControlPointIdsAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Set Control Point Node IDs attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.GetControlPointIdsAttr(AtomicEngine.Vector{AtomicEngine.ScriptVariant})">
            <summary>
             Return Control Point Node IDs attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.SetControlledIdAttr(System.UInt32)">
            <summary>
             Set Controlled Node ID attribute.
            </summary>
        </member>
        <member name="M:AtomicEngine.SplinePath.GetControlledIdAttr">
            <summary>
             Get Controlled Node ID attribute.
            </summary>
        </member>
        <member name="T:AtomicEngine.ValueAnimationInfo">
            <summary>
             Base class for a value animation instance, which includes animation runtime information and updates the target object's value automatically.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimationInfo.#ctor(System.IntPtr)">
            <summary>
             Construct without target object.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimationInfo.#ctor(AtomicEngine.AObject,AtomicEngine.ValueAnimation,AtomicEngine.WrapMode,System.Single)">
            <summary>
             Construct with target object.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimationInfo.#ctor(AtomicEngine.ValueAnimationInfo)">
            <summary>
             Copy construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimationInfo.Update(System.Single)">
            <summary>
             Advance time position and apply. Return true when the animation is finished. No-op when the target object is not defined.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimationInfo.SetTime(System.Single)">
            <summary>
             Set time position and apply. Return true when the animation is finished. No-op when the target object is not defined.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimationInfo.SetWrapMode(AtomicEngine.WrapMode)">
            <summary>
             Set wrap mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimationInfo.SetSpeed(System.Single)">
            <summary>
             Set speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimationInfo.GetTarget">
            <summary>
             Return target object.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimationInfo.GetAnimation">
            <summary>
             Return animation.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimationInfo.GetWrapMode">
            <summary>
             Return wrap mode.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimationInfo.GetTime">
            <summary>
             Return time position.
            </summary>
        </member>
        <member name="M:AtomicEngine.ValueAnimationInfo.GetSpeed">
            <summary>
             Return speed.
            </summary>
        </member>
        <member name="M:AtomicEngine.ScriptComponent.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="T:AtomicEngine.ScriptComponentFile">
            <summary>
             NET Assembly resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.ScriptComponentFile.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.UI.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.UI.LoadDefaultPlayerSkin">
            <summary>
             UI/Skin/Override/skin.ui.txt for base skin and possible override (TODO: baked in UI setting for load from project)
            </summary>
        </member>
        <member name="M:AtomicEngine.UI.CycleDebugHudMode">
            <summary>
             Cycle debug HUD between showing primitive stats, current mode, profiler data, all three or none
            </summary>
        </member>
        <member name="M:AtomicEngine.UI.RequestExit">
            <summary>
             request exit on next frame
            </summary>
        </member>
        <member name="M:AtomicEngine.UIButton.SetSqueezable(System.Boolean)">
            <summary>
             If squeezable it may shrink to width 0
            </summary>
        </member>
        <member name="M:AtomicEngine.UIButton.SetURLEnabled(System.Boolean)">
            <summary>
             for example a http:// link will open the default browser
            </summary>
        </member>
        <member name="M:AtomicEngine.UIButton.SetURL(System.String)">
            <summary>
             Set the URL which is opened when this button is clicked
            </summary>
        </member>
        <member name="M:AtomicEngine.UIButton.GetURL">
            <summary>
             Get the URL which is opened when this button is clicked
            </summary>
        </member>
        <member name="M:AtomicEngine.UIButton.SetToggleMode(System.Boolean)">
            <summary>
            Set to true if the button should toggle on and off    
            </summary>
        </member>
        <member name="T:AtomicEngine.UIColorWidget">
            <summary>
             doesn't need to be loaded 2x (once for Texture2D and once for say a UIImageWidget)
            </summary>
        </member>
        <member name="M:AtomicEngine.UIColorWidget.SetColor(AtomicEngine.Color)">
            <summary>
             Set color from a Color value
            </summary>
        </member>
        <member name="M:AtomicEngine.UIColorWidget.SetColorString(System.String)">
            <summary>
             Set color from hex string
            </summary>
        </member>
        <member name="M:AtomicEngine.UIDragObject.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.UIListView.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.UISceneView.OnResize(AtomicEngine.IntVector2)">
            <summary>
             React to resize.
            </summary>
        </member>
        <member name="M:AtomicEngine.UISceneView.SetView(AtomicEngine.Scene,AtomicEngine.Camera)">
            <summary>
             Define the scene and camera to use in rendering. When ownScene is true the View3D will take ownership of them with shared pointers.
            </summary>
        </member>
        <member name="M:AtomicEngine.UISceneView.SetFormat(System.UInt32)">
            <summary>
             Set render texture pixel format. Default is RGB.
            </summary>
        </member>
        <member name="M:AtomicEngine.UISceneView.SetAutoUpdate(System.Boolean)">
            <summary>
             Set render target auto update mode. Default is true.
            </summary>
        </member>
        <member name="M:AtomicEngine.UISceneView.QueueUpdate">
            <summary>
             Queue manual update on the render texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.UISceneView.GetFormat">
            <summary>
             Return render texture pixel format.
            </summary>
        </member>
        <member name="M:AtomicEngine.UISceneView.GetAutoUpdate">
            <summary>
             Return whether render target updates automatically.
            </summary>
        </member>
        <member name="M:AtomicEngine.UISceneView.GetScene">
            <summary>
             Return scene.
            </summary>
        </member>
        <member name="M:AtomicEngine.UISceneView.GetCameraNode">
            <summary>
             Return camera scene node.
            </summary>
        </member>
        <member name="M:AtomicEngine.UISceneView.GetRenderTexture">
            <summary>
             Return render texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.UISceneView.GetDepthTexture">
            <summary>
             Return depth stencil texture.
            </summary>
        </member>
        <member name="M:AtomicEngine.UISceneView.GetViewport">
            <summary>
             Return viewport.
            </summary>
        </member>
        <member name="M:AtomicEngine.UIScrollContainer.SetAdaptToContentSize(System.Boolean)">
            <summary>
             Set to true if the preferred size of this container should adapt to the preferred size of the content. This is disabled by default.
            </summary>
        </member>
        <member name="M:AtomicEngine.UIScrollContainer.SetAdaptContentSize(System.Boolean)">
            <summary>
             Set to true if the content should adapt to the available size of this container when it's larger than the preferred size.
            </summary>
        </member>
        <member name="M:AtomicEngine.UISelectItemSource.GetItemStr(System.Int32)">
            <summary>
             Returns item string for the index. Returns empty string for invalid indexes.
            </summary>
        </member>
        <member name="T:AtomicEngine.UITextureWidget">
            <summary>
             doesn't need to be loaded 2x (once for Texture2D and once for say a UIImageWidget)
            </summary>
        </member>
        <member name="T:AtomicEngine.UIView">
            <summary>
             a view off the root widget
            </summary>
        </member>
        <member name="T:AtomicEngine.Web">
            <summary>
             %Web subsystem. Manages HTTP requests and WebSocket communications.
            </summary>
        </member>
        <member name="M:AtomicEngine.Web.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.Web.MakeWebRequest(System.String,System.String,System.Single)">
            <summary>
             Perform an HTTP request to the specified URL. Empty verb defaults to a GET request. Return a request object which can be used to read the response data.
            </summary>
        </member>
        <member name="M:AtomicEngine.Web.MakeWebSocket(System.String)">
            <summary>
             Perform an WebSocket request to the specified URL. Return a WebSocket object which can be used to comunicate with the server.
            </summary>
        </member>
        <member name="T:AtomicEngine.WebRequest">
            <summary>
             An HTTP(S) connection with response data stream that uses curl internally
            </summary>
        </member>
        <member name="M:AtomicEngine.WebRequest.#ctor(System.IntPtr)">
            <summary>
             Construct with parameters.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebRequest.GetURL">
            <summary>
             Return URL used in the request.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebRequest.GetError">
            <summary>
             Return error. Only non-empty in the error state.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebRequest.GetState">
            <summary>
             Return connection state.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebRequest.GetVerb">
            <summary>
             Get the HTTP verb for this request.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebRequest.Abort">
            <summary>
             Abort the WebRequest.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebRequest.IsOpen">
            <summary>
             Return whether connection is in the open state.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebRequest.HasDownloadChunkEvent">
            <summary>
             Return whether E_WEBREQUESTDOWNLOADCHUNK event will be fired or if only E_WEBREQUESTCOMPLETE will be.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebRequest.SetRequestHeader(System.String,System.String)">
            <summary>
             Set an HTTP request header (only works before Send has been called).
            </summary>
        </member>
        <member name="M:AtomicEngine.WebRequest.Send">
            <summary>
             Start sending the request.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebRequest.GetResponseHeader(System.String)">
            <summary>
             Get an HTTP response header.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebRequest.GetAllResponseHeaders">
            <summary>
             Get all HTTP response headers. Using GetResponseHeaderKeys() and GetResponseHeader() is more efficient than using this function.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebRequest.SetPostData(System.String)">
            <summary>
             Set post data for request
            </summary>
        </member>
        <member name="M:AtomicEngine.WebRequest.GetResponse">
            <summary>
             Get the request response as a string
            </summary>
        </member>
        <member name="T:AtomicEngine.WebSocket">
            <summary>
             A WebSocket connection.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebSocket.#ctor(System.IntPtr)">
            <summary>
             Construct with parameters.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebSocket.GetURL">
            <summary>
             Return URL used in the request.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebSocket.GetError">
            <summary>
             Return error. Only non-empty in the error state.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebSocket.GetState">
            <summary>
             Return connection state.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebSocket.Send(System.String)">
            <summary>
             Send a message.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebSocket.Close">
            <summary>
             Disconnect the WebSocket.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebSocket.OpenAgain">
            <summary>
             Attempt to reconnect the WebSocket.
            </summary>
        </member>
        <member name="M:AtomicEngine.WebSocket.IsOpen">
            <summary>
             Return whether connection is in the open state.
            </summary>
        </member>
        <member name="T:AtomicEngine.CSComponentAssembly">
            <summary>
             NET Assembly resource.
            </summary>
        </member>
        <member name="M:AtomicEngine.CSComponentAssembly.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.CSComponentAssembly.BeginLoad(AtomicEngine.Deserializer)">
            <summary>
             Load resource from stream. May be called from a worker thread. Return true if successful.
            </summary>
        </member>
        <member name="M:AtomicEngine.CSComponentAssembly.Save(AtomicEngine.Serializer)">
            <summary>
             Save resource
            </summary>
        </member>
        <member name="T:AtomicEngine.NETScriptObject">
            <summary>
             Object (which is abstract) and use the event system, etc
            </summary>
        </member>
        <member name="M:AtomicEngine.NETScriptObject.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.NETCore.GetContext">
            <summary>
             to get a reference from
            </summary>
        </member>
        <member name="M:AtomicEngine.IPCClientApp.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.IPCPlayerApp.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicEngine.IPCPlayerApp.Setup">
            <summary>
             Setup before engine initialization. 
            </summary>
        </member>
        <member name="M:AtomicEngine.IPCPlayerApp.Start">
            <summary>
             Setup after engine initialization. L
            </summary>
        </member>
        <member name="M:AtomicEngine.IPCPlayerApp.Stop">
            <summary>
             Cleanup after the main loop. 
            </summary>
        </member>
        <member name="T:AtomicPlayer.Player">
            <summary>
             Player subsystem
            </summary>
        </member>
        <member name="M:AtomicPlayer.Player.#ctor(System.IntPtr)">
            <summary>
             Construct.
            </summary>
        </member>
        <member name="M:AtomicPlayer.Player.LoadScene(System.String,AtomicEngine.Camera)">
            <summary>
             Load a scene file with optional camera specified
            </summary>
        </member>
        <member name="M:AtomicPlayer.Player.GetNumScenes">
            <summary>
             Get the number of currently loaded scenes
            </summary>
        </member>
        <member name="M:AtomicPlayer.Player.GetCurrentScene">
            <summary>
             Get the current scene
            </summary>
        </member>
        <member name="M:AtomicPlayer.Player.GetScene(System.UInt32)">
            <summary>
             Get the scene loaded at specified index
            </summary>
        </member>
        <member name="M:AtomicPlayer.Player.SetCurrentScene(AtomicEngine.Scene,AtomicEngine.Camera)">
            <summary>
             Set the current scene 
            </summary>
        </member>
        <member name="M:AtomicPlayer.Player.UnloadScene(AtomicEngine.Scene)">
            <summary>
             Unload a scene
            </summary>
        </member>
        <member name="M:AtomicPlayer.Player.UnloadAllScenes">
            <summary>
             Unload all loaded scenes
            </summary>
        </member>
        <member name="M:AtomicPlayer.Player.GetViewport">
            <summary>
             Get the player default viewport
            </summary>
        </member>
        <member name="T:MiniJSON.Json">
             <summary>
             This class encodes and decodes JSON strings.
             Spec. details, see http://www.json.org/
            
             JSON uses Arrays and Objects. These correspond here to the datatypes IList and IDictionary.
             All numbers are parsed to doubles.
             </summary>
        </member>
        <member name="M:MiniJSON.Json.Deserialize(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An List&lt;object&gt;, a Dictionary&lt;string, object&gt;, a double, an integer,a string, null, true, or false</returns>
        </member>
        <member name="M:MiniJSON.Json.Serialize(System.Object)">
            <summary>
            Converts a IDictionary / IList object or a simple type (string, int, etc.) into a JSON string
            </summary>
            <param name="json">A Dictionary&lt;string, object&gt; / List&lt;object&gt;</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
    </members>
</doc>
